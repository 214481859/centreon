meta {
  name: Authenticate
  type: http
  seq: 1
}

post {
  url: http://{{url}}/centreon/api/index.php?action=authenticate
  body: formUrlEncoded
  auth: none
}

query {
  action: authenticate
}

headers {
  Content-Type: application/x-www-form-urlencoded
}

body:form-urlencoded {
  username: {{api_user}}
  password: {{api_password}}
}

tests {
  bru.setEnvVar("token",  res.getBody().authToken);
  
  // pm.globals.set("loadHelpers", function loadHelpers() {
      "use strict";
  
      let helpers = {};
  
      /** Test function to show this kludge is working. */
      helpers.test200 = function test200() {
          test("Status code is 200", function () {
              expect(res.getStatus()).to.equal(200);
          });
      }
      
      helpers.testJson = function testJson() {
          test("Content-Type header is application/json", function () {
  //             expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=utf-8');
          });
          
          test("Response body uses json format", function () {
              res.getBody();
          });
      }
      
      helpers.notEmpty = function notEmpty() {
          test("Result is not empty", function () {
              res.getBody().length > 0;
          });
      }
      
      helpers.checkHostListFormat = function checkHostListFormat(columns) {
          if (typeof columns === 'undefined') {
              columns = ["id", "name", "alias", "address", "state", "state_type", "output", "max_check_attempts", "check_attempt", "last_check", "last_state_change", "last_hard_state_change", "acknowledged", "instance_name", "criticality"];
          }
          
          let hostListSchema = {
            "type": "array",
            "items": {		
              "type": "object",
              "required": columns,
              "properties": {
                "id": { "type": "integer" },
                "name": { "type ": "string" },
                "alias": { "type ": "string" },
                "address": { "type": "string" },
                "state": { "type": "integer" },
                "state_type": { "type ": "integer" },
                "output": { "type ": "string" },
                "max_check_attempts": { "type": "integer" },
                "check_attempt": { "type": "integer" },
                "last_check": { "type": ["integer", "null"] },
                "last_state_change": { "type": ["integer", "null"] },
                "last_hard_state_change": { "type": ["integer", "null"] },
                "acknowledged": { "type ": "integer" },
                "instance_name": { "type ": "string" },
                "criticality": { "type": ["string", "null"] }
              },
              "additionalProperties": true
            }
          };
  
          test('host list is well formatted', function() {
  //             pm.response.to.have.jsonSchema(hostListSchema);
          });
      }
      
      helpers.checkServiceListFormat = function checkServiceListFormat(columns) {
          if (typeof columns === 'undefined') {
              columns = ["host_id", "name", "description", "service_id", "state", "state_type", "output", "perfdata", "max_check_attempts", "check_attempt", "last_check", "last_state_change", "last_hard_state_change", "acknowledged", "criticality"];
          }
          
          let serviceListSchema = {
            "type": "array",
            "items": {		
              "type": "object",
              "required": columns,
              "properties": {
                "host_id": { "type": "integer" },
                "name": { "type ": "string" },
                "description": { "type ": "string" },
                "service_id": { "type": "integer" },
                "state": { "type": "integer" },
                "state_type": { "type ": "integer" },
                "output": { "type ": "string" },
                "perfdata": { "type ": "string" },
                "max_check_attempts": { "type": "integer" },
                "check_attempt": { "type": "integer" },
                "last_check": { "type": ["integer", "null"] },
                "last_state_change": { "type": ["integer", "null"] },
                "last_hard_state_change": { "type": ["integer", "null"] },
                "acknowledged": { "type ": "integer" },
                "criticality": { "type": ["string", "null"] }
              },
              "additionalProperties": true
            }
          };
  
          test('service list is well formatted', function() {
  //             pm.response.to.have.jsonSchema(serviceListSchema);
          });
      }
      
      helpers.checkHostList = function checkHostList(columns) {
          helpers.test200();
          helpers.testJson();
          helpers.notEmpty();
          helpers.checkHostListFormat(columns);
      }
      
      helpers.checkServiceList = function checkServiceList(columns) {
          helpers.test200();
          helpers.testJson();
          helpers.notEmpty();
          helpers.checkServiceListFormat(columns);
      }
  
      return helpers;
  } + '; loadHelpers();'); // when eval'd out of globals, execute it
  
}
