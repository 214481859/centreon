{
	"info": {
		"_postman_id": "304f3043-c396-40fe-9f7b-45fb43b2e1eb",
		"name": "Authentication_Provider",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-304f3043-c396-40fe-9f7b-45fb43b2e1eb"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "50ebc516-3dd0-4d9c-a313-fa72b99836a7"
							}
						}
					],
					"id": "612988a4-9eab-43b7-a86c-4658846d0e84",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 12,\r",
									"            \"has_uppercase\": true,\r",
									"            \"has_lowercase\": true,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": true,\r",
									"            \"attempts\": 5,\r",
									"            \"blocking_duration\": 900,\r",
									"            \"password_expiration\": {\r",
									"                \"expiration_delay\": 15552000,\r",
									"                \"excluded_users\": [\r",
									"                    \"centreon-gorgone\"\r",
									"                ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": false,\r",
									"            \"delay_before_new_password\": 3600\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f88c1cfb-eff8-4f51-b5ed-f78afcb1ec4e"
							}
						}
					],
					"id": "098735a1-f997-4c38-8014-9beeac78d5bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are successully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4e4a5d01-3f9c-48c6-8e0a-efd7982c6f29"
							}
						}
					],
					"id": "60aab7af-2740-4866-bdf0-61ee753b6375",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 8,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 8,\r",
									"            \"has_uppercase\": false,\r",
									"            \"has_lowercase\": false,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": false,\r",
									"            \"attempts\": 8,\r",
									"            \"blocking_duration\": 600,\r",
									"            \"password_expiration\": {\r",
									"            \"expiration_delay\": 15553000,\r",
									"            \"excluded_users\": [\r",
									"                \"admin\"\r",
									"            ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": true,\r",
									"            \"delay_before_new_password\": 7200\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "68439b02-707d-4075-9235-23854fa239bf"
							}
						}
					],
					"id": "24a78c97-fb9e-410f-8746-104f3d8008dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_min_length] Must have a minimum value of 8\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e41e7731-e053-46dc-82db-6d078e42f218"
							}
						}
					],
					"id": "c31eb2a2-7cd0-40fa-8a5d-63e164506302",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 7,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_min_length] Must have a maximum value of 128\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f4a8128d-4efe-4d49-adf5-d58900753aef"
							}
						}
					],
					"id": "1e21fd7c-d59a-42af-be2d-791f29d0611a",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 129,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.attempts] Must have a minimum value of 1\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "db66a19d-34c3-4a14-baff-4ddea4ac73a9"
							}
						}
					],
					"id": "5ed88bc3-d8ea-4c2e-89d6-f01076d08999",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 0,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.attempts] Must have a maximum value of 10\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "76e4d76b-504e-46e5-8089-9538f6ed1589"
							}
						}
					],
					"id": "7ec89ec9-ea27-4cfe-ade9-8351326dd9fa",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 11,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.blocking_duration] Must have a maximum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "200353f9-0ca8-45e8-bdbc-3cf944ad659f"
							}
						}
					],
					"id": "d8665cef-1cf6-4a79-b5a3-01a652aa9d22",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 604801,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.password_expiration.expiration_delay] Must have a minimum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b643db82-4ee1-4849-a7ae-27cc2bab2451"
							}
						}
					],
					"id": "a959093d-d87f-43b1-ad8b-36da6553777f",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604799,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.delay_before_new_password] Must have a minimum value of 3600\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "615e5677-26a1-49bb-ac61-e1a25b42e305"
							}
						}
					],
					"id": "5d3e49cc-fb4e-4b93-b2ae-8ba52f4b657e",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604800,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 3599\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are not updated, because of invalid values.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[password_security_policy.delay_before_new_password] Must have a maximum value of 604800\\n\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "27823ec4-c02b-45e5-b5dd-f8678af75615"
							}
						}
					],
					"id": "3b3851eb-7937-49e8-ab63-c979c2550d99",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 604800,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 604801\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				}
			],
			"id": "019e233d-9a60-4fed-9230-21099c33bbcd"
		},
		{
			"name": "User non-admin without topology",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "03146f45-3cbe-4b34-857f-083b4bb4e522"
							}
						}
					],
					"id": "9307351d-b37d-4d9d-9897-9e4467e8ae38",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!123;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2c204032-e28a-46cd-8f9a-d52b414b01a7"
							}
						}
					],
					"id": "5cbe3c41-48cd-4d73-9f2f-b751b067453d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new access rights has been successfully granted.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "61eab4b3-864e-4099-8984-af3344c3f880"
							}
						}
					],
					"id": "4343b055-785b-415a-b586-8b8b146d170e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "83067bcc-1310-48fb-8353-3ce636447c75"
							}
						}
					],
					"id": "d2d526ec-9a16-4e26-b68e-69624e7f879e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "651acb7b-b0b2-4e37-9e2d-cad13aadf8ec"
							}
						}
					],
					"id": "e6ab8221-796c-4d14-b02b-98041da31e6f",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are not listed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "57c1ff9b-83df-42a3-be60-81decfea7d11"
							}
						}
					],
					"id": "bd681355-ea93-4459-87cd-9ded51f74e25",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 8,\r\n    \"has_uppercase\": false,\r\n    \"has_lowercase\": false,\r\n    \"has_number\": true,\r\n    \"has_special_character\": false,\r\n    \"attempts\": 8,\r\n    \"blocking_duration\": 600,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15553000,\r\n      \"excluded_users\": [\r\n        \"admin\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": true,\r\n    \"delay_before_new_password\": 7200\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are not listed, because the user does not have sufficient rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a12ec993-8014-42d7-a48f-d1f270480819"
							}
						}
					],
					"id": "26087dbb-a204-4e23-8e96-566969e918a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4633bbbd-083f-4be5-9687-4b531f27dc98"
							}
						}
					],
					"id": "5946bb80-76d9-4e7c-b717-47557c5917c0",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "6b1b4d2c-8550-410c-9f05-c1bceed2bc6a"
		},
		{
			"name": "User non-admin with topology",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "302ee54b-6685-49ff-bb11-bf7652e192bc"
							}
						}
					],
					"id": "d77a209e-cd38-4f97-9c52-452abcbad43d",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "74df13f2-9a7a-4cc0-832d-406d420a4498"
							}
						}
					],
					"id": "6e503d87-1c77-4468-8588-b30b02c22faf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "86eb822d-32d7-43e6-a0a6-31b72686cb68"
							}
						}
					],
					"id": "20bf37cf-673c-4560-a9ad-d00bfb42c469",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Administration;Authentication\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5468128c-8894-434e-b6c8-3f2de22eac1c"
							}
						}
					],
					"id": "f4767fe1-72f3-4863-9b5e-c56cf00c769b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3f7b5478-2508-4687-a376-9cc7ca08567a"
							}
						}
					],
					"id": "4a27ee9e-90a7-47f7-9cc6-9c243de06d00",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "224b4a8a-1ade-4668-bce5-62586b76d96e"
							}
						}
					],
					"id": "72e0599a-7b44-4cf9-8e32-a445739cd290",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!123\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The parameters are successully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b1128b63-730e-42d8-a618-f8f60c637b1e"
							}
						}
					],
					"id": "3e83582e-5ec3-4cee-af58-27e45b0080df",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n    \"password_min_length\": 12,\r\n    \"has_uppercase\": true,\r\n    \"has_lowercase\": true,\r\n    \"has_number\": true,\r\n    \"has_special_character\": true,\r\n    \"attempts\": 5,\r\n    \"blocking_duration\": 900,\r\n    \"password_expiration\": {\r\n      \"expiration_delay\": 15552000,\r\n      \"excluded_users\": [\r\n        \"centreon-gorgone\"\r\n      ]\r\n    },\r\n    \"can_reuse_passwords\": false,\r\n    \"delay_before_new_password\": 3600\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "List authentication provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The parameters are successully listed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql(\r",
									"        {\r",
									"            \"password_security_policy\": {\r",
									"            \"password_min_length\": 12,\r",
									"            \"has_uppercase\": true,\r",
									"            \"has_lowercase\": true,\r",
									"            \"has_number\": true,\r",
									"            \"has_special_character\": true,\r",
									"            \"attempts\": 5,\r",
									"            \"blocking_duration\": 900,\r",
									"            \"password_expiration\": {\r",
									"                \"expiration_delay\": 15552000,\r",
									"                \"excluded_users\": [\r",
									"                    \"centreon-gorgone\"\r",
									"                ]\r",
									"            },\r",
									"            \"can_reuse_passwords\": false,\r",
									"            \"delay_before_new_password\": 3600\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "46818d8e-abbc-4a78-a7fd-11f07efe96d1"
							}
						}
					],
					"id": "ef2eae7f-1611-484f-a487-f4af2497e4de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c2142446-0034-4e2e-b8b0-ddf1272514a4"
							}
						}
					],
					"id": "53a5fd23-41ef-4f35-b565-889368f3748e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "c5e9643c-272e-4083-bb14-cc5ad5134f14"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "085e0f8b-e5d1-433f-905f-52d42cd21b23"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "71f82fc4-e9e3-4db3-b66d-b66bffdbd5e2"
			}
		}
	]
}