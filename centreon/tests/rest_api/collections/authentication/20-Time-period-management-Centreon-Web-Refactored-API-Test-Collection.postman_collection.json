{
	"info": {
		"_postman_id": "4e2be83d-8655-48c5-8274-3ade5754e9cd",
		"name": "20 - Time period management - Centreon Web Refactored API Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-4e2be83d-8655-48c5-8274-3ade5754e9cd"
	},
	"item": [
		{
			"name": "2001 - Adding and deleting a new time period",
			"item": [
				{
					"name": "[2001] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2001-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ae78f92b-1934-4408-8767-10007258450d"
							}
						}
					],
					"id": "95f4203c-67f4-4236-b952-65ace16074d9",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001] Show available time periods before time period creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2001-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"For now, only the four default time periods are listed: 24x7, none, nonworkhours and workhours.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    let tableOfTestPeriodNames = [];\r",
									"    for(let count = 0; count < responseJson.result.length; count++) {\r",
									"        tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"    }\r",
									"    pm.expect(responseJson.result.length).to.eql(tableOfTestPeriodNames.length);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "920daf45-f56b-4574-ab5b-d26b5fcab6e0"
							}
						}
					],
					"id": "ab8e6f18-c796-415b-a5d3-222ff5b95f34",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001] Add a new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[2001-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "078cabbe-cfd0-4c8d-8ac4-8fd22369194b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2001\");\r",
									"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "cb67ff09-4c95-4e21-8fca-a886d2f0c5a3"
							}
						}
					],
					"id": "dcc43040-0301-4873-9fc5-999da08c985f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001] Show available time periods after time period creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2001] Delete the new time period\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"let tableOfTestPeriodNames = [];\r",
									"for(let count = 0; count < responseJson.result.length; count++) {\r",
									"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"}\r",
									"let indexOfNewTimePeriodInResponse = tableOfTestPeriodNames.indexOf(pm.collectionVariables.get(\"timePeriodName\"));\r",
									"\r",
									"pm.test(\"Five time periods are now listed: the default ones and a new one named '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' with alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(pm.collectionVariables.get(\"timePeriodName\"));\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].alias).to.eql(pm.collectionVariables.get(\"timePeriodAlias\"));\r",
									"})\r",
									"\r",
									"pm.test(\"For this new time period, no other field has been filled.\", function() {\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].sunday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].monday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].tuesday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].wednesday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].thursday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].friday).to.eql(\"\");\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].saturday).to.eql(\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "827193fd-f947-466b-936b-d760d29fac1b"
							}
						}
					],
					"id": "150bd327-f6c2-4be5-858f-c7729a9bbdb8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001] Delete the new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.collectionVariables.unset(\"timePeriodName\");\r",
									"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "abd31cea-ac8a-4cf2-b7e1-e989b944a955"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2f481c2c-1f55-417f-8962-20be99fbf155"
							}
						}
					],
					"id": "afde0909-07e7-4d5e-a98b-6de4a3f0e7fa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001] Show available time periods after time period deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2001-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The listed time periods are now back to four: 24x7, none, nonworkhours and workhours.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    let tableOfTestPeriodNames = [];\r",
									"    for(let count = 0; count < responseJson.result.length; count++) {\r",
									"        tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"    }\r",
									"    pm.expect(responseJson.result.length).to.eql(tableOfTestPeriodNames.length);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7de6903a-9ed7-49e2-875a-c53601c4297b"
							}
						}
					],
					"id": "f2c4361f-7e32-4504-92fc-5772566a9924",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2001-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "abb40082-1e00-4764-9938-00eababca160"
							}
						}
					],
					"id": "2e876cd8-0cd4-4369-b6c4-4a9622ef01f7",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "f4e060e5-4742-4d0b-9179-ec9b6a333b40"
		},
		{
			"name": "2002 - Adding a time period with a duplicate name",
			"item": [
				{
					"name": "[2002] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2002-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4e1f6b92-efb8-4499-8d6a-cb0d70c8483d"
							}
						}
					],
					"id": "5914f124-887b-4288-a051-fb06090f5011",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2002] Add a new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2002-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3d848cf6-2b5e-4a3f-903c-4f6bbe17bfd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2002\");\r",
									"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
								],
								"type": "text/javascript",
								"id": "d085b6a2-8fc3-41e1-82e6-9208a46553b2"
							}
						}
					],
					"id": "bbe7e8df-ede5-4593-8ff9-2c44c419b1b6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2002] Add a new time period with a duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2002] Show available time periods after time period creation\"\r",
									"\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAliasBis\") + \"' could not be created, due to a conflict with an existing time period.\", function () {\r",
									"    const expectedResponseCode = 409\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson).to.eql(\"Object already exists (\" + pm.collectionVariables.get(\"timePeriodName\") + \")\");\r",
									"    pm.collectionVariables.unset(\"timePeriodAliasBis\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b1c24504-40d3-4344-9f2e-17c596c4d50a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodAliasBis\", \"Duplicate time period for API tests.\");"
								],
								"type": "text/javascript",
								"id": "29f51a30-9d0e-4eab-8a97-afb5e089715b"
							}
						}
					],
					"id": "0239641f-0e85-4678-b066-846b2d197f08",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAliasBis}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2002] Show available time periods after time period creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2002-cleanup] Delete the new time period\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"let tableOfTestPeriodNames = [];\r",
									"for(let count = 0; count < responseJson.result.length; count++) {\r",
									"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"}\r",
									"let indexOfNewTimePeriodInResponse = tableOfTestPeriodNames.indexOf(pm.collectionVariables.get(\"timePeriodName\"));\r",
									"\r",
									"pm.test(\"There are still five time periods and not six: the default ones and a single new one named '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' with alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(pm.collectionVariables.get(\"timePeriodName\"));\r",
									"    pm.expect(responseJson.result[indexOfNewTimePeriodInResponse].alias).to.eql(pm.collectionVariables.get(\"timePeriodAlias\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f9bb3d92-697f-4575-8ec0-431081917854"
							}
						}
					],
					"id": "4151f286-13e5-44e9-a42c-d307f07eb043",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2002-cleanup] Delete the new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"timePeriodName\");\r",
									"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4e164568-2b94-4444-ad6a-cdf12bc56c9d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "78e80662-4573-4418-aaee-629a563f59bd"
							}
						}
					],
					"id": "07ca4468-16e7-4df0-b94d-72a01cbef98a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2002-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "40799b74-0a31-410f-afb5-674adb025233"
							}
						}
					],
					"id": "0b20d60d-c168-4e5b-a7fe-723a39e362cb",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "4ed1b8df-1067-4656-8001-b15e8cc80c23"
		},
		{
			"name": "2003 - Adding a new time period with an empty name",
			"item": [
				{
					"name": "[2003] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2003-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a9ee5319-5509-4d7b-9de6-7fb942199fe9"
							}
						}
					],
					"id": "4941ad85-b895-4bb3-9f33-4cc75aad7c29",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2003] Add a new time period with an empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Time periods with empty names cannot be added.\", function () {\r",
									"    const expectedResponseCode = 400\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2fb0c471-5bc2-4b49-878b-55f2864ec80d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2003\");"
								],
								"type": "text/javascript",
								"id": "8255e901-a75d-4def-9afc-a3195e9f047e"
							}
						}
					],
					"id": "f141b89f-9b21-4457-a35b-a6a33ec1c6d4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"alias\": \"{{timePeriodName}}\",\n    \"days\": [\n        {\n            \"day\": 1,\n            \"time_range\": \"06:30-07:00\"\n        },\n        {\n            \"day\": 7,\n            \"time_range\": \"06:30-07:00,09:00-10:30\"\n        }\n    ],\n    \"templates\": [\n        1\n    ],\n    \"exceptions\": [\n        {\n            \"day_range\": \"monday 1\",\n            \"time_range\": \"06:00-07:00\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2003] Show time periods after time period with empty name creation attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"let tableOfTestPeriodNames = [];\r",
									"for(let count = 0; count < responseJson.result.length; count++) {\r",
									"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"}\r",
									"\r",
									"pm.test(\"Only the four default time periods should be listed; the time period with an empty name should not have been added.\", function() {\r",
									"    postman.setNextRequest(\"[2003-DEBUG] Delete time period with no name\");\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.not.contain(\"\");\r",
									"    postman.setNextRequest(\"[2003-cleanup] Logout from admin user and clear collection variables\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ab4ef13b-2d60-47b5-9724-e2923290410b"
							}
						}
					],
					"id": "03a4cbca-c705-492d-a415-4485460c45db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2003-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b6f74a2a-be6b-46c6-b939-99beedba682c"
							}
						}
					],
					"id": "c904b02f-0f0e-4536-a441-922d6612bdee",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "db7b9727-c4a5-4567-bbf7-7eb57d48ca9a"
		},
		{
			"name": "2004 - Setting parameters for default time period",
			"item": [
				{
					"name": "[2004] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2004-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f926e1bd-7e5c-4c42-83c9-df2f0f9b25c3"
							}
						}
					],
					"id": "45cf3fd4-0e0d-4f94-8f0f-7d8795b0f362",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004] Show available time periods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2004-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"let tableOfTestPeriodNames = [];\r",
									"for(let count = 0; count < responseJson.result.length; count++) {\r",
									"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"}\r",
									"\r",
									"pm.test(\"Only the four default time periods should be listed.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b7f8a120-a18c-4f69-a354-ab05abbffd9f"
							}
						}
					],
					"id": "d8059b28-93b5-4391-a300-9bdf72c2a9c9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004] Set parameters for default 'workhours' time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2004-cleanup] Revert back parameters for 'workhours'\"\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(pm.info.requestName);\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2004] Show available time periods after 'workhours' update\");\r",
									"    }    \r",
									"});"
								],
								"type": "text/javascript",
								"id": "fdd4f0a0-ac73-450f-843b-ae8e7914f096"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\r",
									"    values = [\"09:00-18:00\", \"09:00-18:00\", \"09:00-18:00\", \"09:00-18:00\", \"09:00-14:00\"];\r",
									"    parametersToCheck = [];\r",
									"}\r",
									"\r",
									"if (!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    let currentParameter = parameters.shift()\r",
									"    pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
									"    pm.collectionVariables.set(\"currentValue\", values.shift());\r",
									"\r",
									"    pm.collectionVariables.set(currentParameter, pm.collectionVariables.get(\"currentValue\"));\r",
									"    parametersToCheck.push(currentParameter);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);\r",
									"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
								],
								"type": "text/javascript",
								"id": "db6d3426-693b-4f87-9a1e-a5f669d15516"
							}
						}
					],
					"id": "1319bb8c-7e4e-450e-bbda-d43d3fc2ef4e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"workhours;{{currentParameter}};{{currentValue}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004] Show available time periods after 'workhours' update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2004-cleanup] Revert back parameters for 'workhours'\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
									"    if(responseJson.result[count1].name == \"workhours\") {\r",
									"        const keys = Object.keys(responseJson.result[count1]);\r",
									"        const values = Object.values(responseJson.result[count1]);\r",
									"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
									"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
									"            if(indexOfParameter != -1) {\r",
									"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for workhours's parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
									"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
									"                }) \r",
									"            } else {\r",
									"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
									"                    pm.expect(true).to.eql(false);\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
									"        break;\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4c94d694-5538-4c55-9327-b25a62dabdde"
							}
						}
					],
					"id": "b8e1a45b-1b97-4c7c-a447-8e0e503c488c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004-cleanup] Revert back parameters for 'workhours'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"[Cleanup] Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(pm.info.requestName);\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2004-cleanup] Show available time periods after 'workhours' updates are reverted\");    \r",
									"    }    \r",
									"});"
								],
								"type": "text/javascript",
								"id": "963695d1-0020-424b-ace7-fdfedee7a390"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\r",
									"    values = [\"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\"];\r",
									"    parametersToCheck = [];\r",
									"}\r",
									"\r",
									"if (!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    let currentParameter = parameters.shift()\r",
									"    pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
									"    pm.collectionVariables.set(\"currentValue\", values.shift());\r",
									"\r",
									"    pm.collectionVariables.set(currentParameter, pm.collectionVariables.get(\"currentValue\"));\r",
									"    parametersToCheck.push(currentParameter);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);\r",
									"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
								],
								"type": "text/javascript",
								"id": "5cb494d9-bab3-4ec3-9ce2-ac7b327ee6e5"
							}
						}
					],
					"id": "8f91dfa8-64d8-465d-9713-1b4fefb686d6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"workhours;{{currentParameter}};{{currentValue}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004-cleanup] Show available time periods after 'workhours' updates are reverted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"\r",
									"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
									"    if(responseJson.result[count1].name == \"workhours\") {\r",
									"        const keys = Object.keys(responseJson.result[count1]);\r",
									"        const values = Object.values(responseJson.result[count1]);\r",
									"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
									"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
									"            if(indexOfParameter != -1) {\r",
									"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for workhours's parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
									"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
									"                }) \r",
									"            } else {\r",
									"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
									"                    pm.expect(true).to.eql(false);\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
									"        break;\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "26c53b44-d6cf-49cc-98ea-619f431aa28d"
							}
						}
					],
					"id": "e8608720-2014-43c6-ac25-12e3a8d40161",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2004-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d6c573e8-d285-4f9c-b3ba-a9e1dd361f25"
							}
						}
					],
					"id": "def7f68f-d6a0-4ab9-9f34-4618b229f1b6",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "ce175e8d-0d7b-47db-a136-45e3c360bbff"
		},
		{
			"name": "2005 - Setting parameters for a new time period",
			"item": [
				{
					"name": "[2005] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2005-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c81f6f8f-935d-43a6-a7b1-eb6f5d63b41d"
							}
						}
					],
					"id": "b33b5890-c952-4e84-9178-46706689dac7",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2005] Add a new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[2005-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b06b9346-92e2-4ef0-88bc-90f2c385d084"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2005\");\r",
									"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
								],
								"type": "text/javascript",
								"id": "5e14ff17-e79a-4bb2-87ff-ba052b33577d"
							}
						}
					],
					"id": "e1b70fe2-feab-40fd-984c-555ca9892bab",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2005] Set parameters for newly created time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2005-cleanup] Delete the new time period\"\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"timePeriodName\")) {\r",
									"        pm.collectionVariables.set(\"timePeriodName\", pm.collectionVariables.get(\"name\"));  \r",
									"    }\r",
									"\r",
									"    if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"timePeriodAlias\")) {\r",
									"        pm.collectionVariables.set(\"timePeriodAlias\", pm.collectionVariables.get(\"alias\"));\r",
									"    }\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(pm.info.requestName);\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2005] Show available time periods after time period update\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "a3ea9611-b6d4-45a7-9f56-b479e9b0d4f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"alias\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r",
									"    values = [\"New alias for API tests time period\", \"00:00-24:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:17-24:00\", \"09:00-17:00\", \"09:00-13:30\"];\r",
									"    parametersToCheck = [];\r",
									"}\r",
									"\r",
									"if (!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    let currentParameter = parameters.shift()\r",
									"    pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
									"    pm.collectionVariables.set(\"currentValue\", values.shift());\r",
									"\r",
									"    pm.collectionVariables.set(currentParameter, pm.collectionVariables.get(\"currentValue\"));\r",
									"    parametersToCheck.push(currentParameter);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);\r",
									"pm.collectionVariables.set(\"parametersToCheck\", parametersToCheck);"
								],
								"type": "text/javascript",
								"id": "ee2d0b83-a7a1-44cd-9180-17f85b4e78fe"
							}
						}
					],
					"id": "d0508817-04e1-462b-9b35-e77c4cd04276",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}};{{currentParameter}};{{currentValue}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2005] Show available time periods after time period update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2005-cleanup] Delete the new time period\"\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"var parametersToCheck = pm.collectionVariables.get(\"parametersToCheck\");\r",
									"\r",
									"for(let count1 = 0; count1 < responseJson.result.length; count1++) {\r",
									"    if(responseJson.result[count1].name == pm.collectionVariables.get(\"timePeriodName\")) {\r",
									"        const keys = Object.keys(responseJson.result[count1]);\r",
									"        const values = Object.values(responseJson.result[count1]);\r",
									"        for (let count2 = 0; count2 < parametersToCheck.length; count2++) {\r",
									"            let indexOfParameter = keys.indexOf(parametersToCheck[count2]);\r",
									"            if(indexOfParameter != -1) {\r",
									"                pm.test(\"The value '\" + pm.collectionVariables.get(parametersToCheck[count2])  + \"' was found for \" + pm.collectionVariables.get(\"timePeriodName\") + \"'s parameter '\" + parametersToCheck[count2] + \"'.\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(parametersToCheck[count2])).to.eql(values[indexOfParameter]);\r",
									"                pm.collectionVariables.unset(parametersToCheck[count2]);\r",
									"                }) \r",
									"            } else {\r",
									"                pm.test(\"The parameter \" + parametersToCheck[count2] + \" does not exist or cannot be found.\", function() {\r",
									"                    pm.expect(true).to.eql(false);\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        pm.collectionVariables.unset(\"parametersToCheck\");\r",
									"        break;\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "38fa22bb-9a7a-4f56-b4ca-ea5639179dd0"
							}
						}
					],
					"id": "64bc9f2d-83ed-40db-9994-1670adbbdcf4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2005-cleanup] Delete the new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"[Cleanup] The time period with name \\\"\" + pm.collectionVariables.get(\"timePeriodName\") + \"\\\" and alias \\\"\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"\\\" has been successfully deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.collectionVariables.unset(\"timePeriodName\");\r",
									"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b5fd63b6-1b18-424f-a0ae-1b56335677af"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "af486216-d0e5-4de1-bbd5-c885fa7cdff5"
							}
						}
					],
					"id": "67cc0437-3768-4e03-a00a-525bcaf23674",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2005-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "be1465f4-ddb9-4634-9206-2c9d7ee2dda1"
							}
						}
					],
					"id": "9599f8bb-a2a8-40da-b6c3-d39a75549d20",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "95d7ef3a-bbc5-4690-8731-1b9fa2bf051b"
		},
		{
			"name": "2006 - Setting non-compliant day parameters on new time period",
			"item": [
				{
					"name": "[2006] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2006-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "811a6c93-162c-4020-aa3c-874699968adf"
							}
						}
					],
					"id": "eeb503a4-585b-4670-8e32-c311f866d43c",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2006] Add a new time period with non-compliant day parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"The time period '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' has not been created as there is a non-compliant parameter.\" , function () {\r",
									"    const expectedResponseCode = 400\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "84b3724b-db79-4831-80bf-3984e6417563"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2006\");"
								],
								"type": "text/javascript",
								"id": "540f747d-85b0-4b05-be20-40a3de41c842"
							}
						}
					],
					"id": "0328c9b9-dcc8-40d4-b1a5-09e6105aaf4c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{timePeriodName}}\",\n    \"alias\": \"{{timePeriodName}}\",\n    \"days\": [\n        {\n            \"day\": 1,\n            \"time_range\": \"uncompliant parameter\"\n        }\n    ],\n    \"templates\": [\n        1\n    ],\n    \"exceptions\": [\n        {\n            \"day_range\": \"monday 1\",\n            \"time_range\": \"06:00-07:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2006] Add a new time period with inconsistent time interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"The time period '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' has not been created as there is a non-compliant parameter.\" , function () {\r",
									"    const expectedResponseCode = 400\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a7be4872-e16a-4fc8-a8ba-92514beaf5d0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2006\");"
								],
								"type": "text/javascript",
								"id": "d2fda96f-efd9-4bcb-9e7e-6a0b0ffeca50"
							}
						}
					],
					"id": "c7b876e1-010b-4894-986b-f5ea532c54d6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{timePeriodName}}\",\n    \"alias\": \"{{timePeriodName}}\",\n    \"days\": [\n        {\n            \"day\": 1,\n            \"time_range\": \"08:00-07:00\"\n        }\n    ],\n    \"templates\": [\n        1\n    ],\n    \"exceptions\": [\n        {\n            \"day_range\": \"monday 1\",\n            \"time_range\": \"06:00-07:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2006] Show time periods after time period with non-compliant parameter creation attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"let tableOfTestPeriodNames = [];\r",
									"for(let count = 0; count < responseJson.result.length; count++) {\r",
									"    tableOfTestPeriodNames.push(responseJson.result[count].name);\r",
									"}\r",
									"\r",
									"pm.test(\"Only the four default time periods should be listed; the time period with an empty name should not have been added.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"24x7\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"none\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"nonworkhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.contain(\"workhours\");\r",
									"    pm.expect(tableOfTestPeriodNames).to.not.contain(pm.collectionVariables.get(\"timePeriodName\"));\r",
									"    postman.setNextRequest(\"[2006-cleanup] Logout from admin user and clear collection variables\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "19544ebe-6455-4892-a7a6-aaa101978e87"
							}
						}
					],
					"id": "f71f48f9-cce1-43e8-8d58-d512c4f8464c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2006-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The expected message is displayed ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "39af5f69-81f2-46e5-aa45-d78ca4015e83"
							}
						}
					],
					"id": "bbf78eb2-3fd6-442a-8cb8-68427b9c101e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "bddc47cf-7238-413a-8695-2bd3e3a18302"
		},
		{
			"name": "2007 - Setting exceptions on new time period",
			"item": [
				{
					"name": "[2007] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2007-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "116298df-07a9-41a8-abfb-3226a9a4bf83"
							}
						}
					],
					"id": "33d22bb2-092f-4c06-bdd9-6ffb5f655ece",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2007] Add a new time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2007-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"'.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d833e0b5-e5dc-45ea-8ce4-497d2be0c95f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"TP-Test-API-2007\");\r",
									"pm.collectionVariables.set(\"timePeriodAlias\", \"Time period used for API tests\");"
								],
								"type": "text/javascript",
								"id": "23df02cc-7c31-4a35-a799-407ff0614dd4"
							}
						}
					],
					"id": "9aa9f35a-8f1c-4897-bb1e-8775365b0953",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{timePeriodAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2007] Set exceptions on newly created time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2007-cleanup] Delete the time period\"\r",
									"\r",
									"pm.test(\"An exception has been set on \" + pm.collectionVariables.get(\"currentExceptionDate\") + \" (Timerange: \" + pm.collectionVariables.get(\"currentExceptionTimerange\") + \")\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    const exceptionDates = pm.collectionVariables.get(\"listOfExceptionDates\");\r",
									"    if (exceptionDates && exceptionDates.length > 0) {\r",
									"        postman.setNextRequest(pm.info.requestName);\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentExceptionDate\");\r",
									"        pm.collectionVariables.unset(\"currentExceptionTimerange\");\r",
									"        pm.collectionVariables.unset(\"listOfExceptionDates\");\r",
									"        pm.collectionVariables.unset(\"listOfExceptionTimeranges\");\r",
									"        pm.collectionVariables.unset(\"count\");\r",
									"        postman.setNextRequest(\"[2007] Get exceptions on newly created time period after set\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "ad1c9e83-e5c2-48d9-951b-9abd271a020b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let exceptionDates = pm.collectionVariables.get(\"listOfExceptionDates\");\r",
									"let exceptionTimeranges = pm.collectionVariables.get(\"listOfExceptionTimeranges\");\r",
									"let count = pm.collectionVariables.get(\"count\");\r",
									"\r",
									"if (!exceptionDates || exceptionDates.length == 0) {\r",
									"    exceptionDates = [\"January 1\", \"December 25\", \"August 15\"];\r",
									"    exceptionTimeranges = [\"00:00-24:00\", \"00:00-24:00\", \"07:00-19:00\"];\r",
									"    pm.collectionVariables.set(\"totalNumberOfExceptions\", exceptionDates.length);\r",
									"    count = 0;\r",
									"}\r",
									"\r",
									"let currentDate = exceptionDates.shift();\r",
									"let currentTimerange = exceptionTimeranges.shift();\r",
									"\r",
									"if (!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.collectionVariables.set(\"currentExceptionDate\", currentDate);\r",
									"    pm.collectionVariables.set(\"currentExceptionTimerange\", currentTimerange);\r",
									"    pm.collectionVariables.set(\"exceptionDate\" + count, currentDate);\r",
									"    pm.collectionVariables.set(\"exceptionTimerange\" + count, currentTimerange);\r",
									"    count++;\r",
									"    pm.collectionVariables.set(\"count\", count);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfExceptionDates\", exceptionDates);\r",
									"pm.collectionVariables.set(\"listOfExceptionTimeranges\", exceptionTimeranges);"
								],
								"type": "text/javascript",
								"id": "41f93870-8afe-4a09-b01c-1bd41f545437"
							}
						}
					],
					"id": "a5e5b2d1-f5a6-4aa7-b1b9-aaca62bae4a4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}};{{currentExceptionDate}};{{currentExceptionTimerange}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2007] Get exceptions on newly created time period after set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const nextRequestInCaseOfFailure = \"[2007-cleanup] Delete the time period\"",
									"",
									"pm.test(\"A list of exceptions has been fetched.\", function () {",
									"    const expectedResponseCode = 200",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);",
									"    pm.response.to.have.status(expectedResponseCode);",
									"});",
									"",
									"var exceptionsFound = 0;",
									"for (var count1 = 0; count1 < responseJson.result.length; count1++) {",
									"    for(var count2 = 0; count2 < pm.collectionVariables.get(\"totalNumberOfExceptions\"); count2++) {",
									"        var currentDateString = \"exceptionDate\" + count2;",
									"        var currentExceptionDate = pm.collectionVariables.get(currentDateString);",
									"        var currentTimerangeString = \"exceptionTimerange\" + count2;",
									"        var currentExceptionTimerange = pm.collectionVariables.get(currentTimerangeString);",
									"        if(responseJson.result[count1].days == currentExceptionDate) {",
									"            pm.test(\"Exception date \" + currentExceptionDate + \" has been found.\", function() {true;})",
									"            pm.test(\"Exception timerange for \" + currentExceptionDate + \" (\" + currentExceptionTimerange + \") has been found.\", function() {",
									"                pm.expect(currentExceptionTimerange).to.eql(responseJson.result[count1].timerange);",
									"                exceptionsFound++;",
									"                pm.collectionVariables.unset(currentDateString);",
									"                pm.collectionVariables.unset(currentTimerangeString);",
									"            })",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"All exceptions have been found.\", function() {",
									"    pm.expect(pm.collectionVariables.get(\"totalNumberOfExceptions\")).to.eql(exceptionsFound);",
									"    pm.collectionVariables.unset(\"count\");",
									"    pm.collectionVariables.unset(\"totalNumberOfExceptions\");",
									"})"
								],
								"type": "text/javascript",
								"id": "29d36cd2-9a75-4bb2-af24-fcce706aa6ba"
							}
						}
					],
					"id": "9bc48620-6295-4834-a961-ce031583cf8a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"getexception\",\n  \"object\":\"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2007-cleanup] Delete the time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The time period with name '\" + pm.collectionVariables.get(\"timePeriodName\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriodAlias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"timePeriodName\");\r",
									"    pm.collectionVariables.unset(\"timePeriodAlias\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6f04ad5d-508f-4647-ba0f-d0ac36d40b45"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a910b1c7-a109-40a6-8e68-6404c3fde157"
							}
						}
					],
					"id": "a8c2fe5e-dd2a-4c00-82cb-a00fdb710546",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{timePeriodName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2007-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d37319e3-586a-43f1-a2c2-db637ece978d"
							}
						}
					],
					"id": "0b51a80a-a09d-4530-82a8-add16cc49dd7",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "1045111c-fe82-455e-81ef-83c9d8a5ed9b"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a0ca506c-bc17-4302-a3f9-10cd28895244"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.setNextRequestBasedOnStatusCode = (pm, postman, response, expectedResponseCode, nextRequestInCaseOfFailure) => {",
					"    if(expectedResponseCode != response.code) {",
					"        if (!pm.collectionVariables.get(\"requestTries\")) {",
					"            pm.collectionVariables.set(\"requestTries\", 0);",
					"        }",
					"        pm.collectionVariables.set(\"requestTries\", pm.collectionVariables.get(\"requestTries\") + 1);",
					"        if(pm.collectionVariables.get(\"requestTries\") < pm.environment.get(\"maxNumberOfRetries\")) {",
					"            console.log(\"Response does not have the expected status code | Resending the request \\\"\" + pm.info.requestName + \"\\\"... | Number of tries: \" + pm.collectionVariables.get(\"requestTries\"));",
					"            postman.setNextRequest(pm.info.requestName);",
					"        } else {",
					"            pm.collectionVariables.unset(\"requestTries\");",
					"            pm.collectionVariables.unset(\"nextRequestInCaseOfFailure\");",
					"            console.log(\"Response does not have the expected status code | Aborting the current scenario (too many tries)\");",
					"            postman.setNextRequest(nextRequestInCaseOfFailure);",
					"        }",
					"    } else {",
					"        pm.collectionVariables.unset(\"requestTries\");",
					"        console.log(\"Response has the expected status code \" + pm.response.code + \" | Running the next tests\")",
					"    }",
					"  }"
				],
				"id": "d2102412-9e5f-4c93-b119-c8214fc1dc72"
			}
		}
	]
}