{
	"info": {
		"_postman_id": "29eb234b-3425-4d7d-a5cc-bce24adf7dec",
		"name": "05 - WebSSO Provider Configuration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-29eb234b-3425-4d7d-a5cc-bce24adf7dec"
	},
	"item": [
		{
			"name": "0501 - Update and retrieve WebSSO Provider Configuration",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "694a5d6d-b431-4558-92cd-8ccbbc28afa2"
							}
						}
					],
					"id": "6405dce2-e628-46c9-80ef-0956290dc630",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve default WebSSO Provider Configuration information by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the WebSSO Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"trusted_client_addresses\": [],\r",
									"        \"blacklist_client_addresses\": [],\r",
									"        \"login_header_attribute\": \"HTTP_AUTH_USER\",\r",
									"        \"pattern_matching_login\": null,\r",
									"        \"pattern_replace_login\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4428d427-2864-4c34-9f22-f3593d33adf9"
							}
						}
					],
					"id": "7a6280b8-0a4f-4aa0-830d-89dee3814fc2",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update WebSSO Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The WebSSO Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b40c4f43-9330-4e71-b8c9-c1dbf48cf3f6"
							}
						}
					],
					"id": "bfec8c38-4b03-4216-a037-6285a261a7be",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"trusted_client_addresses\": [\"127.0.0.2\"],\r\n    \"blacklist_client_addresses\": [\"127.0.0.3\"],\r\n    \"login_header_attribute\": \"REMOTE_USER\",\r\n    \"pattern_matching_login\": null,\r\n    \"pattern_replace_login\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebSSO Provider Configuration information with updated values by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the WebSSO Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"is_active\": true,\r",
									"        \"is_forced\": false,\r",
									"        \"login_header_attribute\": \"REMOTE_USER\",\r",
									"        \"pattern_matching_login\": null,\r",
									"        \"pattern_replace_login\": null\r",
									"    });\r",
									"    pm.expect(responseJson.trusted_client_addresses).to.include(\"127.0.0.2\");\r",
									"    pm.expect(responseJson.blacklist_client_addresses).to.include(\"127.0.0.3\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "02a6b468-569f-4fbd-8a2a-006ce50e9f77"
							}
						}
					],
					"id": "9c3eb762-228d-4bf5-8a15-09a4d0643d0c",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				}
			],
			"id": "2384adb2-7df3-430c-b966-45a8bb9a8fb9"
		},
		{
			"name": "0502 - Update WebSSO Provider Configuration with invalid information",
			"item": [
				{
					"name": "required property missing (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The WebSSO Provider informations have not been updated because there's missing properties.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] The property is_active is required\\n[is_forced] The property is_forced is required\\n[trusted_client_addresses] The property trusted_client_addresses is required\\n[blacklist_client_addresses] The property blacklist_client_addresses is required\\n[login_header_attribute] The property login_header_attribute is required\\n[pattern_matching_login] The property pattern_matching_login is required\\n[pattern_replace_login] The property pattern_replace_login is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5ca3479e-420a-43ec-800c-316b5c219571"
							}
						}
					],
					"id": "040572e1-d9bc-4a33-8d79-7763ee7f6092",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid value type passed to a property (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The WebSSO Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] String value found, but a boolean is required\\n[is_forced] String value found, but a boolean is required\\n[trusted_client_addresses[0]] Integer value found, but a string is required\\n[blacklist_client_addresses[0]] Integer value found, but a string is required\\n[login_header_attribute] Boolean value found, but a string or a null is required\\n[pattern_matching_login] Integer value found, but a string or a null is required\\n[pattern_replace_login] Boolean value found, but a string or a null is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c62868b7-09f2-49b8-b3a1-ab9462a05018"
							}
						}
					],
					"id": "cade564e-3ca4-4198-86b6-e007d5437139",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": \"true\",\r\n    \"is_forced\": \"false\",\r\n    \"trusted_client_addresses\": [1],\r\n    \"blacklist_client_addresses\": [3],\r\n    \"login_header_attribute\": true,\r\n    \"pattern_matching_login\": 1,\r\n    \"pattern_replace_login\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The WebSSO Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[WebSSOConfiguration::blacklistClientAddresses] The value '.@' was expected to be a valid ip address\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9a01ddda-184c-47a3-bda2-93ff24e5578d"
							}
						}
					],
					"id": "ee3eade2-dd16-49a0-bdcc-f7399230e84d",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"trusted_client_addresses\": [\"127.0.0.2\"],\r\n    \"blacklist_client_addresses\": [\".@\"],\r\n    \"login_header_attribute\": \"REMOTE_USER\",\r\n    \"pattern_matching_login\": null,\r\n    \"pattern_replace_login\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The WebSSO Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[WebSSOConfiguration::trustedClientAddresses] The value '.@' was expected to be a valid ip address\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0666765c-5caa-4f36-b9cd-93d1b029e24b"
							}
						}
					],
					"id": "4d47f270-2d6c-41fa-8bea-fc5736c433f4",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"trusted_client_addresses\": [\".@\"],\r\n    \"blacklist_client_addresses\": [\"127.0.0.2\"],\r\n    \"login_header_attribute\": \"REMOTE_USER\",\r\n    \"pattern_matching_login\": null,\r\n    \"pattern_replace_login\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				}
			],
			"id": "817d348a-0b93-4958-88a4-89edf11a1b51"
		},
		{
			"name": "0503 - Update and retrieve WebSSO Provider Configuration information as logged non-admin user without Reach API rights",
			"item": [
				{
					"name": "Add user without reach_api rights (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5845166d-716f-4be2-ba3c-f253496767eb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f233d767-2699-4b19-a212-a717f9e4a2c9"
							}
						}
					],
					"id": "8406d867-dd43-4cb3-8355-abeb8513b161",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!1234;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f71b9f21-8d93-423e-b7b4-8cde65f0fec9"
							}
						}
					],
					"id": "c8812b33-b200-4018-b5e2-d44095707b20",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "71ba754b-dd6b-4026-bc28-5997c8580519"
							}
						}
					],
					"id": "168348bf-015a-4e6f-93fa-c15776d028ea",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update WebSSO Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The WebSSO Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "77b7b564-758c-40d9-956e-d2e960e47936"
							}
						}
					],
					"id": "0f2bf1f0-e26e-49e9-bf6c-5ff914b035d0",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"i s_active\": true,\r\n    \"is_forced\": false,\r\n    \"trusted_client_addresses\": [\"127.0.0.2\"],\r\n    \"blacklist_client_addresses\": [\"127.0.0.3\"],\r\n    \"login_header_attribute\": \"REMOTE_USER\",\r\n    \"pattern_matching_login\": null,\r\n    \"pattern_replace_login\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebSSO Provider Configuration information with updated values by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The WebSSO Provider informations have not been listed, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9b220480-68e3-4b8c-879a-182758e1a7c6"
							}
						}
					],
					"id": "57d5d9f7-0c4e-4966-ac40-c3c96b8d6a9e",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "39159b60-eeea-4dbf-b04f-ca5471258c15"
							}
						}
					],
					"id": "46cb6b66-b5cc-4d9f-a818-f3ea6a9217d5",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "d8bca3a9-520d-4f2a-8d31-2bfa456f1b89"
		},
		{
			"name": "0504 - Update and retrieve WebSSO Provider Configuration information as logged non-admin user with Reach API rights",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9e38d84a-9420-496e-be0e-c80cd4d1f992"
							}
						}
					],
					"id": "5b81b5c1-8c47-443c-9827-4051abc38646",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ae718f48-afb1-4927-89e3-651a349115f0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f4a33bc3-0562-4003-bae1-c98df8d2c48f"
							}
						}
					],
					"id": "82dd4740-24b5-4f0d-a527-e93184f5c050",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "223b92d4-2fbf-4798-b234-15343bc540d1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ea534ef5-a8a7-4e1c-9feb-af3d8895b28d"
							}
						}
					],
					"id": "17751433-6d37-46a9-949c-ec76c78f796e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "10ef3ee6-d390-4e08-b070-ee93412415f7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "26ac8745-5955-46dd-8ff5-89b8864b40f3"
							}
						}
					],
					"id": "34b1132c-8fc0-4be9-94a7-bb095c459297",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Authentication-user;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "be792ffa-eda2-4cac-93e9-33149b47878d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "778c5102-a576-4d52-b087-247d51163297"
							}
						}
					],
					"id": "67e2d97f-0090-47f7-88f5-acd5f29a28c9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"Authentication-user;1;Administration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Authentication-user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4017c978-da02-4ac3-852a-a5ad009ab9f8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bdcc512b-e67b-4d04-aaf2-a7414b39dba7"
							}
						}
					],
					"id": "3283e177-cdac-4131-aaa6-ac40c2ed462b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2a70afe5-1cbf-4858-bfd9-ef0dda52541c"
							}
						}
					],
					"id": "9a008906-aaf6-4714-8aff-449af0b95b18",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "93a0cab5-295a-4b90-9cc6-cafaf4f50b73"
							}
						}
					],
					"id": "e54a26f6-dae9-4bfb-87af-d91cbe1c9cc3",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update WebSSO Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The WebSSO Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4aec394b-dfd9-4fbd-aa9f-221aa8d9a870"
							}
						}
					],
					"id": "d7694280-03f8-44b0-8c41-95090634d5ed",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": false,\r\n    \"is_forced\": false,\r\n    \"trusted_client_addresses\": [\"127.0.0.5\"],\r\n    \"blacklist_client_addresses\": [\"127.0.0.6\"],\r\n    \"login_header_attribute\": \"REMOTE_USER\",\r\n    \"pattern_matching_login\": null,\r\n    \"pattern_replace_login\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebSSO Provider Configuration information by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the WebSSO Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"login_header_attribute\": \"REMOTE_USER\",\r",
									"        \"pattern_matching_login\": null,\r",
									"        \"pattern_replace_login\": null\r",
									"    });\r",
									"    pm.expect(responseJson.trusted_client_addresses).to.include(\"127.0.0.5\");\r",
									"    pm.expect(responseJson.blacklist_client_addresses).to.include(\"127.0.0.6\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a1ebc61d-a839-4e88-a9f9-8d78a626a3dd"
							}
						}
					],
					"id": "6f852c65-849a-43bb-ae6e-9d2bfa212a77",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/web-sso",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"web-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a6257b7c-b2e9-4511-96b4-59bf64dbfd5a"
							}
						}
					],
					"id": "fed85dd8-fd04-4ca8-9ef9-91eb9d812be8",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "bf12d6dc-0161-4927-a936-eeecb240593c"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}} ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "9693a60d-674e-43c5-91d0-a0398106f2b6"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "e36f63ba-ed6c-4f32-888d-40cdf6420463"
			}
		}
	]
}