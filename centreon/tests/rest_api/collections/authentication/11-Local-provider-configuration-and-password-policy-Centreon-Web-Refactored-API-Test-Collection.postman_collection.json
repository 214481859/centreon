{
	"info": {
		"_postman_id": "55545d7a-eea4-4f69-acba-4273aa202535",
		"name": "11 - Local provider configuration and password policy - Centreon Web Refactored API Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-55545d7a-eea4-4f69-acba-4273aa202535"
	},
	"item": [
		{
			"name": "1101 - Getting the default password policy of a Centreon instance",
			"item": [
				{
					"name": "[1101] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1101-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "163869eb-c1f1-4dab-8291-2037a02f368b"
							}
						}
					],
					"id": "586ccb58-f638-4a1d-8fad-7f6a73c11b13",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1101] Getting the default password policy of a Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1101-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The password policy of the instance has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The displayed password policy is the default one.\", function () {\r",
									"    pm.expect(responseJson.password_security_policy.password_min_length).to.eql(12);\r",
									"    pm.expect(responseJson.password_security_policy.has_uppercase).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_lowercase).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_number).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_special_character).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.attempts).to.eql(5);\r",
									"    pm.expect(responseJson.password_security_policy.blocking_duration).to.eql(900);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.expiration_delay).to.eql(15552000);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.excluded_users.length).to.eql(1);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.excluded_users[0]).to.eql(\"centreon-gorgone\");\r",
									"    pm.expect(responseJson.password_security_policy.can_reuse_passwords).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.delay_before_new_password).to.eql(3600);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7a18f9e0-2580-4dbd-a382-d9e3113ebfce"
							}
						}
					],
					"id": "ec97ec2c-2bd1-4135-b967-4cc4304060e6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1101-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9867b9e2-913f-4376-beb2-d31392e321a6"
							}
						}
					],
					"id": "6f82f680-7cd7-4dd7-bb74-7b5c8bf1b4e1",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "12eaaf59-b491-4a8a-8a85-0a19d95bc60d"
		},
		{
			"name": "1102 - Updating the password policy with new parameters",
			"item": [
				{
					"name": "[1102] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1102-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "24630000-0cdf-42d4-abe3-9d626d542db7"
							}
						}
					],
					"id": "e5412bc7-33c4-499b-9728-62ad7d1f9699",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1102] Updating the password policy of a Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[1102-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The password policy of the instance has been successfully updated.\", function () {\r",
									"    const expectedResponseCode = 204\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e85340f4-c8bf-4fd3-b9bf-9b31d47e61ec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c0e9464d-a665-4d96-a986-11b85c732e09"
							}
						}
					],
					"id": "ecfcc485-fb1e-4442-a29b-3681fe5db6ec",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 8,\r\n        \"has_uppercase\": false,\r\n        \"has_lowercase\": false,\r\n        \"has_number\": false,\r\n        \"has_special_character\": false,\r\n        \"attempts\": 7,\r\n        \"blocking_duration\": 500,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 15552005,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\",\r\n                \"admin\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": true,\r\n        \"delay_before_new_password\": 5400\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1102] Getting the new password policy of the Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1102-cleanup] Bringing back the password policy of a Centreon instance to defaults\"\r",
									"\r",
									"pm.test(\"The password policy of the instance has been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The featured password policy corresponds to the update of the previous request.\", function () {\r",
									"    pm.expect(responseJson.password_security_policy.password_min_length).to.eql(8);\r",
									"    pm.expect(responseJson.password_security_policy.has_uppercase).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.has_lowercase).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.has_number).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.has_special_character).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.attempts).to.eql(7);\r",
									"    pm.expect(responseJson.password_security_policy.blocking_duration).to.eql(500);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.expiration_delay).to.eql(15552005);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.excluded_users.includes('admin')).to.be.true;\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.excluded_users.includes('centreon-gorgone')).to.be.true;\r",
									"    pm.expect(responseJson.password_security_policy.can_reuse_passwords).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.delay_before_new_password).to.eql(5400);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "85139104-34b9-45af-9256-d28b0033a63a"
							}
						}
					],
					"id": "82233d65-217e-4c2f-8c75-40b50b69d861",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1102-cleanup] Bringing back the password policy of a Centreon instance to defaults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The password policy of the instance has been brought back to defaults.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8073fe2c-5322-4a0e-9907-bf9e14261971"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0527a316-d78c-494f-8b5c-51ddb98cd8a2"
							}
						}
					],
					"id": "39a2c487-55d4-4682-bc92-095ae2b36078",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 12,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 5,\r\n        \"blocking_duration\": 900,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 15552000,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": false,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1102-cleanup] Getting the default password policy of a Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The password policy of the instance has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"[Cleanup] The displayed password policy is the default one.\", function () {\r",
									"    pm.expect(responseJson.password_security_policy.password_min_length).to.eql(12);\r",
									"    pm.expect(responseJson.password_security_policy.has_uppercase).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_lowercase).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_number).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.has_special_character).to.eql(true);\r",
									"    pm.expect(responseJson.password_security_policy.attempts).to.eql(5);\r",
									"    pm.expect(responseJson.password_security_policy.blocking_duration).to.eql(900);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.expiration_delay).to.eql(15552000);\r",
									"    pm.expect(responseJson.password_security_policy.password_expiration.excluded_users[0]).to.eql(\"centreon-gorgone\");\r",
									"    pm.expect(responseJson.password_security_policy.can_reuse_passwords).to.eql(false);\r",
									"    pm.expect(responseJson.password_security_policy.delay_before_new_password).to.eql(3600);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7f0a9f9f-fb02-4a00-889c-eb99c1464f46"
							}
						}
					],
					"id": "3f47b30b-fea1-48fa-9130-4365500bedc9",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1102-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "dc23aea7-a4ad-4dd5-8ae7-c17797188b0d"
							}
						}
					],
					"id": "5b932e2d-c299-4350-a338-0e21fd3b09b4",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "fffe2f33-630f-43ed-8320-861fb6555604"
		},
		{
			"name": "1103 - Trying to update numerical values of the password policy with lower-than-minimum values",
			"item": [
				{
					"name": "[1103] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8279daed-2b4f-4652-b2d7-1261b4ca58c7"
							}
						}
					],
					"id": "b45eaae2-cdad-4417-97d0-2b3ee2222557",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1103] Updating the password policy of a Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[1103-DEBUG] Bringing back the password policy of a Centreon instance to defaults\"\r",
									"\r",
									"pm.test(\"The password policy of the instance has not been successfully updated.\", function () {\r",
									"    const expectedResponseCode = 500\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    postman.setNextRequest(\"[1103-cleanup] Logout from admin user and clear collection variables\");\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The reason for it is the numerical values of the new policy, which are under the minimum.\", function () {\r",
									"    pm.expect(responseJson.message).to.include(\"[password_security_policy.password_min_length] Must have a minimum value of 8\");\r",
									"    pm.expect(responseJson.message).to.include(\"[password_security_policy.attempts] Must have a maximum value of 10\");\r",
									"    pm.expect(responseJson.message).to.include(\"[password_security_policy.blocking_duration] Must have a maximum value of 604800\");\r",
									"    pm.expect(responseJson.message).to.include(\"[password_security_policy.password_expiration.expiration_delay] Must have a minimum value of 604800\");\r",
									"    pm.expect(responseJson.message).to.include(\"[password_security_policy.delay_before_new_password] Must have a minimum value of 3600\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9d05dace-dd37-4bc7-8bff-d217f53d2051"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d5136fab-f621-4168-b92e-2017bba09abb"
							}
						}
					],
					"id": "e7ff6309-7bc1-45e1-8ebe-797cc237512a",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 5,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 11,\r\n        \"blocking_duration\": 605000,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 3600,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": false,\r\n        \"delay_before_new_password\": 1800\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1103-DEBUG] Bringing back the password policy of a Centreon instance to defaults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[DEBUG] The password policy of the instance has been brought back to defaults.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "44e90ea9-d456-4f02-83a0-81dc3904cca6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fc40d4a9-3c95-487d-8402-1b799f85e702"
							}
						}
					],
					"id": "593c011c-7a83-4015-8f3f-d303c593f532",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 12,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 5,\r\n        \"blocking_duration\": 900,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 15552000,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": false,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1103-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c2c71f24-b292-4345-a5c0-f8d1d9c9f903"
							}
						}
					],
					"id": "d01316d7-d2bb-462d-b861-25aa63418156",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "6104d9a9-e7b8-4e67-b3f3-7fa5af346c2e"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "366ba6dc-62df-47aa-9fe0-ceaf29ded0d9"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.setNextRequestBasedOnStatusCode = (pm, postman, response, expectedResponseCode, nextRequestInCaseOfFailure) => {",
					"    if(expectedResponseCode != response.code) {",
					"        if (!pm.collectionVariables.get(\"requestTries\")) {",
					"            pm.collectionVariables.set(\"requestTries\", 0);",
					"        }",
					"        pm.collectionVariables.set(\"requestTries\", pm.collectionVariables.get(\"requestTries\") + 1);",
					"        if(pm.collectionVariables.get(\"requestTries\") < pm.environment.get(\"maxNumberOfRetries\")) {",
					"            console.log(\"Response does not have the expected status code | Resending the request \\\"\" + pm.info.requestName + \"\\\"... | Number of tries: \" + pm.collectionVariables.get(\"requestTries\"));",
					"            postman.setNextRequest(pm.info.requestName);",
					"        } else {",
					"            pm.collectionVariables.unset(\"requestTries\");",
					"            pm.collectionVariables.unset(\"nextRequestInCaseOfFailure\");",
					"            console.log(\"Response does not have the expected status code | Aborting the current scenario (too many tries)\");",
					"            postman.setNextRequest(nextRequestInCaseOfFailure);",
					"        }",
					"    } else {",
					"        console.log(\"Response has the expected status code \" + pm.response.code + \" | Running the next tests\")",
					"    }",
					"  }"
				],
				"id": "7ffb481c-588e-4d87-be86-6bf8151993bc"
			}
		}
	]
}