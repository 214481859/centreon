{
	"info": {
		"_postman_id": "a9f18438-b5d5-442b-b340-e7cc80d3967b",
		"name": "01 - Tokens",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-a9f18438-b5d5-442b-b340-e7cc80d3967b"
	},
	"item": [
		{
			"name": "0101 - Log in as Admin",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58e1d086-076b-4607-98bf-93482d5724f4",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log('test commit')\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4e0a05cd-dbb4-483b-9580-03e3ace93682",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"id": "3d7bca86-ea9b-4af2-baac-ae345cc85b3f"
		},
		{
			"name": "0102 - user_with_menu_action",
			"item": [
				{
					"name": "Add user_with_menu_action (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2a52022a-d0a3-4250-b392-59de8dd59e38"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_menu_action\", \"user_with_menu_action\");\r",
									"pm.collectionVariables.set(\"api_password_user_menu_action\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "d004ce59-18f9-45b9-83dc-d2f7d2429768"
							}
						}
					],
					"id": "74f8e3d6-d295-4890-98a0-af8f35f5ebb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu_action}};{{api_login_user_menu_action}};{{api_login_user_menu_action}}@localhost;{{api_password_user_menu_action}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7205c10b-4f06-42b4-b0fc-6ef593eea373"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "191f73cf-cd33-404d-ad9b-3966bfd2aab3"
							}
						}
					],
					"id": "663475d8-2634-4261-b04d-05de72769efb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu_action}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e025465c-2474-467a-9202-e6d97baca376"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c0c30b5a-da83-4bd7-9ff8-d245211e9c55"
							}
						}
					],
					"id": "132fd918-3172-41a7-9825-5e6ffb1374fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu_action}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7a599d22-9201-4d53-a2c6-d5adc607ab32"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a15b8006-ced5-4e3a-bf67-465d35da6020"
							}
						}
					],
					"id": "56cb1b6a-7627-4668-9b15-6d11780ca893",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_Action_TOKEN;Menu_Action_TOKEN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1713234f-a68f-4f6b-abef-1931c03c44ea"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d4bef0cc-6d8b-41bc-bd77-932816ac4388"
							}
						}
					],
					"id": "1ada1515-16de-4cd9-98c7-1dd9b5c95e54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_Action_TOKEN;{{api_login_user_menu_action}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c0f8620f-f595-42f0-be27-aa482fcf21da"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d0477dd5-b32a-446d-a300-46f2cfaa8e98"
							}
						}
					],
					"id": "1ec08960-2a49-46fc-87e9-d134e1cf08dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_Action_TOKEN;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu TOKENS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "baa37018-48ce-43b2-a4b7-4bd4ac8c562b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7d5cff19-01b1-45b9-a0e6-a06528e9493c"
							}
						}
					],
					"id": "e2aab491-ad80-460e-aa65-d503fd9af53f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"TOKENS;TOKENS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right TOKENS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4df2971e-7689-4c5e-bd7d-51ad19417a6e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1d94052e-218f-420e-941d-a2ed6d1d011c"
							}
						}
					],
					"id": "2596602e-01c9-4d6c-91a4-b27c08df2840",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"TOKENS;1;Administration;API Tokens\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Menu_Action_TOKEN to TOKENS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e746cbe-4970-4c0b-a4b2-2b2f78202862"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9ba3696c-3008-451f-99ce-c97eaab65db6"
							}
						}
					],
					"id": "3a1b45cb-3c0f-458b-a70e-92c7958862de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_Action_TOKEN;TOKENS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Action Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aea33b72-be8d-415d-816c-d0b838e059db"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b79fd379-2eb4-4d49-b252-c92d219d2825"
							}
						}
					],
					"id": "a9113e90-e00c-4e1b-9111-0e065963f109",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLACTION\",\r\n  \"values\": \"Menu_Action_TOKEN;Menu_Action_TOKEN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant manage token action in Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d901a1b-4619-4549-a7d9-3e63d6766035"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "21f7b5e6-0b7e-45b5-9e75-e1faf0c268e3"
							}
						}
					],
					"id": "a69d1c28-2c76-4db3-80b3-f861427005e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grant\",\r\n  \"object\": \"ACLACTION\",\r\n\"values\": \"Menu_Action_TOKEN;manage_tokens\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Menu_Action_TOKEN to Menu_Action_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a0dd585-deec-4d26-9efe-ca90212872b9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0ecf2fe2-7253-422b-8e90-7dd852f4d489"
							}
						}
					],
					"id": "1eccfc00-8e48-4f23-a198-5383b9554494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addaction\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_Action_TOKEN;Menu_Action_TOKEN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "2a5b64ae-7192-4b84-a5ec-7af780dbbc52"
		},
		{
			"name": "0103 - user_with_menu",
			"item": [
				{
					"name": "Add user_with_menu (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_menu\", \"user_with_menu\");\r",
									"pm.collectionVariables.set(\"api_password_user_menu\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "1a8fb7a2-e9a8-4b02-837c-5021f26e17f2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "11646158-f613-435d-ac8a-5cb9143643e1"
							}
						}
					],
					"id": "06f267f1-c69b-4363-9114-56afa25726ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu}};{{api_login_user_menu}};{{api_login_user_menu}}@localhost;{{api_password_user_menu}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1b8c596d-b598-49de-9841-a44497c56742"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a0e2b773-dfef-4618-a748-b173a171ceb1"
							}
						}
					],
					"id": "3dccb24a-f211-4595-b089-688e220ed5bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2b424b57-bb9a-4e72-a98c-f2da62209027"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e051285a-0c4f-47b4-b3d9-7f41a8a48dd6"
							}
						}
					],
					"id": "1d7e5d34-e4cb-4286-88ed-cabc42562c9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_menu}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Menu_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e1f1d4d1-e1cc-47e0-b216-752c70e601cc"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4235d7c1-7aa0-4772-9e64-6aae425bf086"
							}
						}
					],
					"id": "97ae7fde-78cf-462b-b4db-eb3cfd319a22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_TOKEN;Menu_TOKEN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Menu_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3525fe50-03ab-4abc-9870-3821abf635f8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1a471893-f671-42c4-a043-baca001f318d"
							}
						}
					],
					"id": "8bd7e55a-5cbd-4299-a2e8-576318c95ade",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_TOKEN;{{api_login_user_menu}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Menu_TOKEN (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "99c88991-d3fa-4150-9418-8b778c078f9a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5eb1e7fe-49d0-43bf-b242-ef9d1e8fee4b"
							}
						}
					],
					"id": "d653e687-41c0-4616-9cec-b3644e13d02c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_TOKEN;All Resources\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Menu_Action_TOKEN to TOKENS (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2e782cab-1735-486d-b61e-baac3cca7b9f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "057ab03a-44e8-48cb-aee3-754c7e0fe206"
							}
						}
					],
					"id": "a7905e1a-bc01-46b4-a18f-53b2348b582a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Menu_TOKEN;TOKENS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "7fba79a4-a52e-486f-82f0-f5f706132069"
		},
		{
			"name": "0104 - user_no_access",
			"item": [
				{
					"name": "Add user_no_access_Token (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6fc36ded-4016-4b0e-8337-de20e9defbef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_no_access_Token\", \"user_no_access_Token\");\r",
									"pm.collectionVariables.set(\"api_password_user_no_access_Token\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "b51d3abd-487d-47e0-b392-e6a58e85342a"
							}
						}
					],
					"id": "2fc18865-0379-4d39-9fa2-6d8c31aa8fca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_no_access_Token}};{{api_login_user_no_access_Token}};{{api_login_user_no_access_Token}}@localhost;{{api_password_user_no_access_Token}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "413a122b-4a8b-48ef-9d0c-1bebff1c1789"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "87e06c93-52cb-4f97-aadc-d7301c656c98"
							}
						}
					],
					"id": "bccc1399-625c-47b1-adbc-07919cd775a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_no_access_Token}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5cec76b8-b60b-45ac-861c-423a7f39fef1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "aa6ce460-7633-4454-a0bb-b8421b071b03"
							}
						}
					],
					"id": "46332e0d-f69f-4317-8fef-e9e8584920b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_no_access_Token}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group no_access (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d12521f6-b098-47af-95be-66c32c90c115"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "96a98a72-30a9-4d93-aab2-af618e64a4b4"
							}
						}
					],
					"id": "d1837ea2-f829-44f6-8dfc-e6cd50b0cf6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"no_access_Token;no_access_Token\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to no_access (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "309cf2a0-b543-4003-9abc-3bad028b536a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2a29a90e-6697-4040-9f3e-a9506d410c74"
							}
						}
					],
					"id": "d94f5efc-0ebd-4356-a83e-df41bc27d658",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"no_access_Token;{{api_login_user_no_access_Token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to no_access (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6c17245d-0796-4c7f-84a2-11b5611ac407"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a6602681-3d2f-4be0-be85-4eaa63447d0f"
							}
						}
					],
					"id": "c3684f34-96f1-4225-a36b-b168735cabd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"no_access_Token;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu no_access (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c8ee38ab-c5d8-4325-a14d-83615faba1a4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "62e39746-69df-41e4-80d8-9b3797712487"
							}
						}
					],
					"id": "5fbad5ca-fd56-4a75-b0d9-024ba07c023f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"no_access_Token;no_access_Token\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link no_access to no_access (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a06165f5-578b-47f4-92ad-607d6f4a0f7f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8a99aa3e-8ef3-42e2-a7da-d6185cc7373a"
							}
						}
					],
					"id": "8b6785eb-ed30-4071-9b63-ffd1f192ed40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"no_access_Token;no_access_Token\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "f31369b2-02a4-4897-99f4-48bd6d0febad"
		},
		{
			"name": "0105 - By Admin",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1d562ab7-7853-4e5e-984c-2f2936d5bff6"
							}
						}
					],
					"id": "0078b3b3-db96-440a-836d-7785d1a7147d",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve users ID (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"for(let i=0; i < responseJson.result.length; i++){\r",
									"    if(responseJson.result[i].alias === \"admin\"){\r",
									"        pm.collectionVariables.set(\"Admin_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_with_menu_action\"){\r",
									"        pm.collectionVariables.set(\"User_Menu_Action_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_with_menu\"){\r",
									"        pm.collectionVariables.set(\"User_Menu_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_no_access_Token\"){\r",
									"        pm.collectionVariables.set(\"User_no_access_Id\", responseJson.result[i].id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "2cd7ccab-1bc6-4c6a-8435-bf85cafba927"
							}
						}
					],
					"id": "855c6aba-c416-40e2-bf91-f9dd94d92c43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACT\"\r\n} "
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve users Name (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"for(let i=0; i < responseJson.result.length; i++){\r",
									"    if(responseJson.result[i].alias === \"admin\"){\r",
									"        pm.collectionVariables.set(\"Admin_Name\", responseJson.result[i].name);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_with_menu_action\"){\r",
									"        pm.collectionVariables.set(\"User_Menu_Action_Name\", responseJson.result[i].name);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_with_menu\"){\r",
									"        pm.collectionVariables.set(\"User_Menu_Name\", responseJson.result[i].name);\r",
									"    }\r",
									"    if(responseJson.result[i].name === \"user_no_access_Token\"){\r",
									"        pm.collectionVariables.set(\"User_no_access_Name\", responseJson.result[i].name);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "5c62347c-a75d-44f2-86f1-1b333e6d490c"
							}
						}
					],
					"id": "f39c9af5-2e93-456d-9575-e9423d40976b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACT\"\r\n} "
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token by admin for admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token1Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token1Name\"),\r",
									"        \"expiration_date\": \"2025-12-31T00:00:00+01:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Admin_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Admin_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Admin_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Admin_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "4b87e80a-8c42-4b65-b946-6d00d1ce92e8"
							}
						}
					],
					"id": "e0f742e1-b6af-493f-b115-27fb10a5abbe",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-first-token-by-admin-for-admin\",\r\n  \"user_id\": {{Admin_Id}},\r\n  \"expiration_date\": \"2025-12-31T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after first token creation (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:pm.collectionVariables.get(\"Token1Name\")}).\r",
									"            and.to.include({expiration_date:\"2025-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "70b9c516-4811-46ad-b17b-9273576c7a03"
							}
						}
					],
					"id": "8bcc4617-8422-45bc-9795-144d0443e73c",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token by admin for User_Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token2Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token2Name\"),\r",
									"        \"expiration_date\": \"2099-12-31T00:00:00+01:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Admin_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Admin_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "fcda6f68-8144-46ba-83e1-4d1117974784"
							}
						}
					],
					"id": "a1dc9510-c8bf-43d5-9d06-ea8f6943df63",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-second-token-by-admin-for-user-with-menu\",\r\n  \"user_id\": {{User_Menu_Id}},\r\n  \"expiration_date\": \"2099-12-31T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after second token creation (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:pm.collectionVariables.get(\"Token1Name\")}).\r",
									"            and.to.include({expiration_date:\"2025-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({name:pm.collectionVariables.get(\"Token2Name\")}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[1].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "e132eeb5-a26f-4288-8e46-36bac2ae1144"
							}
						}
					],
					"id": "440f490d-64d9-4abe-9f80-1ea35ae5be6f",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token by admin for User_Menu_Action (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token3Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token3Name\"),\r",
									"        \"expiration_date\": \"2099-12-31T00:00:00+01:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Action_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Admin_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Admin_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "a27bfc06-7aad-476d-b5da-13ce3c8688d0"
							}
						}
					],
					"id": "ad788b11-95fc-4d08-9ac0-c214b89a9543",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-third-token-by-admin-for-user-with-menu-action\",\r\n  \"user_id\": {{User_Menu_Action_Id}},\r\n  \"expiration_date\": \"2099-12-31T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after third token creation (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:pm.collectionVariables.get(\"Token1Name\")}).\r",
									"            and.to.include({expiration_date:\"2025-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({name:pm.collectionVariables.get(\"Token2Name\")}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[1].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({name:pm.collectionVariables.get(\"Token3Name\")}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[2].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Action_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[2].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "c7b04f6c-4120-4889-a0f9-079cab5dea74"
							}
						}
					],
					"id": "c9b2633a-4570-4822-9600-4d297526cef9",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token with duplicated name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has not been created, because the name already exist.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\r",
									"        \"The token name '\" + pm.collectionVariables.get(\"Token3Name\") +\"' already exists\"\r",
									"    );\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "9dfbbd4b-bf3b-40de-904c-1cbd4592008e"
							}
						}
					],
					"id": "a4ad30b6-1367-4e37-b6e5-e8d9f2972e66",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-third-token-by-admin-for-user-with-menu-action\",\r\n  \"user_id\": {{User_Menu_Action_Id}},\r\n  \"expiration_date\": \"2099-12-31T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token without name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has not been created, because the name already exist.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"[NewToken::name] The string is empty, but non empty string was expected\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "cd27331c-328c-409d-b9bd-18191dce0624"
							}
						}
					],
					"id": "fd3f03b2-eca4-4b0c-bb41-dd1b750a5984",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"user_id\": {{Admin_Id}},\r\n  \"expiration_date\": \"2099-12-31T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete someone else token without complete endpoint (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token3Name\") + \"has not been deleted, because the endpoint is not complete.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"Token not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c7d7a9c6-1221-4982-83aa-7a5a8302c0d6"
							}
						}
					],
					"id": "a54494e4-d537-4593-ad77-4dd9eab71b36",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token3Name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token3Name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete someone else token with complete endpoint (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token3Name\") + \"has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token3Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "254c454d-529e-483b-aae4-133b23c2cb27"
							}
						}
					],
					"id": "7da1f221-d14b-4b28-af9f-1f55ba8e8bb0",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token3Name}}/users/{{User_Menu_Action_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token3Name}}",
								"users",
								"{{User_Menu_Action_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after deletion by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"my-first-token-by-admin-for-admin\"}).\r",
									"            and.to.include({expiration_date:\"2025-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"my-second-token-by-admin-for-user-with-menu\"}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[1].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "d143d50c-bd2d-450d-ae5a-2229998d8874"
							}
						}
					],
					"id": "c1d3bbbd-fd5d-4e92-aa17-c201deec614f",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5cb9abdc-4ddd-4e58-a938-fcc47a7b4215"
							}
						}
					],
					"id": "0b918915-62bf-4786-80e1-cfa07490205d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "af6299dd-0ef3-4dbc-b18d-b3ad6a94fda5"
		},
		{
			"name": "0106 - By User with Menu",
			"item": [
				{
					"name": "Login with user with menu (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_menu'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "231554f0-cf92-4793-8146-7b56e301cbd1"
							}
						}
					],
					"id": "2b51bc92-616c-49fb-87a8-205450bc1eeb",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_menu}}\",\r\n      \"password\": \"{{api_password_user_menu}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token by User_Menu for User_Menu (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token4Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token4Name\"),\r",
									"        \"expiration_date\": \"3051-06-02T00:00:00+02:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2f193538-11ab-4194-8a18-4b0ea63cb9ec"
							}
						}
					],
					"id": "bcff234a-617d-4198-82f6-1de28c82656f",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-third-token-by-user-menu-for-user-menu\",\r\n  \"user_id\": {{currentUserID}},\r\n  \"expiration_date\": \"3051-06-02T00:00:00+02:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token for someone else (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token has not been created because the user does not have the rights to manage token for others.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add tokens linked to user ID \" + pm.collectionVariables.get(\"User_no_access_Id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "eccd09ba-70c0-4207-9a62-bd2987e22c31"
							}
						}
					],
					"id": "e778eae4-bce9-4211-a3dc-1969a66218ff",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-third-token-by-user-menu-for-no_access\",\r\n  \"user_id\": {{User_no_access_Id}},\r\n  \"expiration_date\": \"3051-06-02T00:00:00+02:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after fourth token creation (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"my-second-token-by-admin-for-user-with-menu\"}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")})\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"my-third-token-by-user-menu-for-user-menu\"}).\r",
									"            and.to.include({expiration_date:\"3051-06-02T00:00:00+02:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].creator).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5ff77ebb-4e33-4e35-99e4-32428502ab83"
							}
						}
					],
					"id": "637db6dc-2c71-4b80-8bab-ba0e831b9abf",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of User_Menu token by User_Menu (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token4Name\") + \"has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token4Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0b08417f-a923-41a8-bfd8-ebae25d36920"
							}
						}
					],
					"id": "130cc81b-452a-439c-8980-fc30c5bbd4db",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token4Name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token4Name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion Admin token without manage tokens rights (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token has not been deleted because user doesn't has the necessary rights.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete tokens linked to user ID \" + pm.collectionVariables.get(\"Admin_Id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "f67bced1-64ea-4b76-872b-c1ca9ec58777"
							}
						}
					],
					"id": "d8003d9a-7952-4ee7-a4c9-a9135655e1d6",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token1Name}}/users/{{Admin_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token1Name}}",
								"users",
								"{{Admin_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after deletion by user with menu (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"my-second-token-by-admin-for-user-with-menu\"}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")})\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0f714e46-c5c0-44ba-acfc-b5edca543dd1"
							}
						}
					],
					"id": "51c71cc5-16e3-4bf9-bcca-dfbbc78b3c01",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with menu (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fd2c76b3-531e-4096-ace0-704d2ab2a6c0"
							}
						}
					],
					"id": "ecfc050f-2160-40ae-9d36-409c8eb36b90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "efa10af5-f4f7-4538-a1c6-3a5e26579a68"
		},
		{
			"name": "0107 - By User with No Access",
			"item": [
				{
					"name": "Login with user with no access (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_no_access_Token'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "739794f9-16ba-42cb-bc47-4e9b7070d905"
							}
						}
					],
					"id": "cccdb840-5fca-4dd4-93cd-58a86e3de3f9",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_no_access_Token}}\",\r\n      \"password\": \"{{api_password_user_no_access_Token}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token has not been created because user doesn't has the necessary rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add tokens\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "08551341-fc98-47ea-8eae-c5334087586f"
							}
						}
					],
					"id": "45b73a32-4acf-45e0-a3c6-d6394888f19d",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-third-token-by-mr-no_access-for-mr-no_access\",\r\n  \"user_id\": {{currentUserID}},\r\n  \"expiration_date\": \"3051-06-02T00:00:00+02:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token has not been listed because user doesn't has the necessary rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to list the tokens\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "77d5db60-54b5-4606-8569-e7d6447c2804"
							}
						}
					],
					"id": "29d316ac-5e57-4d83-8398-b08c7e4e1373",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete token (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token has not been deleted because user doesn't has the necessary rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete tokens\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "18d764ef-53d9-46d9-9791-ed5356e06dec"
							}
						}
					],
					"id": "76d838fb-1ae6-4a58-9a52-20fc84f084de",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token2Name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token2Name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0a2b8107-2151-4b9b-9c69-f001f7071d0b"
							}
						}
					],
					"id": "ed50558f-8df5-488d-8107-122217a66f89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "7deeccbe-ac0c-49f9-b97a-0081ed3ab339"
		},
		{
			"name": "0108 - By User with Menu & Action",
			"item": [
				{
					"name": "Login with user with menu & action (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_menu_action'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "007680ca-cddf-4da9-be30-1c3d8ad52dd3"
							}
						}
					],
					"id": "395dcf2f-41e1-452a-9116-387f34340e79",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_menu_action}}\",\r\n      \"password\": \"{{api_password_user_menu_action}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a token by User_Menu_Action for User_Menu_Action (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token5Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token5Name\"),\r",
									"        \"expiration_date\": \"2024-08-27T00:00:00+02:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Action_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Action_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "09d96b8a-6888-40d5-982f-b7e11dd292ee"
							}
						}
					],
					"id": "121150b4-c466-4010-982b-69b6daf52814",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-fourth-token-by-user-menu-action-for-user-menu-action\",\r\n  \"user_id\": {{currentUserID}},\r\n  \"expiration_date\": \"2024-08-27T00:00:00+02:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a token with a date in the past (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The token can't be created with an expiration date in the past.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    var moment = require('moment');\r",
									"    pm.variables.set('currentdate', moment.utc().format((\"YYYY-MM-DD\")));\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.message).to.include(\"[NewToken::expirationDate] The date \\\"1998-12-02T00:00:00+01:00\\\" was expected to be at most \" + pm.variables.get(\"currentdate\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "f1a54c0d-8085-4bdb-8021-a6ae51538fd8"
							}
						}
					],
					"id": "7964bcf5-4dfa-4505-b203-652eac3f67b8",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-sixth-token-by-user-menu-action-for-admin\",\r\n  \"user_id\": {{Admin_Id}},\r\n  \"expiration_date\": \"1998-12-02T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a token by User_Menu_Action for Admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the name of the new token\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"Token6Name\", response.name);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"name\":pm.collectionVariables.get(\"Token6Name\"),\r",
									"        \"expiration_date\": \"9999-12-02T00:00:00+01:00\",\r",
									"        \"is_revoked\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(response.user).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"Admin_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"Admin_Name\")\r",
									"    });\r",
									"\r",
									"    pm.expect(response.creator).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\")),\r",
									"        \"name\": pm.collectionVariables.get(\"User_Menu_Action_Name\")\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "7d7113f3-ae3b-470f-8165-7f3e6f2d9c48"
							}
						}
					],
					"id": "7c3127cf-ceb5-41b0-b054-00462d9db186",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"my-fifth-token-by-user-menu-action-for-admin\",\r\n  \"user_id\": {{Admin_Id}},\r\n  \"expiration_date\": \"9999-12-02T00:00:00+01:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tokens after sixth token creation (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of token has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The tokens retrieved are listed with expected informations\", function() {\r",
									"    // Check the number of tokens (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each token\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"my-fifth-token-by-user-menu-action-for-admin\"}).\r",
									"            and.to.include({expiration_date:\"9999-12-02T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[0].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[0].creator).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Action_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"my-first-token-by-admin-for-admin\"}).\r",
									"            and.to.include({expiration_date:\"2025-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[1].user).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[1].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"my-fourth-token-by-user-menu-action-for-user-menu-action\"}).\r",
									"            and.to.include({expiration_date:\"2024-08-27T00:00:00+02:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"    \r",
									"    pm.expect(responseJson.result[2].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Action_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[2].creator).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Action_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Action_Name\")});\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"my-second-token-by-admin-for-user-with-menu\"}).\r",
									"            and.to.include({expiration_date:\"2099-12-31T00:00:00+01:00\"}).\r",
									"            and.to.include({is_revoked:false});\r",
									"\r",
									"    pm.expect(responseJson.result[3].user).to.include({id:parseInt(pm.collectionVariables.get(\"User_Menu_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"User_Menu_Name\")});\r",
									"    \r",
									"    pm.expect(responseJson.result[3].creator).to.include({id:parseInt(pm.collectionVariables.get(\"Admin_Id\"))}).\r",
									"            and.to.include({name:pm.collectionVariables.get(\"Admin_Name\")});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ab55ad9f-f5c4-4b03-abbd-f083865fa793"
							}
						}
					],
					"id": "f36c21fe-711f-43e4-ab06-fa226ad6b96c",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens?sort_by={\"token_name\":\"ASC\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{\"token_name\":\"ASC\"}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete my token 5 (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token5Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token5Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c95d8067-9c75-48de-9e24-88ee5cabb04b"
							}
						}
					],
					"id": "4d0c79b0-2205-4d09-b918-6a63c51b226e",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token5Name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token5Name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the token 1 of someone else (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token1Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token1Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "753bac00-f5d0-408e-9a07-53ecf448e8a1"
							}
						}
					],
					"id": "0d491565-3413-4287-9503-6117b6fd667f",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token1Name}}/users/{{Admin_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token1Name}}",
								"users",
								"{{Admin_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the token 2 of someone else (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token2Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token2Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0250ad21-c8a1-40e7-8234-9087615dc42b"
							}
						}
					],
					"id": "dfd4c106-f26f-4545-a437-eb790097cbe5",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token2Name}}/users/{{User_Menu_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token2Name}}",
								"users",
								"{{User_Menu_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the token 6 of someone else (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The token with name '\" + pm.collectionVariables.get(\"Token6Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Token6Name\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1220ab91-f1b0-4a74-9eb4-08a3e17d2d94"
							}
						}
					],
					"id": "57ef658b-0990-469a-8862-182128da2f7a",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/tokens/{{Token6Name}}/users/{{Admin_Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"tokens",
								"{{Token6Name}}",
								"users",
								"{{Admin_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with menu & action (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "84f4d6ff-0c35-453e-95cd-e1d9aded3688"
							}
						}
					],
					"id": "f1131201-40c4-4a23-955e-ce1957ecfa75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "3133f657-0db2-4d05-b96b-be06595fceff"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "cdcda0cb-1892-4f99-8af2-ee43a6572c60"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "e834dc9d-4f03-49df-91b1-73c65fc25227"
			}
		}
	]
}