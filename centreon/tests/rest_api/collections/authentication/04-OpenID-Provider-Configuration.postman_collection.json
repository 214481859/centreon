{
	"info": {
		"_postman_id": "faf04176-31e6-4d20-ba9b-5f2d05759690",
		"name": "04 - OpenID Provider Configuration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-faf04176-31e6-4d20-ba9b-5f2d05759690"
	},
	"item": [
		{
			"name": "0401 - Update and retrieve OpenId Provider Configuration",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "98fc30bd-5982-4e75-9d1e-9cd30b6a471e"
							}
						}
					],
					"id": "6fc31208-a9ac-4c76-a43a-03803ac7e345",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a contact template (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new contact template has been created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "184fe8bf-0f1e-4195-8ea5-ea59ee07f43f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "35e17269-37e0-4b3a-9126-37d7e7df99c5"
							}
						}
					],
					"id": "ca5c83bd-b67c-45da-856e-cac881f52454",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACTTPL\",\r\n  \"values\": \"contact_template_1;contact_template_1;contact_template@localhost;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Contact template ID (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The contact template is successfully displayed.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.collectionVariables.set(\"ContactTemplateId\", responseJson.result[0].id);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "313b1700-d091-41ae-9660-467d54bf197e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5814cdeb-0caa-45be-bfc5-c0d6c1c21fae"
							}
						}
					],
					"id": "088870e9-59f9-4ce6-8801-7a48e1c2f5d5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"CONTACTTPL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve default OpenId Provider Configuration information (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": null,\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "973730fa-c7f7-4837-98d6-c9325246da79"
							}
						}
					],
					"id": "ac8ff2cd-49fa-4d5a-b9b2-a27ca0c7e13d",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b7e5b2db-6fa6-49eb-bb7e-5424bc8aca62"
							}
						}
					],
					"id": "63bdbf53-444a-4493-b686-f06817d01982",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\"127.0.0.1\"],\r\n        \"blacklist_client_addresses\": [\"10.0.0.1\", \"10.0.0.2\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"user_information_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r\n        },\r\n        \"apply_only_first_role\": true,\r\n        \"relations\": [{\r\n            \"claim_value\": \"status1\",\r\n            \"priority\": 1,\r\n            \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"is_active\": true,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": \"https://localhost:8080\",\r",
									"        \"authorization_endpoint\": \"/authorize\",\r",
									"        \"token_endpoint\": \"/token\",\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": \"/userinfo\",\r",
									"        \"endsession_endpoint\": \"/logout\",\r",
									"        \"login_claim\": \"given_name\",\r",
									"        \"client_id\": \"user2\",\r",
									"        \"client_secret\": \"Centreon!2021\",\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": false,\r",
									"        \"auto_import\": true,\r",
									"        \"email_bind_attribute\": \"email\",\r",
									"        \"fullname_bind_attribute\": \"given_name\",\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"    pm.expect(responseJson.connection_scopes).to.include(\"openid\", \"offline_access\");\r",
									"    pm.expect(responseJson.contact_template).to.include({\r",
									"        \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"        \"name\": \"contact_template\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping).to.include({\r",
									"        \"is_enabled\": false,\r",
									"        \"apply_only_first_role\": true,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.endpoint).to.include({\r",
									"        \"type\": \"user_information_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.relations[0]).to.include({\r",
									"        \"claim_value\": \"status1\",\r",
									"        \"priority\": 1,\r",
									"    });\r",
									"    pm.expect(responseJson.roles_mapping.relations[0].access_group).to.include({\r",
									"        \"id\": 1,\r",
									"        \"name\": \"ALL\"\r",
									"    });\r",
									"    pm.expect(responseJson.authentication_conditions).to.include({\r",
									"        \"is_enabled\": true,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.authentication_conditions.endpoint).to.include({\r",
									"        \"type\": \"custom_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r",
									"    });    \r",
									"    pm.expect(responseJson.authentication_conditions.authorized_values).to.include(\"status2\");\r",
									"    pm.expect(responseJson.authentication_conditions.trusted_client_addresses).to.include(\"127.0.0.1\");\r",
									"    pm.expect(responseJson.authentication_conditions.blacklist_client_addresses).to.include(\"10.0.0.1\", \"10.0.0.2\");\r",
									"    pm.expect(responseJson.groups_mapping).to.include({\r",
									"        \"is_enabled\": false,\r",
									"        \"attribute_path\": \"users.roles.info.status\"\r",
									"    });\r",
									"    pm.expect(responseJson.groups_mapping.endpoint).to.include({\r",
									"        \"type\": \"introspection_endpoint\",\r",
									"        \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r",
									"    });\r",
									"    pm.expect(responseJson.groups_mapping.relations).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "032c0b91-281c-4eb5-84cf-ef979cf1eeab"
							}
						}
					],
					"id": "5ca62c96-d182-4bae-9cd3-b22961aa306f",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by admin (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e5ec4289-b30c-4eb9-98cf-2ca1c8053ebf"
							}
						}
					],
					"id": "56d41d38-b6fd-49e7-bcaf-0571327d8854",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": false,\r\n    \"is_forced\": false,\r\n    \"base_url\": null,\r\n    \"authorization_endpoint\": null,\r\n    \"token_endpoint\": null,\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": null,\r\n    \"endsession_endpoint\": null,\r\n    \"connection_scopes\": [],\r\n    \"login_claim\": null,\r\n    \"client_id\": null,\r\n    \"client_secret\": null,\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": true,\r\n    \"auto_import\": false,\r\n    \"email_bind_attribute\": null,\r\n    \"fullname_bind_attribute\": null,\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"authorized_values\": [],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by PATCH(successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": {\r",
									"            \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"            \"name\": \"contact_template\"\r",
									"        },\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"user_information_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"            },\r",
									"            \"relations\": [{\r",
									"                \"claim_value\": \"status1\",\r",
									"                \"access_group\": {\r",
									"                    \"id\": 1,\r",
									"                    \"name\": \"ALL\"\r",
									"                },\r",
									"                \"priority\": 1\r",
									"            }]\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3bdbf6bd-33a3-404e-aad9-cf5dd75a1ffe"
							}
						}
					],
					"id": "2c095772-8ed2-463e-a45a-73e88d734611",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				}
			],
			"id": "cd4ac7d0-908d-4e68-bf85-a126106eac5e"
		},
		{
			"name": "0402 - Update OpenId Provider Configuration with invalid information",
			"item": [
				{
					"name": "PUT required property missing (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's missing properties.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] The property is_active is required\\n[is_forced] The property is_forced is required\\n[base_url] The property base_url is required\\n[authorization_endpoint] The property authorization_endpoint is required\\n[token_endpoint] The property token_endpoint is required\\n[introspection_token_endpoint] The property introspection_token_endpoint is required\\n[userinfo_endpoint] The property userinfo_endpoint is required\\n[endsession_endpoint] The property endsession_endpoint is required\\n[connection_scopes] The property connection_scopes is required\\n[login_claim] The property login_claim is required\\n[client_id] The property client_id is required\\n[client_secret] The property client_secret is required\\n[authentication_type] The property authentication_type is required\\n[verify_peer] The property verify_peer is required\\n[auto_import] The property auto_import is required\\n[contact_template] The property contact_template is required\\n[email_bind_attribute] The property email_bind_attribute is required\\n[fullname_bind_attribute] The property fullname_bind_attribute is required\\n[authentication_conditions] The property authentication_conditions is required\\n[groups_mapping] The property groups_mapping is required\\n[roles_mapping] The property roles_mapping is required\\n[redirect_url] The property redirect_url is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "67d71601-fb43-4456-b1c5-e3f587ffffe0"
							}
						}
					],
					"id": "0cbe9aa8-7511-45f9-b4bd-e9bc24458f45",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value type passed to a property (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] Integer value found, but a boolean is required\\n[is_forced] String value found, but a boolean is required\\n[base_url] Boolean value found, but a string or a null is required\\n[authorization_endpoint] Integer value found, but a string or a null is required\\n[token_endpoint] Integer value found, but a string or a null is required\\n[introspection_token_endpoint] Integer value found, but a string or a null is required\\n[userinfo_endpoint] Boolean value found, but a string or a null is required\\n[endsession_endpoint] Boolean value found, but a string or a null is required\\n[connection_scopes[0]] Boolean value found, but a string is required\\n[connection_scopes[1]] Integer value found, but a string is required\\n[login_claim] Integer value found, but a string or a null is required\\n[client_id] Boolean value found, but a string or a null is required\\n[client_secret] Integer value found, but a string or a null is required\\n[authentication_type] Does not have a value in the enumeration [\\\"client_secret_post\\\",\\\"client_secret_basic\\\"]\\n[verify_peer] String value found, but a boolean is required\\n[auto_import] String value found, but a boolean is required\\n[contact_template.id] String value found, but a number is required\\n[contact_template.name] Integer value found, but a string is required\\n[email_bind_attribute] Integer value found, but a string or a null is required\\n[fullname_bind_attribute] Integer value found, but a string or a null is required\\n[authentication_conditions.is_enabled] String value found, but a boolean is required\\n[authentication_conditions.attribute_path] Boolean value found, but a string is required\\n[authentication_conditions.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[authentication_conditions.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[authentication_conditions.authorized_values[0]] Boolean value found, but a string is required\\n[authentication_conditions.trusted_client_addresses[0]] Integer value found, but a string is required\\n[authentication_conditions.blacklist_client_addresses[0]] Integer value found, but a string is required\\n[groups_mapping.is_enabled] String value found, but a boolean is required\\n[groups_mapping.attribute_path] Integer value found, but a string is required\\n[groups_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[groups_mapping.endpoint.custom_endpoint] Boolean value found, but a string or a null is required\\n[groups_mapping.relations[0]] String value found, but an object is required\\n[roles_mapping.is_enabled] Integer value found, but a boolean is required\\n[roles_mapping.apply_only_first_role] String value found, but a boolean is required\\n[roles_mapping.attribute_path] Integer value found, but a string or a null is required\\n[roles_mapping.endpoint.type] Integer value found, but a string is required\\n[roles_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[roles_mapping.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[roles_mapping.relations[0].claim_value] Integer value found, but a string is required\\n[roles_mapping.relations[0].access_group_id] String value found, but an integer is required\\n[roles_mapping.relations[0].priority] String value found, but an integer is required\\n[redirect_url] Integer value found, but a string or a null is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "490716d8-0fd6-43f1-b65b-859515f06cff"
							}
						}
					],
					"id": "9ab6e5a7-321c-46b5-9023-3e71d7635a6b",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"is_active\": 1,\r\n        \"is_forced\": \"false\",\r\n        \"base_url\": true,\r\n        \"authorization_endpoint\": 1,\r\n        \"token_endpoint\": 0,\r\n        \"introspection_token_endpoint\": 1,\r\n        \"userinfo_endpoint\": false,\r\n        \"endsession_endpoint\": true,\r\n        \"connection_scopes\": [true, 1],\r\n        \"login_claim\": 3,\r\n        \"client_id\": false,\r\n        \"client_secret\": 123,\r\n        \"authentication_type\": true,\r\n        \"verify_peer\": \"false\",\r\n        \"auto_import\": \"true\",\r\n        \"contact_template\": {\r\n          \"id\": \"19\",\r\n          \"name\": 1\r\n        },\r\n        \"email_bind_attribute\": 0,\r\n        \"fullname_bind_attribute\": 2,\r\n        \"authentication_conditions\": {\r\n            \"is_enabled\": \"true\",\r\n            \"attribute_path\": true,\r\n            \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": 2\r\n            },\r\n            \"authorized_values\": [true],\r\n            \"trusted_client_addresses\": [1],\r\n            \"blacklist_client_addresses\": [3]\r\n        },\r\n        \"roles_mapping\": {\r\n          \"is_enabled\": 0,\r\n          \"attribute_path\": 1,\r\n          \"endpoint\": {\r\n              \"type\": 3,\r\n              \"custom_endpoint\": 1\r\n          },\r\n          \"apply_only_first_role\": \"false\",\r\n          \"relations\": [{\r\n            \"claim_value\": 1,\r\n            \"priority\": \"1\",\r\n            \"access_group_id\": \"1\"\r\n          }]\r\n        },\r\n        \"groups_mapping\": {\r\n          \"is_enabled\": \"false\",\r\n          \"attribute_path\": 0,\r\n          \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": true\r\n          },\r\n          \"relations\": [\"coucou\"]\r\n        },\r\n        \"redirect_url\": 1\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value passed to \"trusted_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::trustedClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2fd72d76-8609-4e64-8390-97b0b0aff785"
							}
						}
					],
					"id": "9de718ff-a2b9-4493-b83d-fd238ebfc400",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\".@\"],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::blacklistClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "41aad2b6-afb6-42a1-8f49-63062ac38480"
							}
						}
					],
					"id": "f6058a51-56ea-4dd1-8689-57781d4bc913",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": [\".@\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value type passed to a property (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[is_active] Integer value found, but a boolean is required\\n[is_forced] String value found, but a boolean is required\\n[base_url] Boolean value found, but a string or a null is required\\n[authorization_endpoint] Integer value found, but a string or a null is required\\n[token_endpoint] Integer value found, but a string or a null is required\\n[introspection_token_endpoint] Integer value found, but a string or a null is required\\n[userinfo_endpoint] Boolean value found, but a string or a null is required\\n[endsession_endpoint] Boolean value found, but a string or a null is required\\n[connection_scopes[0]] Boolean value found, but a string is required\\n[connection_scopes[1]] Integer value found, but a string is required\\n[login_claim] Integer value found, but a string or a null is required\\n[client_id] Boolean value found, but a string or a null is required\\n[client_secret] Integer value found, but a string or a null is required\\n[authentication_type] Does not have a value in the enumeration [\\\"client_secret_post\\\",\\\"client_secret_basic\\\"]\\n[verify_peer] String value found, but a boolean is required\\n[auto_import] String value found, but a boolean is required\\n[contact_template.id] String value found, but a number is required\\n[contact_template.name] Integer value found, but a string is required\\n[email_bind_attribute] Integer value found, but a string or a null is required\\n[fullname_bind_attribute] Integer value found, but a string or a null is required\\n[authentication_conditions.is_enabled] String value found, but a boolean is required\\n[authentication_conditions.attribute_path] Boolean value found, but a string is required\\n[authentication_conditions.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[authentication_conditions.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[authentication_conditions.authorized_values[0]] Boolean value found, but a string is required\\n[authentication_conditions.trusted_client_addresses[0]] Integer value found, but a string is required\\n[authentication_conditions.blacklist_client_addresses[0]] Integer value found, but a string is required\\n[groups_mapping.is_enabled] String value found, but a boolean is required\\n[groups_mapping.attribute_path] Integer value found, but a string is required\\n[groups_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[groups_mapping.endpoint.custom_endpoint] Boolean value found, but a string or a null is required\\n[groups_mapping.relations[0]] String value found, but an object is required\\n[roles_mapping.is_enabled] Integer value found, but a boolean is required\\n[roles_mapping.apply_only_first_role] String value found, but a boolean is required\\n[roles_mapping.attribute_path] Integer value found, but a string or a null is required\\n[roles_mapping.endpoint.type] Integer value found, but a string is required\\n[roles_mapping.endpoint.type] Does not have a value in the enumeration [\\\"introspection_endpoint\\\",\\\"user_information_endpoint\\\",\\\"custom_endpoint\\\"]\\n[roles_mapping.endpoint.custom_endpoint] Integer value found, but a string or a null is required\\n[roles_mapping.relations[0].claim_value] Integer value found, but a string is required\\n[roles_mapping.relations[0].access_group_id] String value found, but an integer is required\\n[roles_mapping.relations[0].priority] String value found, but an integer is required\\n[redirect_url] Integer value found, but a string or a null is required\\n\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "506f994e-d0ef-4f7b-8562-b1d61071eb28"
							}
						}
					],
					"id": "de2824c8-dbe0-404e-9b2c-e2d2c6fad78e",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"is_active\": 1,\r\n        \"is_forced\": \"false\",\r\n        \"base_url\": true,\r\n        \"authorization_endpoint\": 1,\r\n        \"token_endpoint\": 0,\r\n        \"introspection_token_endpoint\": 1,\r\n        \"userinfo_endpoint\": false,\r\n        \"endsession_endpoint\": true,\r\n        \"connection_scopes\": [true, 1],\r\n        \"login_claim\": 3,\r\n        \"client_id\": false,\r\n        \"client_secret\": 123,\r\n        \"authentication_type\": true,\r\n        \"verify_peer\": \"false\",\r\n        \"auto_import\": \"true\",\r\n        \"contact_template\": {\r\n          \"id\": \"19\",\r\n          \"name\": 1\r\n        },\r\n        \"email_bind_attribute\": 0,\r\n        \"fullname_bind_attribute\": 2,\r\n        \"authentication_conditions\": {\r\n            \"is_enabled\": \"true\",\r\n            \"attribute_path\": true,\r\n            \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": 2\r\n            },\r\n            \"authorized_values\": [true],\r\n            \"trusted_client_addresses\": [1],\r\n            \"blacklist_client_addresses\": [3]\r\n        },\r\n        \"roles_mapping\": {\r\n          \"is_enabled\": 0,\r\n          \"attribute_path\": 1,\r\n          \"endpoint\": {\r\n              \"type\": 3,\r\n              \"custom_endpoint\": 1\r\n          },\r\n          \"apply_only_first_role\": \"false\",\r\n          \"relations\": [{\r\n            \"claim_value\": 1,\r\n            \"priority\": \"1\",\r\n            \"access_group_id\": \"1\"\r\n          }]\r\n        },\r\n        \"groups_mapping\": {\r\n          \"is_enabled\": \"false\",\r\n          \"attribute_path\": 0,\r\n          \"endpoint\": {\r\n              \"type\": 1,\r\n              \"custom_endpoint\": true\r\n          },\r\n          \"relations\": [\"coucou\"]\r\n        },\r\n        \"redirect_url\": 1\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value passed to \"trusted_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::trustedClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1e3e1a4d-4973-471b-b3bf-79718f353b98"
							}
						}
					],
					"id": "b00a8050-6e94-4637-8aa9-0ae9e4f41bc5",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [\".@\"],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH invalid value passed to \"blacklist_client_addresses\" (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The OpenId Provider informations have not been updated because there's values of the wrong type.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.eql(\"[AuthenticationConditions::blacklistClientAddresses] The value \\\".@\\\" was expected to be a valid ip address or domain name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8c353edc-5f3e-4672-893f-2bd1817117e3"
							}
						}
					],
					"id": "e2bcaf89-27c7-48c4-b6d0-025879634531",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": [\".@\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				}
			],
			"id": "f28df083-687c-4c43-b9bd-914bea2d1244"
		},
		{
			"name": "0403 - Update and retrieve OpenId Provider Configuration information as logged non-admin user without Reach API rights",
			"item": [
				{
					"name": "Add user without reach_api rights (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "119d6612-ddef-4e64-b67e-4913d8103428"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4df6bf33-124d-451e-8ed2-89bc205b7b47"
							}
						}
					],
					"id": "dc012f8e-9630-49e0-87ac-6e75ee08822e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;user-test;user-test@localhost;Centreon!1234;0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "40acdc8f-057f-4ebb-bc49-8bc352eff3bc"
							}
						}
					],
					"id": "c241cff0-7d19-42b4-aba7-45025dd63d29",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "08f5fdf4-2984-4d9a-8631-fce456bc4cf4"
							}
						}
					],
					"id": "44e8259d-c497-4369-aa19-aa1015ec8a92",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7d9af31c-96c5-4ba7-8080-82f985f7dcd5"
							}
						}
					],
					"id": "32826741-6cad-493b-ac72-d42a4905bfb0",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been updated, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "858dd43b-8d95-4df4-bc9e-602d51fcc7a9"
							}
						}
					],
					"id": "c76b0a17-2dc8-410f-b786-de30cd297534",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": false,\r\n    \"base_url\": \"https://localhost:8080\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user2\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"authorized_values\": [\"status2\"],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"apply_only_first_role\": false,\r\n        \"relations\": [{\r\n        \"claim_value\": \"status1\",\r\n        \"priority\": 1,\r\n        \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information with updated values by user without reach_api (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have not been listed, because the user doesn't have reach_api rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ccbebc94-849d-4d49-85cb-49d8e29f2ae0"
							}
						}
					],
					"id": "c9bd669b-fdc3-4eb4-9667-add4258587ed",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4943bd70-784b-4705-976c-997ef492b696"
							}
						}
					],
					"id": "f049d5d8-1ad2-4fe3-beea-dcfb1e091996",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "0c833b12-220f-4136-9a74-fe90925e860a"
		},
		{
			"name": "0404 - Update and retrieve OpenId Provider Configuration information as logged non-admin user with Reach API rights",
			"item": [
				{
					"name": "Login with admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "33223b73-9e51-4548-8bbf-71e4b9d68d8d"
							}
						}
					],
					"id": "15497358-3425-4587-848d-149cb26b3ddd",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f98beb79-60be-4e67-85bb-f12b2541dbf9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "42f2a2e8-b01a-4965-90a8-78c9f77eeddb"
							}
						}
					],
					"id": "e9ef3afe-dd47-4c12-afa7-89983e812ea2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"user-test;reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b9217353-190d-4289-9912-bd8421c1c98c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "740ca3ad-4d6c-4b6b-ba1c-c38b3adc89cc"
							}
						}
					],
					"id": "f035e31a-e8fe-4f32-85bb-1697f9e64a77",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;user-test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c68ccb16-cd06-47a0-9168-40eb731c9371"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "869734a0-e71a-4f6c-8866-0ea6b1bb4b47"
							}
						}
					],
					"id": "0446716a-ecd5-4b63-b96c-4b47942ed318",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Authentication-user;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1720fa7f-2285-491a-a720-0976f0de2a83"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fda67aa0-b87f-4615-b3e4-cd1006e1ccc6"
							}
						}
					],
					"id": "f1941ee6-8743-49ce-8f95-e512ce7a5003",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n\"values\": \"Authentication-user;1;Administration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Authentication-user to ALL (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d7bde03e-50b0-4964-9a50-77b260d95be0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2a9ef97f-048f-4d01-997c-a8fd07aeffe5"
							}
						}
					],
					"id": "b7795d48-cb71-4f31-bd16-e823d465542f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"ALL;Authentication-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7d0a3d32-882b-4b62-8df3-da5fba33a8fe"
							}
						}
					],
					"id": "e74608e7-2cb2-4f06-9cc0-651bc0adac59",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and doesn't have admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(\"user-test\");\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "18773ccf-d544-48cb-a2bb-d1ca8a209c60"
							}
						}
					],
					"id": "8ea3593f-a69a-4e2f-80b9-09a7ba9c7b4c",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"user-test\",\r\n      \"password\": \"Centreon!1234\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PUT OpenId Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "62c9d5d2-cb99-4b82-9862-ad144b0064ca"
							}
						}
					],
					"id": "047898fc-9379-49ea-8164-715281aadee3",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": true,\r\n    \"is_forced\": true,\r\n    \"base_url\": \"https://localhost:8181\",\r\n    \"authorization_endpoint\": \"/authorize\",\r\n    \"token_endpoint\": \"/token\",\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": \"/userinfo\",\r\n    \"endsession_endpoint\": \"/logout\",\r\n    \"connection_scopes\": [\"openid\", \"offline_access\"],\r\n    \"login_claim\": \"given_name\",\r\n    \"client_id\": \"user1\",\r\n    \"client_secret\": \"Centreon!2021\",\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": false,\r\n    \"auto_import\": true,\r\n    \"contact_template\": {\r\n        \"id\": {{ContactTemplateId}},\r\n        \"name\": \"contact_template\"\r\n    },\r\n    \"email_bind_attribute\": \"email\",\r\n    \"fullname_bind_attribute\": \"given_name\",\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": true,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"custom_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r\n        },\r\n        \"authorized_values\": [\"status123\"],\r\n        \"trusted_client_addresses\": [\"127.0.0.2\"],\r\n        \"blacklist_client_addresses\": [\"10.0.0.3\", \"10.0.0.4\"]\r\n    },\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"user_information_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r\n        },\r\n        \"apply_only_first_role\": true,\r\n        \"relations\": [{\r\n            \"claim_value\": \"status456\",\r\n            \"priority\": 2,\r\n            \"access_group_id\": 1\r\n        }]\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"users.roles.info.status\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r\n        },\r\n        \"relations\": [\r\n        ]\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenId Provider Configuration information by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": true,\r",
									"        \"is_forced\": true,\r",
									"        \"base_url\": \"https://localhost:8181\",\r",
									"        \"authorization_endpoint\": \"/authorize\",\r",
									"        \"token_endpoint\": \"/token\",\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": \"/userinfo\",\r",
									"        \"endsession_endpoint\": \"/logout\",\r",
									"        \"connection_scopes\": [\r",
									"            \"openid\",\r",
									"            \"offline_access\"\r",
									"        ],\r",
									"        \"login_claim\": \"given_name\",\r",
									"        \"client_id\": \"user1\",\r",
									"        \"client_secret\": \"Centreon!2021\",\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": false,\r",
									"        \"auto_import\": true,\r",
									"        \"contact_template\": {\r",
									"            \"id\": parseInt(pm.collectionVariables.get(\"ContactTemplateId\")),\r",
									"            \"name\": \"contact_template\"\r",
									"        },\r",
									"        \"email_bind_attribute\": \"email\",\r",
									"        \"fullname_bind_attribute\": \"given_name\",\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"user_information_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/roles\"\r",
									"            },\r",
									"            \"relations\": [{\r",
									"                \"claim_value\": \"status456\",\r",
									"                \"access_group\": {\r",
									"                    \"id\": 1,\r",
									"                    \"name\": \"ALL\"\r",
									"                },\r",
									"                \"priority\": 2\r",
									"            }]\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": true,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"custom_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/auth\"\r",
									"            },\r",
									"            \"authorized_values\": [\"status123\"],\r",
									"            \"trusted_client_addresses\": [\"127.0.0.2\"],\r",
									"            \"blacklist_client_addresses\": [\r",
									"                \"10.0.0.3\",\r",
									"                \"10.0.0.4\"\r",
									"            ]\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"users.roles.info.status\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"/my/custom/endpoint/groups\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1e7e6a13-bdaf-46b7-a8a2-303b793d7f89"
							}
						}
					],
					"id": "334e1d60-b251-448f-9b30-8f98bd096c79",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with PATCH OpenId Provider Configuration informations by user with reach_api (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The OpenId Provider informations have been correctly updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1f7803e9-edbc-4f8d-a530-8916b4c23c67"
							}
						}
					],
					"id": "b2f462dd-52f4-41e4-916c-8191972a404c",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_active\": false,\r\n    \"is_forced\": false,\r\n    \"base_url\": null,\r\n    \"authorization_endpoint\": null,\r\n    \"token_endpoint\": null,\r\n    \"introspection_token_endpoint\": null,\r\n    \"userinfo_endpoint\": null,\r\n    \"endsession_endpoint\": null,\r\n    \"connection_scopes\": [],\r\n    \"login_claim\": null,\r\n    \"client_id\": null,\r\n    \"client_secret\": null,\r\n    \"authentication_type\": \"client_secret_post\",\r\n    \"verify_peer\": true,\r\n    \"auto_import\": false,\r\n    \"contact_template\": null,\r\n    \"email_bind_attribute\": null,\r\n    \"fullname_bind_attribute\": null,\r\n    \"roles_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"apply_only_first_role\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": \"\"\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"authentication_conditions\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"authorized_values\": [],\r\n        \"trusted_client_addresses\": [],\r\n        \"blacklist_client_addresses\": []\r\n    },\r\n    \"groups_mapping\": {\r\n        \"is_enabled\": false,\r\n        \"attribute_path\": \"\",\r\n        \"endpoint\": {\r\n            \"type\": \"introspection_endpoint\",\r\n            \"custom_endpoint\": null\r\n        },\r\n        \"relations\": []\r\n    },\r\n    \"redirect_url\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Provider Configuration information with updated values by PATCH by user with reach_api(successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"All the OpenId Provider informations are displayed and correct.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        \"is_active\": false,\r",
									"        \"is_forced\": false,\r",
									"        \"base_url\": null,\r",
									"        \"authorization_endpoint\": null,\r",
									"        \"token_endpoint\": null,\r",
									"        \"introspection_token_endpoint\": null,\r",
									"        \"userinfo_endpoint\": null,\r",
									"        \"endsession_endpoint\": null,\r",
									"        \"connection_scopes\": [],\r",
									"        \"login_claim\": null,\r",
									"        \"client_id\": null,\r",
									"        \"client_secret\": null,\r",
									"        \"authentication_type\": \"client_secret_post\",\r",
									"        \"verify_peer\": true,\r",
									"        \"auto_import\": false,\r",
									"        \"contact_template\": null,\r",
									"        \"email_bind_attribute\": null,\r",
									"        \"fullname_bind_attribute\": null,\r",
									"        \"roles_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"apply_only_first_role\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": \"\"\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"authentication_conditions\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"authorized_values\": [],\r",
									"            \"trusted_client_addresses\": [],\r",
									"            \"blacklist_client_addresses\": []\r",
									"        },\r",
									"        \"groups_mapping\": {\r",
									"            \"is_enabled\": false,\r",
									"            \"attribute_path\": \"\",\r",
									"            \"endpoint\": {\r",
									"                \"type\": \"introspection_endpoint\",\r",
									"                \"custom_endpoint\": null\r",
									"            },\r",
									"            \"relations\": []\r",
									"        },\r",
									"        \"redirect_url\": null\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "37d8fc63-9bfa-4a05-bd5d-c069fb2f484a"
							}
						}
					],
					"id": "43ce14da-25c4-45d6-ac06-ccd0386724bc",
					"protocolProfileBehavior": {
						"disableCookies": true,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/openid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"openid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user-test (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "41250641-82c2-4c87-9e18-c4f39a901012"
							}
						}
					],
					"id": "0d795c6b-3383-43cf-93e2-ee405bbe9a9f",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "c24ba974-013c-42bb-bbd6-6e9f6fe17ede"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4498bb0a-a51c-4449-8bbe-a8ff77fcd029"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "5e7af021-7089-4136-90ce-67c94af4afba"
			}
		}
	]
}