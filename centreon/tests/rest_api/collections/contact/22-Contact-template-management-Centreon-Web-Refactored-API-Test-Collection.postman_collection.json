{
	"info": {
		"_postman_id": "c4b2b9fc-3b33-4487-b83d-ca2de17fe7ef",
		"name": "22 - Contact template management - Centreon Web Refactored API Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-c4b2b9fc-3b33-4487-b83d-ca2de17fe7ef"
	},
	"item": [
		{
			"name": "2201 - Create a new contact template",
			"item": [
				{
					"name": "[2201] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2201-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3e6d5a5a-922a-4a20-a1f0-7d90d848fc1f"
							}
						}
					],
					"id": "67c8e358-752c-4d5f-9e3e-eb0497fda024",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201] List contact templates before contact template creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2201-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The contact template list contains a single element, the contact template created by default.\", function () {\r",
									"    pm.expect(responseJson.result[0].name).to.eql(\"contact_template\");\r",
									"    pm.expect(responseJson.meta.total).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "403546d8-6b60-4c8f-83b3-7f49b8383e43"
							}
						}
					],
					"id": "945e19b6-64c9-49ef-a4fe-4ec7f71309e1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/contacts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"contacts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201] Create a new contact template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2201-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "900a18ce-46f6-4cb4-9bca-2a401e9cf6d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2201\");\r",
									"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
								],
								"type": "text/javascript",
								"id": "57c66b9d-be24-49e1-baa4-09f397cbfe32"
							}
						}
					],
					"id": "7e46b387-8b26-40ba-a5fd-fa3730301795",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201] List contact templates after contact template creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2201] Delete the new contact template\"\r",
									"\r",
									"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The contact template list now contains two elements, the contact template created by default and the newly created template.\", function () {\r",
									"    pm.expect(responseJson.meta.total).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].name).to.eql(\"contact_template\");\r",
									"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"contactTemplateName\"));\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2aa2f63e-a0d4-4db0-b86b-4481b7ef3235"
							}
						}
					],
					"id": "c053d023-4b85-4b11-8ff7-02bd52999fb8",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/contacts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"contacts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201] Delete the new contact template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
									"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
									"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "51b31bc7-7c10-4fb8-ae8a-f1adfa7be688"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6949a37e-400f-4eee-a333-bfaac7e24660"
							}
						}
					],
					"id": "de4aab4c-b5de-4cb4-b3ad-f0114d16390f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201] List contact templates after contact template creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2201-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"The contact template list contains a single element, the contact template created by default.\", function () {\r",
									"    pm.expect(responseJson.result[0].name).to.eql(\"contact_template\");\r",
									"    pm.expect(responseJson.meta.total).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5dc292c8-78c2-4eb3-aa5a-1ac8ef62ca69"
							}
						}
					],
					"id": "e43f4c60-31cd-4ff5-9f12-0a86db337cf5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/contacts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"contacts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2201-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d70dc050-69d8-4047-ae73-78c4997a960d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "52a37be0-7a36-4873-8f2f-f41fbf3dffa5"
							}
						}
					],
					"id": "f50eedfd-06b4-4a2c-a014-ff8f2c1c430e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "a1c4a286-c6c2-4793-8dde-25f273ea968a"
		},
		{
			"name": "2202 - Create contact templates with duplicate fields",
			"item": [
				{
					"name": "[2202] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7e046b0f-b217-4199-9b1b-da9feb8daa0e"
							}
						}
					],
					"id": "b173c2fe-d8a1-4f5e-a3fc-0312fe433008",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202] Create a new contact template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4b3f6eac-34bd-4431-86e0-9c906ce648e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2202\");\r",
									"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
								],
								"type": "text/javascript",
								"id": "a2bbf17a-6292-4f35-ada0-52d1265df11d"
							}
						}
					],
					"id": "51b4e07e-3f8a-4be0-ab38-90f9bf5460a5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202] Attempt to create contact template with duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202] Show list of contact templates after contact template creation\"\r",
									"\r",
									"pm.test(\"Since the name is not a unique identifier, the contact template has been created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8fd28c72-3258-4189-a18c-cec78b5288d4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateAliasBis\", pm.collectionVariables.get(\"contactTemplateAlias\").concat(\"\", \"-bis\"));\r",
									"pm.collectionVariables.set(\"contactTemplateMailBis\", \"dummymail2@centreon\");"
								],
								"type": "text/javascript",
								"id": "29c90cb4-213a-4160-8241-425772fc74b8"
							}
						}
					],
					"id": "285852ac-a31d-472d-9d1b-ba93bd887ce3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAliasBis}};{{contactTemplateMailBis}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202] Attempt to create contact template with duplicate alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202] Show list of contact templates after contact template creation\"\r",
									"\r",
									"pm.test(\"Since the alias is a unique identifier, the contact template with name \" + pm.collectionVariables.get(\"contactTemplateNameBis\") + \" has not been created.\", function () {\r",
									"    const expectedResponseCode = 409\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9332d372-0d68-479e-aa70-db431791f1f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateNameBis\", pm.collectionVariables.get(\"contactTemplateName\").concat(\"\", \"-bis\"));\r",
									""
								],
								"type": "text/javascript",
								"id": "f0754267-7820-4ea7-8e1b-2b350431f502"
							}
						}
					],
					"id": "12dfb7e9-083d-4179-ad76-156f26245233",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateNameBis}};{{contactTemplateAlias}};{{contactTemplateMailBis}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202] Attempt to create contact template with duplicate mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202] Show list of contact templates after contact template creation\"\r",
									"\r",
									"pm.test(\"Since the mail is not a unique identifier, the contact template has been created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5fcc65dd-0d05-4cc6-be1d-1625d0447ec5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateAliasTer\", pm.collectionVariables.get(\"contactTemplateAlias\").concat(\"\", \"-ter\"));\r",
									""
								],
								"type": "text/javascript",
								"id": "0f9caea9-e4f8-4810-b260-b8fd75ddcbfb"
							}
						}
					],
					"id": "647d173b-57c0-4628-9780-286a6af2a6ab",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateNameBis}};{{contactTemplateAliasTer}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202] Show list of contact templates after contact template creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2202-cleanup] Delete the new contact templates\"\r",
									"\r",
									"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"There should be four contact templates displayed, each with a different alias since it is the unique identifier for this resource.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"    pm.expect(responseJson.result[0].name).to.eql(\"contact_template\");\r",
									"    pm.expect(responseJson.result[1].alias).to.not.eql(responseJson.result[2].alias);\r",
									"    pm.expect(responseJson.result[1].alias).to.not.eql(responseJson.result[3].alias);\r",
									"    pm.expect(responseJson.result[2].alias).to.not.eql(responseJson.result[3].alias);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8009aae1-a25d-4a56-9c15-d68d89163cb8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c01ded52-3979-45c0-8965-f59c246ccdc5"
							}
						}
					],
					"id": "6085e3a5-72df-4c7b-b8f1-29f83754087b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"contacttpl\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202-cleanup] Delete the new contact templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"[Cleanup] Contact template \" + pm.collectionVariables.get(\"currentContactTemplate\") + \" has successfully been deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to delete every entry of contactTemplateList\r",
									"    let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
									"    if (contactTemplateList && contactTemplateList.length > 0) {\r",
									"        postman.setNextRequest(\"[2202-cleanup] Delete the new contact templates\");\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateAliasBis\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateAliasTer\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateName\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateNameBis\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateMail\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateMailBis\");\r",
									"        pm.collectionVariables.unset(\"currentContactTemplate\");\r",
									"        pm.collectionVariables.unset(\"contactTemplateList\");\r",
									"        postman.setNextRequest(\"[2202-cleanup] Logout from admin user and clear collection variables\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1d5f7332-973d-4f2b-af51-653b628986c5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let contactTemplateList = pm.collectionVariables.get(\"contactTemplateList\");\r",
									"\r",
									"if (!contactTemplateList || contactTemplateList.length == 0) {\r",
									"    contactTemplateList = [pm.collectionVariables.get(\"contactTemplateAlias\"), pm.collectionVariables.get(\"contactTemplateAliasBis\"), pm.collectionVariables.get(\"contactTemplateAliasTer\")];\r",
									"}\r",
									"if(!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.collectionVariables.set(\"currentContactTemplate\", contactTemplateList.shift());\r",
									"}\r",
									"pm.collectionVariables.set(\"contactTemplateList\", contactTemplateList);\r",
									""
								],
								"type": "text/javascript",
								"id": "ed6674b5-7ed0-41ce-9fba-d86cffac6a59"
							}
						}
					],
					"id": "fe20b472-3796-4f88-a630-58d0f7f44443",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{currentContactTemplate}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2202-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "89a3f24a-c489-4018-ad68-1258866666f3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4e802395-8a31-493c-9a1b-7240fe966247"
							}
						}
					],
					"id": "5791bb02-8ffc-435c-8b2f-e24e5df2b05b",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "20a6bc42-abcb-4244-9c1c-db31c505aad8"
		},
		{
			"name": "2204 - Assigning a contact template to a contact",
			"item": [
				{
					"name": "[2204] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2204-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "055f025e-bbe7-4652-9fbd-0d938f546e31"
							}
						}
					],
					"id": "6e4cadac-7172-4b2e-8a02-5ba38823d43b",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204] Create a new contact template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2204-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "28494efe-b83f-48db-b677-a4614e727117"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2204\");\r",
									"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
								],
								"type": "text/javascript",
								"id": "98c92289-b80f-4bb3-b80b-e2d42e2b1e25"
							}
						}
					],
					"id": "c7ebb5b2-dca9-4c72-8f24-b00e7559754d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204] Create a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2204-cleanup] Delete new contact template\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ac8dfbe2-ea9e-420f-9e4c-20f560c1f3d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-2204\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"Contact_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
								],
								"type": "text/javascript",
								"id": "f844e2bf-0e21-4afc-854a-b8bcfdad9e1f"
							}
						}
					],
					"id": "5c23ec97-cb99-4e22-a437-d16fcfed8fa1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204] Assign template to contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2204-cleanup] Delete new user\"\r",
									"\r",
									"pm.test(\"The user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully assigned to the contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b1bf44cf-9a91-4b03-abcb-aaae96d01bd7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2201\");\r",
									"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
								],
								"type": "text/javascript",
								"id": "5b4a95a5-90af-4f23-8381-60b58b1ae76b"
							}
						}
					],
					"id": "911444be-c835-414e-9c09-81ddb80301a2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"contact\",\n  \"values\":\"{{testUserLogin}};template;{{contactTemplateAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204-cleanup] Delete new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8432fe42-154f-486b-a0b2-cd3c9bdd730f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-2204\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"Contact_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
								],
								"type": "text/javascript",
								"id": "6b600ba0-cc40-4ef9-9fe1-62924578eb3a"
							}
						}
					],
					"id": "ff0c649d-bd20-4ee7-9dd4-3226a17a4e9b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204-cleanup] Delete new contact template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"contactTemplateName\");\r",
									"    pm.collectionVariables.unset(\"contactTemplateAlias\");\r",
									"    pm.collectionVariables.unset(\"contactTemplateMail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "11bed11d-4eb1-4d63-a7dd-34192ecffef9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API-2204\");\r",
									"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
									"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
								],
								"type": "text/javascript",
								"id": "89aed93e-4fe2-4908-a228-18c8bc9f8685"
							}
						}
					],
					"id": "74f7f01f-7eaa-48d6-8e42-d755ac3a5809",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2204-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fb254750-8e34-4ffd-abf6-68797a1be842"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "24e0b711-a428-445c-a180-6d8bae9a8a8f"
							}
						}
					],
					"id": "0a06a0fc-a5e2-4011-863c-f203d8bdb8b6",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "d6051f80-ef3f-4111-8beb-8ef48b22d039"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "046e7ec0-f828-435b-be54-b28c5dffee58"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.setNextRequestBasedOnStatusCode = (pm, postman, response, expectedResponseCode, nextRequestInCaseOfFailure) => {",
					"    if(expectedResponseCode != response.code) {",
					"        if (!pm.collectionVariables.get(\"requestTries\")) {",
					"            pm.collectionVariables.set(\"requestTries\", 0);",
					"        }",
					"        pm.collectionVariables.set(\"requestTries\", pm.collectionVariables.get(\"requestTries\") + 1);",
					"        if(pm.collectionVariables.get(\"requestTries\") < pm.environment.get(\"maxNumberOfRetries\")) {",
					"            console.log(\"Response does not have the expected status code | Resending the request \\\"\" + pm.info.requestName + \"\\\"... | Number of tries: \" + pm.collectionVariables.get(\"requestTries\"));",
					"            postman.setNextRequest(pm.info.requestName);",
					"        } else {",
					"            pm.collectionVariables.unset(\"requestTries\");",
					"            pm.collectionVariables.unset(\"nextRequestInCaseOfFailure\");",
					"            console.log(\"Response does not have the expected status code | Aborting the current scenario (too many tries)\");",
					"            postman.setNextRequest(nextRequestInCaseOfFailure);",
					"        }",
					"    } else {",
					"        pm.collectionVariables.unset(\"requestTries\");",
					"        console.log(\"Response has the expected status code \" + pm.response.code + \" | Running the next tests\")",
					"    }",
					"  }"
				],
				"id": "1493ca7b-b21d-4cea-8eaa-9c921d1e1e1d"
			}
		}
	]
}