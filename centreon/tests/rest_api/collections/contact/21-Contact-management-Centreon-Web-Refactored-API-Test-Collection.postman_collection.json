{
	"info": {
		"_postman_id": "38a66226-6b09-4846-984f-49a514cc14df",
		"name": "21 - Contact management - Centreon Web Refactored API Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-38a66226-6b09-4846-984f-49a514cc14df"
	},
	"item": [
		{
			"name": "2101 - Checking actions on admin user",
			"item": [
				{
					"name": "[2101] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2101-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "af9bd1a2-6a21-44cb-b396-ffea00388a0a"
							}
						}
					],
					"id": "47021408-7262-49b6-8f36-00099d00c9d7",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2101] Check admin's actions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2101-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The available actions of the admin user have been successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"const valuesHosts = Object.values(responseJson.host);\r",
									"const valuesServices = Object.values(responseJson.service);\r",
									"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
									"\r",
									"pm.test(\"Admin user has access to all available actions.\", function() {\r",
									"    pm.expect(valuesHosts).to.not.include(false);\r",
									"    pm.expect(valuesServices).to.not.include(false);\r",
									"    pm.expect(valuesMetaservices).to.not.include(false);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "271ec03d-8b25-48e3-989d-0bc9710c41e5"
							}
						}
					],
					"id": "9eda4e94-0397-4230-a12e-28d6a802f0d3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/acl/actions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"acl",
								"actions"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2101-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6c4a13c-5b56-4e2d-830d-04e2a009e400"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Include this exact block (customize the nextRequestInCaseOfFailure, the expectedResponseCode and the pm.test message at will) in every request that checks the status code of a response\r",
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"// End of block (do not forget to close the test assertion if you have nothing else to add in it)\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2dda0ba0-56b5-42b6-b61c-e292c5050e78"
							}
						}
					],
					"id": "88a71b99-1098-4bab-bd3e-444709bbe92a",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "3bb0eabc-7b67-4965-bf1a-b2ce723ee58c"
		},
		{
			"name": "2102 - Listing default users and check the presence of the admin user",
			"item": [
				{
					"name": "[2102] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2102-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"    pm.environment.set(\"currentUserEmail\", responseJson.contact.email);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "042670fd-9775-4aac-b88b-785be26a6ed2"
							}
						}
					],
					"id": "a2f64444-d01b-411d-8036-1651ef4dba62",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2102] List all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2102-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"for (let count = 0; count < responseJson.result.length; count++) {\r",
									"    if(responseJson.result[count].id == pm.environment.get(\"currentUserID\")) {\r",
									"        pm.test(\"Current admin user is registered in the list.\", function() {\r",
									"            pm.expect(pm.environment.get(\"currentUserID\")).to.eql(responseJson.result[count].id);\r",
									"            pm.expect(pm.environment.get(\"api_login\")).to.eql(responseJson.result[count].alias);\r",
									"            pm.expect(pm.environment.get(\"currentUserEmail\")).to.eql(responseJson.result[count].email);\r",
									"            pm.expect(responseJson.result[count].is_admin).to.eql(true);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Only the four default users are listed, whether they are enabled or not: '\" + pm.environment.get(\"currentUserName\") + \"', 'centreon-gorgone', 'Guest' and 'User'.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(4);\r",
									"    for (let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect([pm.environment.get(\"currentUserName\"), \"centreon-gorgone\", \"Guest\", \"User\"].indexOf(responseJson.result[count].name)).to.not.eql(-1);    \r",
									"    } \r",
									"})"
								],
								"type": "text/javascript",
								"id": "3d9ce0a3-d6bf-41ae-b503-0f026434fc96"
							}
						}
					],
					"id": "5ad810e0-fdd7-48fd-9dde-738ae3e827be",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2102-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d7e6792a-dc9b-4a95-abbf-0920f3f0ac63"
							}
						}
					],
					"id": "5b77ab22-cf4e-405a-b433-1f36bbc50b4e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "bb3fadbf-27a5-4b7e-9a76-0e606be0d8f0"
		},
		{
			"name": "2103 - Adding a new non-admin user and assess it is listed",
			"item": [
				{
					"name": "[2103] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b979fd8a-8c99-475f-8931-e4f6e6249cdb"
							}
						}
					],
					"id": "3d694c6b-4145-46ec-82b7-b9904512ee38",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103] List all users before user creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Only default users are listed: '\" + pm.environment.get(\"currentUserName\") + \"', 'centreon-gorgone', 'Guest' and 'User'.\", function() {\r",
									"    for (let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect([pm.environment.get(\"currentUserName\"), \"centreon-gorgone\", \"Guest\", \"User\"].indexOf(responseJson.result[count].name)).to.not.eql(-1);    \r",
									"    } \r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"numberOfListedUsers\", responseJson.result.length);"
								],
								"type": "text/javascript",
								"id": "1f438e83-20e3-488d-bfcb-6b88fdf4e81b"
							}
						}
					],
					"id": "864d96d6-747c-43f3-a4db-aa7e8b15e709",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103] Add new non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "47ce2d1e-df36-41d2-a2ba-c84f960240bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2103\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
								],
								"type": "text/javascript",
								"id": "55c0d6f1-69c4-4f22-9918-27ce90e922aa"
							}
						}
					],
					"id": "86250c57-9230-4650-8aca-f8594c8c6667",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103] List all users after user creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"This list of users now has one more member compared to before the previous request.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"numberOfListedUsers\") + 1);\r",
									"})\r",
									"\r",
									"pm.test(\"Only default users are listed alongside the newly created user: '\" + pm.collectionVariables.get(\"testUserName\") + \"'.\", function() {\r",
									"    for (let count = 0; count < responseJson.meta.total; count++) {\r",
									"        pm.expect([pm.environment.get(\"currentUserName\"), \"centreon-gorgone\", \"Guest\", \"User\", pm.collectionVariables.get(\"testUserName\")].indexOf(responseJson.result[count].name)).to.not.eql(-1);\r",
									"        if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\")) {\r",
									"            pm.collectionVariables.set(\"indexOfTestUserInList\", count);\r",
									"        }\r",
									"    } \r",
									"})\r",
									"\r",
									"pm.test(\"The list features correct information for the newly created user.\", function() {\r",
									"    pm.expect(responseJson.result[pm.collectionVariables.get(\"indexOfTestUserInList\")].name).to.eql(pm.collectionVariables.get(\"testUserName\"));\r",
									"    pm.expect(responseJson.result[pm.collectionVariables.get(\"indexOfTestUserInList\")].alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
									"    pm.expect(responseJson.result[pm.collectionVariables.get(\"indexOfTestUserInList\")].email).to.eql(pm.collectionVariables.get(\"testUserEmail\"));\r",
									"    pm.expect(responseJson.result[pm.collectionVariables.get(\"indexOfTestUserInList\")].is_admin).to.eql(false);\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "e2d8b191-4519-4d0c-8792-5b451d7e3262"
							}
						}
					],
					"id": "1f798633-2069-4886-96bf-edad1c00f4e2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103] Delete the non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "4927c540-9c17-4618-81c6-bae37db7c103"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "affa511b-08de-44d4-8009-ca9e46b996d7"
							}
						}
					],
					"id": "3c02c4b7-bcee-479e-93ce-5c8d71435c64",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103] List all users after user deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2103-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Only default users are listed, whether they are enabled or not: '\" + pm.environment.get(\"currentUserName\") + \"', 'centreon-gorgone', 'Guest' and 'User'.\", function() {\r",
									"    for (let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect([pm.environment.get(\"currentUserName\"), \"centreon-gorgone\", \"Guest\", \"User\"].indexOf(responseJson.result[count].name)).to.not.eql(-1);    \r",
									"    } \r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"numberOfListedUsers\", responseJson.result.length);"
								],
								"type": "text/javascript",
								"id": "0be1088e-7799-412e-8945-4c49756efb5a"
							}
						}
					],
					"id": "5ff0efd8-af20-4354-8481-0e979bb3d58b",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2103-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "58a29d06-ece9-4a78-9a09-0a2070c23f70"
							}
						}
					],
					"id": "ffb9f292-dff2-4516-9a57-a8968ab78be7",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "0d1c2da2-a755-4d1e-9e34-946990ccf422"
		},
		{
			"name": "2104 - Adding a non-admin user and disable/enable it",
			"item": [
				{
					"name": "[2104] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d2dff37c-551c-475a-8c0f-ffba91e7be5a"
							}
						}
					],
					"id": "8753280b-e299-4f6c-86db-10e0a2718e20",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] Add new non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b10bfd7f-c6d8-4af4-923b-7b458c632865"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2104\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");"
								],
								"type": "text/javascript",
								"id": "616e12f3-ae15-40b3-92c2-c7a4d5c273b0"
							}
						}
					],
					"id": "c4900552-e26b-460b-b9fa-817e6b609c8f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};Centreon!2021;0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] List all users after user creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"for(count = 0; count < responseJson.meta.total; count++){\r",
									"    if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\")) {\r",
									"        pm.collectionVariables.set(\"testUserId\", responseJson.result[count].id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "7472e46e-a8e2-45c9-8a57-d6c2af5acf4a"
							}
						}
					],
					"id": "3276c6df-9803-4f96-a9ee-f5d4fcdeae06",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] Disable non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully disabled.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1e8cbbfe-37d1-4ef0-a40e-5695ef08db8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "92811436-f61c-4928-a89f-379a1eba686e"
							}
						}
					],
					"id": "d07df3a5-feec-4e0e-af18-27d290e6c3aa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] List all users after non-admin user disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"for (let count = 0; count < responseJson.result.length; count++) {\r",
									"    if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\") && parseInt(responseJson.result[count].id) == pm.collectionVariables.get(\"testUserId\")) {\r",
									"        pm.test(\"The selected user can be found, but has been disabled.\", function() {\r",
									"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(0);\r",
									"        })\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "eaa1425e-5310-4b6a-acb8-db109a3d039a"
							}
						}
					],
					"id": "26d353e2-dafa-4257-a0e6-0908b3bbe4f7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contact\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] Enable non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully enabled.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "46c9bda1-ad41-4835-a02b-64e8b2054ecb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a7884ff4-5bf8-4025-954b-122ef12aea79"
							}
						}
					],
					"id": "389e736b-bb49-46be-9a0a-fb94bb4d541b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104] List all users after non-admin user enable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2104-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"The list of users was successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"for (let count = 0; count < responseJson.result.length; count++) {\r",
									"    if(responseJson.result[count].name == pm.collectionVariables.get(\"testUserName\") && parseInt(responseJson.result[count].id) == pm.collectionVariables.get(\"testUserId\")) {\r",
									"        pm.test(\"The selected user can be found and is now enabled.\", function() {\r",
									"            pm.expect(parseInt(responseJson.result[count].activate)).to.eql(1);\r",
									"            pm.collectionVariables.unset(\"testUserId\");\r",
									"        })\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"id": "b570bf03-427a-4740-9e73-30331486205c"
							}
						}
					],
					"id": "c759ecc5-993c-4c39-9985-b9864580a3b0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contact\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104-cleanup] Delete the non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "386fcb08-8e36-4e44-9e62-4ab2af577f10"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3c61e7fa-6d26-4cdf-ad3e-6396991a0d06"
							}
						}
					],
					"id": "b8c80f05-5401-40d5-823c-76f9ef50d6d1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2104-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1d80ff6d-bb26-4534-bd44-911332c28195"
							}
						}
					],
					"id": "6942faec-b4cc-4424-aed3-01a1913ea983",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "2b8cdb11-1812-47e4-b45b-9fea5bd17229"
		},
		{
			"name": "2106 - Adding a non-admin user, give it API access and log in on it",
			"item": [
				{
					"name": "[2106] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2106-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3953e2d0-38ac-4306-a912-61270db86564"
							}
						}
					],
					"id": "4d0990bc-c2ed-4f11-9ba7-bb5deaba18ec",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106] Add new non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2106-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "982fdd69-6695-4e88-9ffb-347785eaf16d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2106\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
									"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
								],
								"type": "text/javascript",
								"id": "620422c9-1171-40d2-b8c3-a593db5e5748"
							}
						}
					],
					"id": "4ce5dc45-f72e-4d03-846a-ed54b47bee9a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106] Add access to API configuration & realtime to the new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
									"    values = [1, 0];\r",
									"}\r",
									"\r",
									"if(!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.collectionVariables.set(\"currentParameter\", parameters.shift());\r",
									"    pm.collectionVariables.set(\"currentValue\", values.shift());\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);"
								],
								"type": "text/javascript",
								"id": "c18a1ecd-c611-4e30-a897-7c1a356bc3c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2106-cleanup] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(\"[2106] Add access to API configuration & realtime to the new user\");\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2106] Log out from admin user after non-admin user update\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ad929bb6-4767-45b3-9ee3-db6945537d2c"
							}
						}
					],
					"id": "b86cc663-31de-4051-a5dc-fc517836399d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106] Log out from admin user after non-admin user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ed77e3b7-016e-426f-a7dc-267c3fe7c07a"
							}
						}
					],
					"id": "825bd730-a3a5-4880-9022-8a254e71add7",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2106] Login on the newly created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2106] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and does not have admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.false;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2457336c-6c5f-4cbc-9d00-b6eaa5ec8c88"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9980b833-9e88-455e-b4ab-5039d2ffc61b"
							}
						}
					],
					"id": "225fcc53-479d-4829-9651-c85d27b25ea7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": []
				},
				{
					"name": "[2106] Check actions on non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2106] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"The available actions of the non-admin user \" + pm.collectionVariables.get(\"testUserName\") + \" were successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"const valuesHosts = Object.values(responseJson.host);\r",
									"const valuesServices = Object.values(responseJson.service);\r",
									"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
									"\r",
									"pm.test(\"The newly created non-admin user has access to no available actions.\", function() {\r",
									"    pm.expect(valuesHosts).to.not.include(true);\r",
									"    pm.expect(valuesServices).to.not.include(true);\r",
									"    pm.expect(valuesMetaservices).to.not.include(true);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a6638425-f2c0-41c4-8f8b-5e3b61a09318"
							}
						}
					],
					"id": "6fde3e86-f435-4336-b8d8-737e29cc8f73",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/acl/actions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"acl",
								"actions"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106] List users with new admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[2106] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"Since the non-admin user was granted API access rights, but without access to configuration user page, it can not access the list of users.\", function () {\r",
									"    const expectedResponseCode = 403\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, 403, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c12aac99-40bd-432f-8896-9ae4bac1e9b4"
							}
						}
					],
					"id": "5e1dc22b-6165-4f7b-9938-b71440b68e99",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106] Log out from non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b1bce734-2c66-429c-9b9e-692badabf17f"
							}
						}
					],
					"id": "58dcdd9d-8da6-4219-9a8c-8ea8571c442d",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2106] Login with admin user after non-admin user check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8be81844-9e77-4d19-afd5-7b179c2c0f2c"
							}
						}
					],
					"id": "1b79659e-8507-451a-81d8-fd5d85e80552",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106-cleanup] Delete the non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"    pm.collectionVariables.unset(\"testUserPassword\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "270505fa-7ee2-43e3-a67a-d268a0bf4429"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "46bfefc9-542d-45ef-95b0-f575d0ceeaa4"
							}
						}
					],
					"id": "41c0bd75-bdd7-46cd-91fa-7df974d020a0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2106-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "28200e0e-fb3a-4995-ad2d-a01af0a4e171"
							}
						}
					],
					"id": "473aef1c-ab2a-494a-a9cd-571262e57dca",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "e282d98e-7c13-42da-9512-4ed3b56a9a80"
		},
		{
			"name": "2107 - Adding an admin user, give it API access and log in on it",
			"item": [
				{
					"name": "[2107] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2107-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "27d8b685-d811-442a-9d1e-dcaae3f02585"
							}
						}
					],
					"id": "3967f006-c49c-458f-868d-c230f6ece634",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107] Add new admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2107-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fd92378a-2f05-4b65-bd3a-f08fe9489691"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2107\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
									"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
								],
								"type": "text/javascript",
								"id": "6e416180-cfa0-4ab0-b485-ce8b43ed4ca3"
							}
						}
					],
					"id": "6a76abb5-a48a-40f6-956b-446229b6e6f7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};1;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107] Add access to API configuration & realtime to the new admin user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
									"    values = [1, 1];\r",
									"}\r",
									"\r",
									"if(!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.collectionVariables.set(\"currentParameter\", parameters.shift());\r",
									"    pm.collectionVariables.set(\"currentValue\", values.shift());\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);"
								],
								"type": "text/javascript",
								"id": "97f3813d-c5a5-4ac6-bb07-600b6c4510f3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2107-cleanup] Delete the admin user\"\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(\"[2107] Add access to API configuration & realtime to the new admin user\");\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2107] Log out from admin user after new admin user update\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e3934f6b-ff49-4e8e-b293-e441bef6523e"
							}
						}
					],
					"id": "b9df93d5-381b-4af0-9b0b-1990610edc5e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107] Log out from admin user after new admin user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3a3519c0-ce58-43ba-a371-8c6fee7f5002"
							}
						}
					],
					"id": "d0d5c8f1-93e6-4d46-98ed-5d6203a61a82",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2107] Login on newly created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2107] Login with admin user after new admin user check\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "927f8607-259e-4c7d-8db3-c26e33eeb1d4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2d188657-8126-4221-8a3b-08f6ac18e486"
							}
						}
					],
					"id": "1de684eb-63d4-4fa7-912d-52b678682f31",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": []
				},
				{
					"name": "[2107] Check actions on admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2107] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"The available actions of the admin user \" + pm.collectionVariables.get(\"testUserName\") + \" were successfully fetched.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});\r",
									"\r",
									"const valuesHosts = Object.values(responseJson.host);\r",
									"const valuesServices = Object.values(responseJson.service);\r",
									"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
									"\r",
									"pm.test(\"The newly created admin user has access to all available actions.\", function() {\r",
									"    pm.expect(valuesHosts).to.not.include(false);\r",
									"    pm.expect(valuesServices).to.not.include(false);\r",
									"    pm.expect(valuesMetaservices).to.not.include(false);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5165ab88-f460-4084-aeb2-dce1634abfb6"
							}
						}
					],
					"id": "b43b8201-ea94-4b7a-9b0a-a2bace95f4c8",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/acl/actions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"acl",
								"actions"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107] Log out from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c294e088-ab1b-49c8-85ef-b51f470d15eb"
							}
						}
					],
					"id": "7142a1a0-d10d-4667-957c-ff670a47d110",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2107] Login with admin user after new admin user check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "21c904c6-1b73-4c90-9efe-3b94a8007c94"
							}
						}
					],
					"id": "50b209af-30a9-4138-90ff-405c23af94f2",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107-cleanup] Delete the admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"    pm.collectionVariables.unset(\"testUserPassword\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d368a9ca-487b-416d-93ca-06dbb6e0c99c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "54738d22-45a9-4298-ba59-56e81b0a2aea"
							}
						}
					],
					"id": "abc4bd72-74bc-4e86-8715-7d95feb1bdb0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2107-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "625050bb-7831-4d97-8d66-73b85ee00810"
							}
						}
					],
					"id": "d46d1ed0-2df4-410a-9493-bd1ba45fcf4e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "eb3d7736-f405-4b41-bcd0-1127a236f97d"
		},
		{
			"name": "2108 - Adding a user and trying to log in with it without API access rights",
			"item": [
				{
					"name": "[2108] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2108-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3d55249b-6fca-4121-8879-eaf21056b61f"
							}
						}
					],
					"id": "1cd04624-84d3-4fe2-9837-7188e0d62b42",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2108] Add new non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2108-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully created.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f19f4028-e53a-4fbb-a9b5-b12ae0eb4c87"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2108\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
									"pm.collectionVariables.set(\"testUserPassword\", \"Centreon!2021\");"
								],
								"type": "text/javascript",
								"id": "e8224e4e-1e07-4317-9d5b-25ecd9a0279e"
							}
						}
					],
					"id": "4cc74eff-8cf5-49a6-8f7c-2ff958abf38d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{testUserPassword}};0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2108] Log out from non-admin user after admin user creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e94e1d63-88a3-46dd-9741-10f5e29fed05"
							}
						}
					],
					"id": "e5734643-0af1-46dd-a20b-4f1145d794ce",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2108] Login on newly created non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2108] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and does not have admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.false;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "aeed6915-cf4a-4747-a848-63a2c71e33ab"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a587b3e2-9ae3-41b1-8c95-e5fef2a04c3a"
							}
						}
					],
					"id": "3492686d-d43e-4781-b32d-70a4fd452c77",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{testUserPassword}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": []
				},
				{
					"name": "[2108] Attempt to list users with new non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[2108] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"Since the non-admin user was not granted API access rights, it could not access the list of users.\", function () {\r",
									"    const expectedResponseCode = 403\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "046a8e71-6f7c-4983-904b-8bb28746d160"
							}
						}
					],
					"id": "771c76f5-770f-48c8-90e5-0468d3616e6b",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2108] Log out from non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e496175b-e95e-4594-9a52-0e189a03b7b8"
							}
						}
					],
					"id": "a5b260af-889a-4ca9-ac3b-b849354140b0",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2108] Login with admin user after non-admin user check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "28dc9b92-8ef6-4af8-8476-f21e455d2737"
							}
						}
					],
					"id": "424b7072-ffd2-484e-82f5-d3e2d1ddb1d2",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2108-cleanup] Delete the non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cleanup] The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"    pm.collectionVariables.unset(\"testUserPassword\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3836e1a0-dfa7-4071-9244-a3023d663f62"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "17adfa3c-0fc4-428b-8577-70747b84b162"
							}
						}
					],
					"id": "cf688586-1c6d-4e5e-a04d-f464ba8bfc5f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2108-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "91501755-5130-4640-9a86-34844ea7e6da"
							}
						}
					],
					"id": "747492ff-7926-4d9a-a17c-f097d6f7c44c",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "53cb1081-edc6-40a6-a0d3-833b3648fc54"
		},
		{
			"name": "2110 - Trying to add a user with a password that is non-compliant with the password policy",
			"item": [
				{
					"name": "[2110] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2110-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9bdd76d3-e4ad-46fd-8310-5a189895c4c1"
							}
						}
					],
					"id": "d9c9a484-8d3b-4c8f-b61c-5c35053a84ec",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2110] Trying to add a contact with a password that is non-compliant with the password policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2110-DEBUG] Delete the contact with a non-compliant password\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" could not have been created because password \" + pm.environment.get(\"currentIncorrectPassword\") + \" does not match with the current password policy.\", function () {\r",
									"    const expectedResponseCode = 500\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson).to.eql(\"Your password must be 12 characters long and must contain : uppercase characters, lowercase characters, numbers, special characters among '@$!%*?&'.\");\r",
									"\r",
									"    // Looping the request to try and create a user with every element of the incorrectPassowrds list as a password\r",
									"    const incorrectPasswords = pm.environment.get(\"incorrectPasswords\");\r",
									"    if(incorrectPasswords && incorrectPasswords.length > 0) {\r",
									"        postman.setNextRequest(\"[2110] Trying to add a contact with a password that is non-compliant with the password policy\");\r",
									"    } else {\r",
									"        postman.setNextRequest(\"[2110-cleanup] Logout from admin user and clear collection variables\");\r",
									"        pm.environment.unset(\"currentIncorrectPassword\");\r",
									"        pm.environment.unset(\"incorrectPasswords\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f124efeb-da79-4d20-af9f-a45d9902ed48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2110\");\r",
									"pm.collectionVariables.set(\"testUserLogin\", \"testUser\");\r",
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
									"\r",
									"let incorrectPasswords = pm.environment.get(\"incorrectPasswords\");\r",
									"if (!incorrectPasswords || incorrectPasswords.length == 0){\r",
									"    incorrectPasswords = [\"Centreon2021\", \"centreon!2021\", \"20210102030405\", \"\", \"CENTREON!2021\", \"CentreonTwoThousandTwentyOne\", \"centreon\", \"Cent!2\"];\r",
									"}\r",
									"\r",
									"if(!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.environment.set(\"currentIncorrectPassword\", incorrectPasswords.shift());\r",
									"}\r",
									"pm.environment.set(\"incorrectPasswords\", incorrectPasswords);"
								],
								"type": "text/javascript",
								"id": "2d0b51fe-0458-4077-92fe-fd88ca430361"
							}
						}
					],
					"id": "54f5435b-1248-48f5-95a9-91dab2048a9e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{currentIncorrectPassword}};0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2110-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2b319c45-3bb6-43e9-9dff-5842e0e604e5"
							}
						}
					],
					"id": "0b259898-3d9b-4659-8fdc-46abec08700e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "5e19d6d9-9927-40dc-a82e-8983b04542c3"
		},
		{
			"name": "2111 - Updating the password policy and then creating a user whose password is compliant with the new password policy",
			"item": [
				{
					"name": "[2111] Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2111-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "65c0d296-d9f0-42ba-b4a9-1b0eb2604cc4"
							}
						}
					],
					"id": "292577f6-30c8-4412-997d-025896c80c59",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111] Updating the password policy of a Centreon instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const nextRequestInCaseOfFailure = \"[2111-cleanup] Logout from admin user and clear collection variables\"\r",
									"\r",
									"pm.test(\"The password policy of the instance has been successfully updated.\", function () {\r",
									"    const expectedResponseCode = 204\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4bb9f2c0-f4fe-4d21-a24a-6090738a7157"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let listOfMinimalPasswordLengthConfig = pm.collectionVariables.get(\"listOfMinimalPasswordLengthConfig\");\r",
									"let listOfCurrentUppercaseConfig = pm.collectionVariables.get(\"listOfCurrentUppercaseConfig\");\r",
									"let listOfCurrentLowercaseConfig = pm.collectionVariables.get(\"listOfCurrentLowercaseConfig\");\r",
									"let listOfCurrentNumberConfig = pm.collectionVariables.get(\"listOfCurrentNumberConfig\");\r",
									"let listOfCurrentSpecialParameterConfig = pm.collectionVariables.get(\"listOfCurrentSpecialParameterConfig\");\r",
									"\r",
									"if (!listOfMinimalPasswordLengthConfig || listOfMinimalPasswordLengthConfig.length == 0){\r",
									"    listOfMinimalPasswordLengthConfig = [10, 12, 12, 12, 12];\r",
									"    listOfCurrentUppercaseConfig = [true, false, true, true, true];\r",
									"    listOfCurrentLowercaseConfig = [true, true, false, true, true];\r",
									"    listOfCurrentNumberConfig = [true, true, true, false, true];\r",
									"    listOfCurrentSpecialParameterConfig = [true, true, true, true, false];\r",
									"}\r",
									"\r",
									"if(!pm.collectionVariables.get(\"requestTries\")) {\r",
									"    pm.collectionVariables.set(\"currentMinimalPasswordLength\", listOfMinimalPasswordLengthConfig.shift());\r",
									"    pm.collectionVariables.set(\"currentUppercaseParameter\", listOfCurrentUppercaseConfig.shift());\r",
									"    pm.collectionVariables.set(\"currentLowercaseParameter\", listOfCurrentLowercaseConfig.shift());\r",
									"    pm.collectionVariables.set(\"currentNumberParameter\", listOfCurrentNumberConfig.shift());\r",
									"    pm.collectionVariables.set(\"currentSpecialCharacterParameter\", listOfCurrentSpecialParameterConfig.shift());\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"listOfMinimalPasswordLengthConfig\", listOfMinimalPasswordLengthConfig);\r",
									"pm.collectionVariables.set(\"listOfCurrentUppercaseConfig\", listOfCurrentUppercaseConfig);\r",
									"pm.collectionVariables.set(\"listOfCurrentLowercaseConfig\", listOfCurrentLowercaseConfig);\r",
									"pm.collectionVariables.set(\"listOfCurrentNumberConfig\", listOfCurrentNumberConfig);\r",
									"pm.collectionVariables.set(\"listOfCurrentSpecialParameterConfig\", listOfCurrentSpecialParameterConfig);"
								],
								"type": "text/javascript",
								"id": "9e7e49a0-bb73-4aad-89a5-6a05c5da6cf5"
							}
						}
					],
					"id": "60ac8a35-8632-44f9-983e-3abf06901181",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": {{currentMinimalPasswordLength}},\r\n        \"has_uppercase\": {{currentUppercaseParameter}},\r\n        \"has_lowercase\": {{currentLowercaseParameter}},\r\n        \"has_number\": {{currentNumberParameter}},\r\n        \"has_special_character\": {{currentSpecialCharacterParameter}},\r\n        \"attempts\": 5,\r\n        \"blocking_duration\": 900,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 15552000,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": false,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111] Adding a contact with a password that is compliant with the new password policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2111-cleanup] Bringing back the password policy of a Centreon instance to defaults\"\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been created because the password \" + pm.collectionVariables.get(\"currentCompliantPassword\") + \" matches with the current password policy.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "70b23590-80a8-4d88-b8ae-5675e4fe39b3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"testUserEmail\", \"testUser@localhost\");\r",
									"\r",
									"if(pm.collectionVariables.get(\"currentMinimalPasswordLength\") == 10) {\r",
									"    pm.collectionVariables.set(\"currentCompliantPassword\", \"Centreon2!\");\r",
									"    pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2111-Password-Length\");\r",
									"    pm.collectionVariables.set(\"testUserLogin\", \"testUser-Password-Length\");    \r",
									"} else if (pm.collectionVariables.get(\"currentUppercaseParameter\") == false) {\r",
									"    pm.collectionVariables.set(\"currentCompliantPassword\", \"centreon!2021\");\r",
									"    pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2111-No-Uppercase\");\r",
									"    pm.collectionVariables.set(\"testUserLogin\", \"testUser-No-Uppercase\");     \r",
									"} else if (pm.collectionVariables.get(\"currentLowercaseParameter\") == false) {\r",
									"    pm.collectionVariables.set(\"currentCompliantPassword\", \"CENTREON!2021\");\r",
									"    pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2111-No-Lowercase\");\r",
									"    pm.collectionVariables.set(\"testUserLogin\", \"testUser-No-Lowercase\");    \r",
									"} else if (pm.collectionVariables.get(\"currentNumberParameter\") == false) {\r",
									"    pm.collectionVariables.set(\"currentCompliantPassword\", \"CentreonTwoThousandTwentyOne!\");\r",
									"    pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2111-No-Number\");\r",
									"    pm.collectionVariables.set(\"testUserLogin\", \"testUser-No-Number\");       \r",
									"} else if (pm.collectionVariables.get(\"currentSpecialCharacterParameter\") == false) {\r",
									"    pm.collectionVariables.set(\"currentCompliantPassword\", \"Centreon2021\");\r",
									"    pm.collectionVariables.set(\"testUserName\", \"User-Test-API-2111-No-Special-Character\");\r",
									"    pm.collectionVariables.set(\"testUserLogin\", \"testUser-No-Special-Character\");        \r",
									"}"
								],
								"type": "text/javascript",
								"id": "02cb1429-e6e5-4fb2-9508-873b4ae13efd"
							}
						}
					],
					"id": "09fda45d-08d1-4385-b0ae-98489579d766",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserName}};{{testUserLogin}};{{testUserEmail}};{{currentCompliantPassword}};0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111] Add access to API configuration & realtime to the new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"let values = pm.collectionVariables.get(\"listOfValues\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"reach_api\", \"reach_api_rt\"];\r",
									"    values = [1, 0];\r",
									"}\r",
									"\r",
									"let currentParameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"currentParameter\", currentParameter);\r",
									"pm.collectionVariables.set(\"listOfParameters\", parameters);\r",
									"let currentValue = values.shift();\r",
									"pm.collectionVariables.set(\"currentValue\", currentValue);\r",
									"pm.collectionVariables.set(\"listOfValues\", values);"
								],
								"type": "text/javascript",
								"id": "95a5dfc7-e40b-4793-90c2-41c2950b0195"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2111] Delete the non-admin user\"\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"currentParameter\") + \" was updated with \" + pm.collectionVariables.get(\"currentValue\") + \".\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"\r",
									"    // Looping the request to update every parameter of the listOfParameters list\r",
									"    const parameters = pm.collectionVariables.get(\"listOfParameters\");\r",
									"    if (parameters && parameters.length > 0) {\r",
									"        postman.setNextRequest(\"[2111] Add access to API configuration & realtime to the new user\");\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentParameter\");\r",
									"        pm.collectionVariables.unset(\"currentValue\");\r",
									"        pm.collectionVariables.unset(\"listOfParameters\");\r",
									"        pm.collectionVariables.unset(\"listOfValues\");\r",
									"        postman.setNextRequest(\"[2111] Log out from admin user after non-admin user update\");\r",
									"    }   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0e32ee60-686f-49de-a49a-bbad96b2f627"
							}
						}
					],
					"id": "0167dcbe-33da-4474-acc6-47bce22ebc5c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testUserLogin}};{{currentParameter}};{{currentValue}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111] Log out from admin user after non-admin user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "30abe826-83d4-46c6-b915-b8de84bce21d"
							}
						}
					],
					"id": "83980cef-821d-4638-b3b3-86e9855c32ab",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2111] Login on the newly created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = \"[2111] Login with admin user after non-admin user check\"\r",
									"\r",
									"pm.test(\"The login with the newly created user \" + pm.collectionVariables.get(\"testUserLogin\") + \" and its password \" + pm.collectionVariables.get(\"currentCompliantPassword\") + \" was successful.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get(\"testUserLogin\"));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.false;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "62ef3001-2642-4a67-bc9c-2b34880e718a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "de284bb3-7299-40fc-861f-3c0013790034"
							}
						}
					],
					"id": "884bfac6-f137-4789-b31c-f19757ba9e7f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testUserLogin}}\",\n      \"password\": \"{{currentCompliantPassword}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": []
				},
				{
					"name": "[2111] Log out from the newly created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7ab54cdb-2628-4cb3-99f3-43c56d4e89aa"
							}
						}
					],
					"id": "5633900d-7e22-4954-a470-7d2847be1e25",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "[2111] Login with admin user after non-admin user check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.be.true;\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.name);\r",
									"    pm.environment.set(\"currentUserLogin\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "57a6f1ad-bc6a-44d7-8b06-72ed24d437a9"
							}
						}
					],
					"id": "007bf126-2e08-40e3-80a4-5543ea0d8083",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111] Delete the non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const nextRequestInCaseOfFailure = null\r",
									"\r",
									"pm.test(\"The new user \" + pm.collectionVariables.get(\"testUserName\") + \" has been successfully deleted.\", function () {\r",
									"    const expectedResponseCode = 200\r",
									"    _.setNextRequestBasedOnStatusCode(pm, postman, pm.response, expectedResponseCode, nextRequestInCaseOfFailure);\r",
									"    pm.response.to.have.status(expectedResponseCode);\r",
									"    pm.collectionVariables.unset(\"testUserLogin\");\r",
									"    pm.collectionVariables.unset(\"testUserName\");\r",
									"    pm.collectionVariables.unset(\"currentCompliantPassword\");\r",
									"    pm.collectionVariables.unset(\"testUserEmail\");\r",
									"\r",
									"    // Looping the request from \"[2111] Updating the password policy of a Centreon instance\" to \"[2111] Delete the non-admin user\" until all password policy changes have been checked and applied to a new user\r",
									"    listOfMinimalPasswordLengthConfig = pm.collectionVariables.get(\"listOfMinimalPasswordLengthConfig\")\r",
									"    if (listOfMinimalPasswordLengthConfig && listOfMinimalPasswordLengthConfig.length > 0) {\r",
									"        postman.setNextRequest(\"[2111] Updating the password policy of a Centreon instance\");\r",
									"    } else {\r",
									"        pm.collectionVariables.unset(\"currentMinimalPasswordLength\");\r",
									"        pm.collectionVariables.unset(\"currentUppercaseParameter\");\r",
									"        pm.collectionVariables.unset(\"currentLowercaseParameter\");\r",
									"        pm.collectionVariables.unset(\"currentNumberParameter\");\r",
									"        pm.collectionVariables.unset(\"currentSpecialCharacterParameter\");\r",
									"\r",
									"        pm.collectionVariables.unset(\"listOfMinimalPasswordLengthConfig\");\r",
									"        pm.collectionVariables.unset(\"listOfCurrentUppercaseConfig\");\r",
									"        pm.collectionVariables.unset(\"listOfCurrentLowercaseConfig\");\r",
									"        pm.collectionVariables.unset(\"listOfCurrentNumberConfig\");\r",
									"        pm.collectionVariables.unset(\"listOfCurrentSpecialParameterConfig\");\r",
									"        postman.setNextRequest(\"[2111-cleanup] Bringing back the password policy of a Centreon instance to defaults\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "253cc6e1-2711-4a57-b49f-ae229000a730"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a461079e-6058-43e3-9977-e7ef07ed1259"
							}
						}
					],
					"id": "e8a279f9-1ff2-4530-8a3c-c3182d1b95b4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{testUserLogin}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111-cleanup] Bringing back the password policy of a Centreon instance to defaults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The password policy of the instance has been brought back to defaults.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7ea4072b-b0e5-400e-8c52-2efdd3e7f70c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "29c2f0dd-0b25-4aaa-8e04-5ac5dafd922e"
							}
						}
					],
					"id": "4bad387b-6d70-4319-b0c5-b7ed9b3ce5f3",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password_security_policy\": {\r\n        \"password_min_length\": 12,\r\n        \"has_uppercase\": true,\r\n        \"has_lowercase\": true,\r\n        \"has_number\": true,\r\n        \"has_special_character\": true,\r\n        \"attempts\": 5,\r\n        \"blocking_duration\": 900,\r\n        \"password_expiration\": {\r\n            \"expiration_delay\": 15552000,\r\n            \"excluded_users\": [\r\n                \"centreon-gorgone\"\r\n            ]\r\n        },\r\n        \"can_reuse_passwords\": false,\r\n        \"delay_before_new_password\": 3600\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administration/authentication/providers/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administration",
								"authentication",
								"providers",
								"local"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2111-cleanup] Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"[Cleanup] Logout successful. The expected message is displayed (\\\"Successful logout\\\").\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserLogin\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"    pm.environment.unset(\"currentUserEmail\");\r",
									"    pm.collectionVariables.clear();\r",
									"});"
								],
								"type": "text/javascript",
								"id": "46545c5c-b027-4410-9335-df6dc5d10f33"
							}
						}
					],
					"id": "f323dd8a-ae9b-46f1-8283-5a3b3dbde3d2",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "93039566-0bbc-49c1-8e43-5fa2c90b2c76"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "51d3034d-8bef-4a68-88be-3634c99d5c7d"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.setNextRequestBasedOnStatusCode = (pm, postman, response, expectedResponseCode, nextRequestInCaseOfFailure) => {",
					"    if(expectedResponseCode != response.code) {",
					"        if (!pm.collectionVariables.get(\"requestTries\")) {",
					"            pm.collectionVariables.set(\"requestTries\", 0);",
					"        }",
					"        pm.collectionVariables.set(\"requestTries\", pm.collectionVariables.get(\"requestTries\") + 1);",
					"        if(pm.collectionVariables.get(\"requestTries\") < pm.environment.get(\"maxNumberOfRetries\")) {",
					"            console.log(\"Response does not have the expected status code | Resending the request \\\"\" + pm.info.requestName + \"\\\"... | Number of tries: \" + pm.collectionVariables.get(\"requestTries\"));",
					"            postman.setNextRequest(pm.info.requestName);",
					"        } else {",
					"            pm.collectionVariables.unset(\"requestTries\");",
					"            pm.collectionVariables.unset(\"nextRequestInCaseOfFailure\");",
					"            console.log(\"Response does not have the expected status code | Aborting the current scenario (too many tries)\");",
					"            postman.setNextRequest(nextRequestInCaseOfFailure);",
					"        }",
					"    } else {",
					"        pm.collectionVariables.unset(\"requestTries\");",
					"        console.log(\"Response has the expected status code \" + pm.response.code + \" | Running the next tests\")",
					"    }",
					"  }"
				],
				"id": "07407a1d-baf6-468c-ad46-76d975bef90d"
			}
		}
	]
}