{
	"info": {
		"_postman_id": "7f0209f3-2ff5-41e4-8545-ccfedbb4e7c6",
		"name": "TimePeriod",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-7f0209f3-2ff5-41e4-8545-ccfedbb4e7c6"
	},
	"item": [
		{
			"name": "Log in as Admin        ",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c7e2ae61-be81-4394-b6c1-d3818e700200"
							}
						}
					],
					"id": "29a0e058-84c6-4fda-8d51-30d3aefb9055",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"id": "89c24df0-2f6d-4bea-909b-93d23f9b9652"
		},
		{
			"name": "user_with_RW_rights",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4e06e714-6db3-437c-a798-bbe16b70fd78"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "b44fce31-1a3b-4a44-8c69-01fc1b3c7169"
							}
						}
					],
					"id": "6e3fe6c9-c847-4211-b5a4-09f629ef412e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cecd8b24-6e96-467f-bc5a-02db0e316379"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "de88ddfe-1c62-42e8-95a4-9dd2c695f648"
							}
						}
					],
					"id": "07b22e67-f4a4-48f0-91f9-c8bf44a742bc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2967878a-014c-4dce-bce2-409eef94e625"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b00d88e6-60ef-459d-9a41-3ee8feef27f0"
							}
						}
					],
					"id": "ebd6a862-441a-47f8-b618-792c761d1752",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c999fb7a-64ed-40aa-944d-f7d017da346c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3288a230-4c37-4f75-ad9a-e9ab2c873458"
							}
						}
					],
					"id": "f6f2a79f-66cc-47dd-938f-8dfad6db9d34",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e7f18bab-2a7e-4f9d-92e9-0fd49b3b7441"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9fce1e43-c423-48f7-bf95-b69d6b5aec97"
							}
						}
					],
					"id": "5db6d3d9-f7bd-49e5-b56d-6d5aef8b3e9a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c7beb602-b5f7-428e-8373-a73857149b7e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "50a4588d-fbd2-4c33-ab32-1666c16389cc"
							}
						}
					],
					"id": "9fcf7855-fbf5-4529-8d6f-dac6c21ee090",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6bcd549c-bd54-49f8-8523-aeb31949ce76"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5bcbfbc7-bf96-4ac4-aea4-198934b5ad01"
							}
						}
					],
					"id": "004f3850-107f-49cd-8e55-ec168938a171",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d48601b5-4e8b-4c69-8227-2ba369d123b2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a04e575c-d24b-4236-9f53-39ee7fb326e1"
							}
						}
					],
					"id": "4ccb2783-3307-42ff-9b6a-5658e1b3b2f9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dd467cce-004e-4876-a62e-f5cf5dfaa34e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e1e281c6-6b8b-4fec-9189-97d08917120e"
							}
						}
					],
					"id": "f3e66e5d-5af6-491b-8a5a-80d786432be9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "50b037eb-0a6d-4d9a-9b62-db3627e9ffa8"
		},
		{
			"name": "user_with_R_rights",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bad8091e-113f-4e8f-b454-e0c187e36f99"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "8d50f251-62a8-4573-8b05-15a3a660f3a1"
							}
						}
					],
					"id": "026c3830-b265-4cf4-81ba-75a88dd9fbbe",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "de85361d-8dc0-449a-9a79-eb3ce082f335"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6362c31c-e2ef-4549-a967-fd63f829c7ef"
							}
						}
					],
					"id": "7f103269-c26e-4701-a7bb-1c67cf45c6e0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0fa66838-d7d6-46da-871c-aba89409192a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9b8d72bb-e9cc-412f-b4a1-ad4b57e80678"
							}
						}
					],
					"id": "c649d126-dc36-416e-94b3-b577b2f9cbec",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e08cff1-9c82-4b53-b223-18f7ed1ab570"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a4c6b897-75d1-4e90-83f1-34559601d93e"
							}
						}
					],
					"id": "27be7a07-53e7-438a-8b77-cd9a5825695a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c7434b30-3cb7-457e-b527-e2a377a275d4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2dc9b510-d747-4088-9144-fd4f1624e14d"
							}
						}
					],
					"id": "2625566d-9607-47f3-b852-249f6d8f250e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a04486e7-5943-412a-8b8e-0212ad2fafef"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "be656e69-a69f-4be8-9f70-17252c70247e"
							}
						}
					],
					"id": "17fef076-eac7-48cf-bcdc-e811e10ae3e8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aad848ae-dab4-4a4a-88b7-20bae6f526f9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "32e7d501-0717-464d-b414-f789a1e54830"
							}
						}
					],
					"id": "466d707b-73f4-4c14-bb2b-3ad06de9179f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d9d5b5f4-81a8-43c3-b9da-cefb1603d5bf"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read Only rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "25efd2d7-643d-43d4-81e6-df6db6aaba30"
							}
						}
					],
					"id": "eaab53dc-e2bd-49fd-81ed-58e5fca58e8a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5455cd9f-6984-4284-aef0-eee35d98e497"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cdff9e7f-6a26-4876-a206-6d847d6bfe07"
							}
						}
					],
					"id": "53cd12bd-d31f-4b9f-a96a-8bfa8577a5b1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "4375682b-bc27-4941-9db7-2bddb738c86c"
		},
		{
			"name": "user_nothing",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7f595151-26b8-4d8c-b6f2-c4a37ca029eb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "a011778e-1ab2-4f70-8152-1a4eac9e7692"
							}
						}
					],
					"id": "0d669ad4-0f62-4f95-9519-ef74a8eebfd5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6bc86fbb-6457-45f6-84b7-4e6bd3762153"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d05fee49-608e-47b2-93c4-ee2177a71974"
							}
						}
					],
					"id": "4f63f681-e38e-4cf0-a5e3-e2595dbb8de2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "197ada8e-eea7-4bc7-9587-8b140f030e63"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f5264d7e-f876-4efa-a0d5-c8ce6ad3523a"
							}
						}
					],
					"id": "17ae2996-3f6f-4705-9b6b-398ab5f18b35",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "01018149-919f-47b3-b534-b68b85fd8631"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0df212a5-cdf6-40a6-964b-721e3e8f9e0b"
							}
						}
					],
					"id": "92944fa6-70a7-4745-b1a2-a5ae3806ee88",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d524deca-f6f3-4d8d-b748-2a4fb5c395ab"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8593545a-9989-4000-afd3-e9547cb70070"
							}
						}
					],
					"id": "5edb0905-70fe-4e82-bf71-7015d9db5aca",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00766287-9c03-4f96-ae20-d611070f6164"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "615c956c-83d0-4f70-b952-d55ae62e5756"
							}
						}
					],
					"id": "ca8a4370-204f-4907-8c20-f06e11e019a3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68f332a1-93d7-4486-96a9-4e6b52e29165"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e434546b-efb0-42f5-885d-02a607f81be9"
							}
						}
					],
					"id": "71b3c003-bffc-4704-8a62-8fc775aec907",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1a536f5f-3767-4608-ba4d-00511ef9792e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cf91ea5d-0259-400d-8263-b8ebb7eed90b"
							}
						}
					],
					"id": "73f61ea1-636f-4056-b320-8f03dd2124cc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "9eb35c0d-3786-4772-a342-23ae28c3fd12"
		},
		{
			"name": "Time Period By Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "96ba7b5c-5eba-41f4-8d4e-68496523e568"
							}
						}
					],
					"id": "1f7cd1ce-123b-4c33-a853-1186f06dab24",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The 4 time periods retrieved are listed with; name, alias, days and times, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none\"}).and.to.include({alias:\"Never\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (never)\r",
									"    pm.expect(responseJson.result[1].days).to.be.an('array').that.is.empty;\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates and exceptions of the time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"        pm.expect(responseJson.result[count].exceptions).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "25669917-6f1e-4023-bbc7-1015321b226a"
							}
						}
					],
					"id": "d177d43e-0324-42d3-984c-140ab1d22b92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new timeperiod (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriod1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new time period\r",
									"    pm.collectionVariables.set(\"timePeriod1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"timePeriod1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"timePeriod1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"timePeriod1Alias\")\r",
									"    });\r",
									"    pm.expect(responseJson.days[0]).to.include({day: 1, time_range: \"06:30-07:00\"});\r",
									"    pm.expect(responseJson.days[1]).to.include({day: 7, time_range: \"06:30-07:00,09:00-10:30\"});\r",
									"    pm.expect(responseJson.templates[0]).to.be.include({\r",
									"        \"id\": 1,\r",
									"        \"alias\": \"Always\"\r",
									"    });\r",
									"    pm.expect(responseJson.exceptions[0]).to.include({\r",
									"        \"day_range\": \"monday 1\", \r",
									"        \"time_range\": \"06:00-07:00\"\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "79c423d6-11aa-4703-9ddc-8b59a5df3d96"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriod1Name\", \"test_name\");\r",
									"pm.collectionVariables.set(\"timePeriod1Alias\", \"test_alias\");\r",
									""
								],
								"type": "text/javascript",
								"id": "07d90c43-da74-44aa-91ef-19eb791d66be"
							}
						}
					],
					"id": "9e1f1ab7-2ae1-4c14-9271-ee26cd92f196",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{timePeriod1Name}}\",\n    \"alias\": \"{{timePeriod1Alias}}\",\n    \"days\": [\n        {\n            \"day\": 1,\n            \"time_range\": \"06:30-07:00\"\n        },\n        {\n            \"day\": 7,\n            \"time_range\": \"06:30-07:00,09:00-10:30\"\n        }\n    ],\n    \"templates\": [\n        1\n    ],\n    \"exceptions\": [\n        {\n            \"day_range\": \"monday 1\",\n            \"time_range\": \"06:00-07:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation (5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (5)\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none\"}).and.to.include({alias:\"Never\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"test_name\"}).and.to.include({alias:\"test_alias\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (never)\r",
									"    pm.expect(responseJson.result[1].days).to.be.an('array').that.is.empty;\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 1, 06:30-07:00 / day 7, 06:30-07:00,09:00-10:30)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 1, time_range: \"06:30-07:00\"});\r",
									"    pm.expect(responseJson.result[4].days[1]).to.include({day: 7, time_range: \"06:30-07:00,09:00-10:30\"});\r",
									"\r",
									"    // Check the templates and exceptions used in the first four time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"        pm.expect(responseJson.result[count].exceptions).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"\r",
									"    // Check the templates used in the fifth time period (id = 1)\r",
									"    pm.expect(responseJson.result[4].templates[0].id).to.be.eql(1);\r",
									"    // Check the exception used in the fifth exception (monday 1, 06:00-07:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"monday 1\", time_range: \"06:00-07:00\"});\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a36259d6-94e1-4e9a-9edf-eadd3b235e85"
							}
						}
					],
					"id": "9dfa3754-c5e8-473a-927e-b49a1308ef3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a duplicate name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod1Name\") + \"' could not be created, due to a conflict with an existing time period.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(responseJson.message).to.eql(\"The time period name '\" + pm.collectionVariables.get(\"timePeriod1Name\") + \"' already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "71e9169b-f1a4-4e32-b867-35a09018cbe8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3cd69b00-5612-403d-b6d6-d95452173baa"
							}
						}
					],
					"id": "8c2194c1-2000-4dd4-b442-e34a4e04e086",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name\",\n    \"alias\": \"test_alias_duplicated\",\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a duplicate alias (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod2Alias\") + \"' has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new time period\r",
									"    pm.collectionVariables.set(\"timePeriod2Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"timePeriod2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"timePeriod2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"timePeriod2Alias\")\r",
									"    });\r",
									"    pm.expect(responseJson.days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"    pm.expect(responseJson.templates).to.be.an('array').that.is.empty;\r",
									"    pm.expect(responseJson.exceptions[0]).to.include({\r",
									"        \"day_range\": \"4 tuesday in July\", \r",
									"        \"time_range\": \"00:00-24:00\"\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5823af1e-4030-4d66-854a-0bb5281ce5c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriod2Name\", \"tést_name_with_duplicated_al1as!\");\r",
									"pm.collectionVariables.set(\"timePeriod2Alias\", \"test_alias\");\r",
									""
								],
								"type": "text/javascript",
								"id": "2ccb6822-f8c8-4e33-9a2c-c65b9bb15105"
							}
						}
					],
					"id": "7e78b029-dfdf-4944-9e7a-a617954d16e7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{timePeriod2Name}}\",\n    \"alias\": \"{{timePeriod2Alias}}\",\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with wrong type (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period could not be created, due to a wrong type of value for name and alias.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] Integer value found, but a string is required\\n[alias] Boolean value found, but a string is required\\n\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c2681092-2a1e-4ec5-97ff-9ee20b5960ac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6f2abc61-8d53-4e31-8be7-a176a9522723"
							}
						}
					],
					"id": "3c68b7ed-71e1-4f64-abe1-6f9debae2227",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": 23,\n    \"alias\": true,\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"timePeriod1Name\");\r",
									"    pm.collectionVariables.unset(\"timePeriod1Alias\");\r",
									"    pm.collectionVariables.unset(\"timePeriod1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5e6316d0-8b9f-47ac-bf33-ec2e63301678"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1c00acc4-2798-4dbb-9dfe-50232f839fa9"
							}
						}
					],
					"id": "7d702697-948e-4477-a2c5-5a1e225dbb13",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation and deletion (5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (5)\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none\"}).and.to.include({alias:\"Never\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (never)\r",
									"    pm.expect(responseJson.result[1].days).to.be.an('array').that.is.empty;\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the templates and exceptions of thefirst four time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"        pm.expect(responseJson.result[count].exceptions).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"\r",
									"    // Check the templates of the fifth time periods (none)\r",
									"    pm.expect(responseJson.result[4].templates).to.be.an('array').that.is.empty;\r",
									"    // Check the exception for the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"})"
								],
								"type": "text/javascript",
								"id": "fcb9f07c-fbe8-4f06-82a7-2a0bd0a1e5c8"
							}
						}
					],
					"id": "4c7bc3c0-a135-4bc8-9c31-602af75811ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The time period has been successfully updated, with name 'none_updated' and alias 'Never ever'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2a9cf66d-bdd8-4b69-bd40-a486248eb122"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1b2b12a0-ae46-49db-9984-d1f06ae79c63"
							}
						}
					],
					"id": "732e5a06-c0db-4f85-90d1-ac0d76a018c2",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"none_updated\",\r\n    \"alias\": \"Never ever\",\r\n    \"days\": [\r\n        {\r\n            \"day\": 7,\r\n            \"time_range\": \"06:30-10:30\"\r\n        }\r\n    ],\r\n    \"templates\": [],\r\n    \"exceptions\": [\r\n        {\r\n            \"day_range\": \"monday 2\",\r\n            \"time_range\": \"06:00-16:00\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a new time period with a duplicate name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name 'nonworkhours' could not be updated, due to a conflict with an existing time period.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(responseJson.message).to.eql(\"The time period name 'none_updated' already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e3ec8294-b9ab-4ae3-8b2c-aca66ca5d75f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3cbcf831-049a-4f44-bc03-e716471857b3"
							}
						}
					],
					"id": "54de02c4-f117-4961-bdf3-3bdc5bbbcaa0",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"none_updated\",\n    \"alias\": \"test_alias_duplicated\",\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show only one time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the name and alias of the time period\r",
									"    pm.expect(responseJson).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"\r",
									"    // Check the schedule of the time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the templates used in the time periods (none)\r",
									"    pm.expect(responseJson.templates).to.be.an('array').that.is.empty;\r",
									"\r",
									"    // Check the exception of the time periods (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ded04552-93a7-41e1-bf30-fdad617beb62"
							}
						}
					],
					"id": "ff79beb9-2eb0-4098-b04f-2cea417952d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a empty name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with an empty name could not be created, due to the name being mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewTimePeriod::name] The value \\\"\\\" is too short, it should have at least 1 characters, but only has 0 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "11cf1311-0af6-48c5-8fcb-6a77c27834d1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ee42a4ec-57f8-4a26-b994-3becca6d3c2a"
							}
						}
					],
					"id": "6753c93e-03a6-428d-90ed-5e6b13fedce3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"alias\": \"test_alias_with_empty_name\",\n    \"days\": [],\n    \"templates\": [],\n    \"exceptions\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a empty alias (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name 'test_name_with_empty_alias' and an empty name could not be created, due to the alias being mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewTimePeriod::alias] The value \\\"\\\" is too short, it should have at least 1 characters, but only has 0 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a5979990-fa71-4a2b-816a-1a1da2393aef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "03ec1ddc-9832-484a-994b-e7ac81717cb1"
							}
						}
					],
					"id": "fe33ef21-62f8-4339-9c3e-0188ac23350a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_with_empty_alias\",\n    \"alias\": \"\",\n    \"days\": [],\n    \"templates\": [],\n    \"exceptions\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after update (5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (5)\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the templates of the first four time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"\r",
									"    // Check the exception of the first time period (none)   \r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exception of the second time period (monday 2, 06:00-16:00)   \r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exception of the third time period (none)   \r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exception of the fourth time period (none)   \r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exception of the fifth time period (4 tuesday in July, 00:00-24:00)  \r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e265f282-b0fa-402d-a8a2-877f52afa044"
							}
						}
					],
					"id": "2fe19c3f-9fa7-4655-b561-8c834aa23c21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c7164cdc-d5c1-4f20-baa2-dbd8ac4e0ffa"
							}
						}
					],
					"id": "80771507-ef3a-405f-8d13-453a12c7014e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "eea96fac-415b-4917-bed4-85f0f6a21b38"
		},
		{
			"name": "Time Period By User with Read/Write Right",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6897ceed-6f63-41e8-94ba-6d49c04b8336"
							}
						}
					],
					"id": "61898422-e9cd-4422-9f76-add4ef556a55",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods (5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (5)\r",
									"    pm.expect(responseJson.result.length).to.eql(5);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the templates of the time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"\r",
									"    // Check the exceptions of the first time periods (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time periods (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time periods (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time periods (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time periods (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"})"
								],
								"type": "text/javascript",
								"id": "891b3465-09bd-4c28-a38e-e6d5cefcba6f"
							}
						}
					],
					"id": "cbd5aff7-c19d-45cd-b971-c3f6db2c115f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period has been successfully created, with name '\" + pm.collectionVariables.get(\"timePeriod3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new time period\r",
									"    pm.collectionVariables.set(\"timePeriod3Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"timePeriod3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"timePeriod3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"timePeriod3Alias\")\r",
									"    });\r",
									"    pm.expect(responseJson.days[0]).to.include({day: 2, time_range: \"23:59-24:00\"});\r",
									"    pm.expect(responseJson.days[1]).to.include({day: 4, time_range: \"00:01-07:02\"});\r",
									"    pm.expect(responseJson.days[2]).to.include({day: 6, time_range: \"00:01-07:02,23:59-24:00\"});\r",
									"    pm.expect(responseJson.templates[0]).to.be.eql({\r",
									"        \"id\": pm.collectionVariables.get(\"timePeriod2Id\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"timePeriod2Alias\")\r",
									"    });\r",
									"    pm.expect(responseJson.exceptions).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a05b9f3c-ed01-4350-a8ee-88d65a502ddf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriod3Name\", \"test_name_by_ûser_RW\");\r",
									"pm.collectionVariables.set(\"timePeriod3Alias\", \"test_#l1as_by_user_RW\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "61d9e7a4-ff7e-4996-9968-06931b76a784"
							}
						}
					],
					"id": "c0ba2ae7-cb2d-4d3e-9dbc-0829f949c8be",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{timePeriod3Name}}\",\n    \"alias\": \"{{timePeriod3Alias}}\",\n    \"days\": [\n        {\n            \"day\": 2,\n            \"time_range\": \"23:59-24:00\"\n        },\n        {\n            \"day\": 4,\n            \"time_range\": \"00:01-07:02\"\n        },\n        {\n            \"day\": 6,\n            \"time_range\": \"00:01-07:02,23:59-24:00\"\n        }\n    ],\n    \"templates\": [\n        {{timePeriod2Id}}\n    ],\n    \"exceptions\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6)\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"test_name_by_ûser_RW\"}).and.to.include({alias:\"test_#l1as_by_user_RW\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period\r",
									"    // (day 2, 23:59-24:00)\r",
									"    pm.expect(responseJson.result[5].days[0]).to.include({day: 2, time_range: \"23:59-24:00\"});\r",
									"    // (day 4, 00:01-07:02)\r",
									"    pm.expect(responseJson.result[5].days[1]).to.include({day: 4, time_range: \"00:01-07:02\"});\r",
									"    // (day 6, 00:01-07:02,23:59-24:00)\r",
									"    pm.expect(responseJson.result[5].days[2]).to.include({day: 6, time_range: \"00:01-07:02,23:59-24:00\"});\r",
									"\r",
									"    // Check the templates of the first five time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = TimePeriodDuplicateAliasId)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(pm.collectionVariables.get(\"timePeriod2Id\"));\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (none)\r",
									"    pm.expect(responseJson.result[5].exceptions).to.be.an('array').that.is.empty;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6e17f1c1-bb04-4900-90f3-aaaa6934615c"
							}
						}
					],
					"id": "750df385-f909-4390-a5fc-89669bf95dfb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a duplicate name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period could not be created, due to a conflict with an existing time period.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(responseJson.message).to.eql(\"The time period name 'test_name_by_user_RW' already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6f4d68be-9232-4f1d-98e4-63b9d3b89ad0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "304711bd-fad5-45a8-85d6-83c8b2e79b3c"
							}
						}
					],
					"id": "b3d45bd8-2c76-475e-aef1-8616ca8d017f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_by_user_RW\",\n    \"alias\": \"test_alias_by_user_RW_duplicated\",\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a duplicate alias (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod4Alias\") + \"' has been successfully created.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    \r",
									"    // Creation of a variable with the ID of the new time period\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"timePeriod4Id\", response.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"timePeriod4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"timePeriod4Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"timePeriod4Alias\")\r",
									"    });\r",
									"    pm.expect(responseJson.days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"    pm.expect(responseJson.exceptions[0]).to.be.include({\r",
									"        \"day_range\": \"4 tuesday in July\",\r",
									"        \"time_range\": \"00:00-24:00\"\r",
									"    });\r",
									"    pm.expect(responseJson.templates).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0b5a8115-cd82-442e-a335-4f2fd72371df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriod4Name\", \"test_name_duplicated\");\r",
									"pm.collectionVariables.set(\"timePeriod4Alias\", \"test_alias\");\r",
									""
								],
								"type": "text/javascript",
								"id": "ca6bd3cd-3260-4a1e-9675-8fed2348131d"
							}
						}
					],
					"id": "cf005423-8f57-4781-ae72-b4ee181c5ecf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_duplicated\",\n    \"alias\": \"test_alias\",\n    \"days\": [\n        {\n            \"day\": 3,\n            \"time_range\": \"00:00-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n        {\n            \"day_range\": \"4 tuesday in July\",\n            \"time_range\": \"00:00-24:00\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with wrong type (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period could not be created, due to a wrong type of value for days, templates and exceptions.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[days[0].day] String value found, but an integer is required\\n[days[0].time_range] NULL value found, but a string is required\\n[templates[0]] String value found, but an integer is required\\n[exceptions[0].day_range] Integer value found, but a string is required\\n[exceptions[0].time_range] Boolean value found, but a string is required\\n\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fe92808e-4653-4aee-8caf-1a129b275a52"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4256b02-8484-4a79-a703-2b8806e998f6"
							}
						}
					],
					"id": "98239056-1d87-4bec-a679-32f2a37fa849",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Wrong_type_for_days_templates_and_exceptions\",\n    \"alias\": \"Wrong_type_for_days_templates_and_exceptions\",\n    \"days\": [\n        {\n            \"day\": \"Hola\",\n            \"time_range\": null\n        }\n    ],\n    \"templates\": [\"try\"],\n    \"exceptions\": [\n        {\n            \"day_range\":2,\n            \"time_range\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod4Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    \r",
									"    pm.collectionVariables.unset(\"timePeriod4Name\");\r",
									"    pm.collectionVariables.unset(\"timePeriod4Alias\");\r",
									"    pm.collectionVariables.unset(\"timePeriod4Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "beb96740-6d78-41fd-86b4-a4b117f97ab0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ff24cbb-5e3d-4b2f-9c9c-a710f89102ee"
							}
						}
					],
					"id": "ccfe089c-dc1a-450d-a92d-496ac3e0f9cb",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation and deletion (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6)\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"test_name_by_ûser_RW\"}).and.to.include({alias:\"test_#l1as_by_user_RW\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period\r",
									"    // (day 2, 23:59-24:00)\r",
									"    pm.expect(responseJson.result[5].days[0]).to.include({day: 2, time_range: \"23:59-24:00\"});\r",
									"    // (day 4, 00:01-07:02)\r",
									"    pm.expect(responseJson.result[5].days[1]).to.include({day: 4, time_range: \"00:01-07:02\"});\r",
									"    // (day 6, 00:01-07:02,23:59-24:00)\r",
									"    pm.expect(responseJson.result[5].days[2]).to.include({day: 6, time_range: \"00:01-07:02,23:59-24:00\"});\r",
									"\r",
									"    // Check the templates and exceptions of the first five time periods (none)\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"     // Check the templates of the sixth time period (id = TimePeriodDuplicateAliasId)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(pm.collectionVariables.get(\"timePeriod2Id\"));\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (none)\r",
									"    pm.expect(responseJson.result[5].exceptions).to.be.an('array').that.is.empty;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b8aadc2f-0aa6-422a-af38-faad54255f46"
							}
						}
					],
					"id": "266bcecf-c56b-4b6c-8d6b-d9a379e93345",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The time period has been successfully updated, with name '\" + pm.collectionVariables.get(\"timePeriod3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "a997e5ce-6942-4a12-9d5a-eb35ac1cfdbf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriod3Name\", \"24x7-v2\");\r",
									"pm.collectionVariables.set(\"timePeriod3Alias\", \"24_Hours_A_Day,_7_Days_A_Week\");"
								],
								"type": "text/javascript",
								"id": "9a0affe2-0c47-41c0-8e78-a01773a95cd5"
							}
						}
					],
					"id": "c24d932b-fa06-448b-8b9b-38346c3478c8",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"24x7-v2\",\r\n    \"alias\": \"24_Hours_A_Day,_7_Days_A_Week\",\r\n    \"days\": [\r\n        {\r\n            \"day\": 1,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 2,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 3,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 4,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 5,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 6,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 7,\r\n            \"time_range\": \"00:00-24:00\"\r\n        }\r\n    ],\r\n    \"templates\": [1],\r\n    \"exceptions\": [{\r\n            \"day_range\": \"wednesday 4\",\r\n            \"time_range\": \"06:00-17:00\"\r\n        }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show only one time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the name and alias of the time period\r",
									"    pm.expect(responseJson).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"\r",
									"    // Check the schedule of the time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.days.length; count++) {\r",
									"        pm.expect(responseJson.days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates and exceptions used in the time periods (none)\r",
									"    pm.expect(responseJson.templates).to.be.an('array').that.is.empty;\r",
									"    pm.expect(responseJson.exceptions).to.be.an('array').that.is.empty;\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1863da88-3496-4d95-8a18-601562e013fa"
							}
						}
					],
					"id": "979a9eaa-d30d-42c8-a633-f64658e88b18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a empty name (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with an empty name could not be created, due to the name being mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewTimePeriod::name] The value \\\"\\\" is too short, it should have at least 1 characters, but only has 0 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "db23c826-0ae0-46b3-9e45-dd600bde9ff3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "76883f52-75dc-4de1-ac18-ce022869485d"
							}
						}
					],
					"id": "22f35486-03a0-4f26-990b-9a3fa53222b1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"alias\": \"test_alias_with_empty_name\",\n    \"days\": [],\n    \"templates\": [],\n    \"exceptions\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period with a empty alias (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name 'test_name_with_empty_alias' and an empty name could not be created, due to the alias being mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewTimePeriod::alias] The value \\\"\\\" is too short, it should have at least 1 characters, but only has 0 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9e4cc7ca-607c-4066-993b-e35d61b1e7b5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b8d7eb36-d36f-4251-9283-250ef37d58ca"
							}
						}
					],
					"id": "fe1ae8f3-2d07-48de-8300-5d3e891ea02e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_with_empty_alias\",\n    \"alias\": \"\",\n    \"days\": [],\n    \"templates\": [],\n    \"exceptions\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after update (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6))\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"24x7-v2\"}).and.to.include({alias:\"24_Hours_A_Day,_7_Days_A_Week\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period (everyday, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[5].days.length; count++) {\r",
									"        pm.expect(responseJson.result[5].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates of the first five time periods\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = 1)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(1);\r",
									"\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (wednesday 4, 06:00-17:00)\r",
									"    pm.expect(responseJson.result[5].exceptions[0]).to.include({day_range: \"wednesday 4\", time_range: \"06:00-17:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "38c3d54e-739e-4c3f-8c7c-582877659f0f"
							}
						}
					],
					"id": "b7cd0a08-aca3-49f1-a253-d59e679c8e52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from RW user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "65604ef9-c50f-401c-8ef8-99ef129e5ebd"
							}
						}
					],
					"id": "bc97c03d-298e-46d9-82de-f3af3cc5cdda",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "e6134b44-314b-46de-9d9f-135ec147f0d2"
		},
		{
			"name": "Time Period By User with Read Only Right",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "522a1ce3-db90-48ed-aa73-a8e4fc77a622"
							}
						}
					],
					"id": "9e9f3df0-bf26-4043-a522-c2a1e96ecf2c",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6))\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"24x7-v2\"}).and.to.include({alias:\"24_Hours_A_Day,_7_Days_A_Week\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period (everyday, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[5].days.length; count++) {\r",
									"        pm.expect(responseJson.result[5].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates of the first five time periods\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = 1)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(1);\r",
									"\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (wednesday 4, 06:00-17:00)\r",
									"    pm.expect(responseJson.result[5].exceptions[0]).to.include({day_range: \"wednesday 4\", time_range: \"06:00-17:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e4dfae06-1f9a-4b4c-aa36-90f1d8463279"
							}
						}
					],
					"id": "941737a8-3691-4407-9b15-18cec5cac34e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period has not been  created, because the user does have the corrects rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "74a4a784-8bc4-4656-bc6c-791a8828a422"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b884d9c5-e117-4b85-9017-f10e294df4d2"
							}
						}
					],
					"id": "656e7be5-9c7c-4e4a-8c48-1afdb74ce00d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_by_user_Read\",\n    \"alias\": \"test_alias_by_user_Read\",\n    \"days\": [\n        {\n            \"day\": 2,\n            \"time_range\": \"23:59-24:00\"\n        },\n        {\n            \"day\": 4,\n            \"time_range\": \"00:01-07:02\"\n        },\n        {\n            \"day\": 6,\n            \"time_range\": \"00:01-07:02,23:59-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6))\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"24x7-v2\"}).and.to.include({alias:\"24_Hours_A_Day,_7_Days_A_Week\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period (everyday, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[5].days.length; count++) {\r",
									"        pm.expect(responseJson.result[5].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates of the first five time periods\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = 1)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(1);\r",
									"\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (wednesday 4, 06:00-17:00)\r",
									"    pm.expect(responseJson.result[5].exceptions[0]).to.include({day_range: \"wednesday 4\", time_range: \"06:00-17:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d74fa45a-375b-456a-8c1c-85ebd74c2c84"
							}
						}
					],
					"id": "b6d5f42f-2325-45dc-993b-8d54a5596bbe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name 'nonworkhours' has not been deleted, because the user does not have the correct rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c0b8f2ca-aba4-468a-907f-2cce28c0f66e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4ab4556-6f7f-45f2-86f3-48a9604bc6d8"
							}
						}
					],
					"id": "3aafd2eb-c395-4a74-8e49-afc91f4af0ef",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after creation and deletion (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6))\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"24x7-v2\"}).and.to.include({alias:\"24_Hours_A_Day,_7_Days_A_Week\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period (everyday, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[5].days.length; count++) {\r",
									"        pm.expect(responseJson.result[5].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates of the first five time periods\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = 1)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(1);\r",
									"\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (wednesday 4, 06:00-17:00)\r",
									"    pm.expect(responseJson.result[5].exceptions[0]).to.include({day_range: \"wednesday 4\", time_range: \"06:00-17:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ecbdba6a-17eb-4009-b25d-354667cfa50c"
							}
						}
					],
					"id": "e15634ec-8961-457e-8d56-cbd4c9f3ffdb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period has not been updated, because the user does not have the corretcs rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "3181100d-24e9-4fc7-b76e-02f67873cedc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0dcbc65e-5269-49f8-9770-ed6b4d24b29e"
							}
						}
					],
					"id": "3982f933-ab88-40b3-8875-79073024374e",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"24x7-v2\",\r\n    \"alias\": \"24_Hours_A_Day,_7_Days_A_Week\",\r\n    \"days\": [\r\n        {\r\n            \"day\": 1,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 2,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 3,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 4,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 5,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 6,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 7,\r\n            \"time_range\": \"00:00-24:00\"\r\n        }\r\n    ],\r\n    \"templates\": [1],\r\n    \"exceptions\": [{\r\n            \"day_range\": \"wednesday 4\",\r\n            \"time_range\": \"06:00-17:00\"\r\n        }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show only one time period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the name and alias of the time period\r",
									"    pm.expect(responseJson).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"\r",
									"    // Check the schedule of the time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.days.length; count++) {\r",
									"        pm.expect(responseJson.days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates and exceptions of the time period (none)\r",
									"    pm.expect(responseJson.templates).to.be.an('array').that.is.empty;\r",
									"    pm.expect(responseJson.exceptions).to.be.an('array').that.is.empty;\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "63af64aa-032a-462f-9278-cbc27324aa52"
							}
						}
					],
					"id": "f0e70a9a-cd09-4536-95c6-f49de130705d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods after update (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of time periods has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time periods are listed with their alias, days, templates and exceptions\", function() {\r",
									"    // Check the number of time periods (6))\r",
									"    pm.expect(responseJson.result.length).to.eql(6);\r",
									"\r",
									"    // Check the name and alias of each time period\r",
									"    pm.expect(responseJson.result[0]).to.include({name:\"24x7\"}).and.to.include({alias:\"Always\"});\r",
									"    pm.expect(responseJson.result[1]).to.include({name:\"none_updated\"}).and.to.include({alias:\"Never ever\"});\r",
									"    pm.expect(responseJson.result[2]).to.include({name:\"nonworkhours\"}).and.to.include({alias:\"Non-Work Hours\"});\r",
									"    pm.expect(responseJson.result[3]).to.include({name:\"workhours\"}).and.to.include({alias:\"Work hours\"});\r",
									"    pm.expect(responseJson.result[4]).to.include({name:\"tést_name_with_duplicated_al1as!\"}).and.to.include({alias:\"test_alias\"});\r",
									"    pm.expect(responseJson.result[5]).to.include({name:\"24x7-v2\"}).and.to.include({alias:\"24_Hours_A_Day,_7_Days_A_Week\"});\r",
									"\r",
									"    // Check the schedule of the first time period (every days, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[0].days.length; count++) {\r",
									"        pm.expect(responseJson.result[0].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the second time period (day 7, 06:30-10:30)\r",
									"    pm.expect(responseJson.result[1].days[0]).to.include({day: 7, time_range: \"06:30-10:30\"});\r",
									"\r",
									"    // Check the schedule of the third time period (non-work hours)\r",
									"    // (during work days, 00:00-09:00,17:00)\r",
									"    for(let count = 0; count < responseJson.result[2].days.length-2; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-09:00,17:00-24:00\"});\r",
									"    }\r",
									"    // (during weekends, 00:00-24:00)\r",
									"    for(let count = 5; count < responseJson.result[2].days.length; count++) {\r",
									"        pm.expect(responseJson.result[2].days[count]).to.eql({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fourth time period (during work days, 09:00-17:00)\r",
									"    for(let count = 0; count < responseJson.result[3].days.length; count++) {\r",
									"        pm.expect(responseJson.result[3].days[count]).to.eql({day: count+1, time_range: \"09:00-17:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the schedule of the fifth time period (day 3, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].days[0]).to.include({day: 3, time_range: \"00:00-24:00\"});\r",
									"\r",
									"    // Check the schedule of the sixth time period (everyday, 00:00-24:00)\r",
									"    for(let count = 0; count < responseJson.result[5].days.length; count++) {\r",
									"        pm.expect(responseJson.result[5].days[count]).to.include({day: count+1, time_range: \"00:00-24:00\"});\r",
									"    }\r",
									"\r",
									"    // Check the templates of the first five time periods\r",
									"    for(let count = 0; count < responseJson.result.length-1; count++) {\r",
									"        pm.expect(responseJson.result[count].templates).to.be.an('array').that.is.empty;\r",
									"    }\r",
									"    // Check the templates of the sixth time period (id = 1)\r",
									"    pm.expect(responseJson.result[5].templates[0].id).to.be.eql(1);\r",
									"\r",
									"\r",
									"    // Check the exceptions of the first time period (none)\r",
									"    pm.expect(responseJson.result[0].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the second time period (monday 2, 06:00-16:00)\r",
									"    pm.expect(responseJson.result[1].exceptions[0]).to.include({day_range: \"monday 2\", time_range: \"06:00-16:00\"});\r",
									"    // Check the exceptions of the third time period (none)\r",
									"    pm.expect(responseJson.result[2].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fourth time period (none)\r",
									"    pm.expect(responseJson.result[3].exceptions).to.be.an('array').that.is.empty;\r",
									"    // Check the exceptions of the fifth time period (4 tuesday in July, 00:00-24:00)\r",
									"    pm.expect(responseJson.result[4].exceptions[0]).to.include({day_range: \"4 tuesday in July\", time_range: \"00:00-24:00\"});\r",
									"    // Check the exceptions of the sixth time period (wednesday 4, 06:00-17:00)\r",
									"    pm.expect(responseJson.result[5].exceptions[0]).to.include({day_range: \"wednesday 4\", time_range: \"06:00-17:00\"});\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3b97adbf-d5db-4b87-a810-bfec8a7e4fee"
							}
						}
					],
					"id": "d405a0f1-bc32-4ebe-a4c7-5eb21b75b039",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ef936de3-0ba1-409a-b04d-d699d0774746"
							}
						}
					],
					"id": "c7bab575-b7c0-4096-9b50-b1f133e4720b",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "383fc280-c137-4e1e-aa6d-f04ff7b38108"
		},
		{
			"name": "Time Period By User with No Access",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8bc774f3-5f60-4947-a0de-266c9278e450"
							}
						}
					],
					"id": "30488788-9fb8-4f57-b497-0f7a1e2cd711",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The time period has not been  created, because the user does have the corrects rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "510c674e-5b1e-48b1-94ef-333e676e24f1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"timePeriodName\", \"test_name_by_user_RW\");\r",
									"pm.collectionVariables.set(\"timePeriodAlias\", \"test_alias_by_user_RW\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "62c6319c-f29c-462d-9f56-7653a5ca0343"
							}
						}
					],
					"id": "e9776bb6-e5db-44f4-898c-5a16fc36c9d9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_name_by_user_with_no_access\",\n    \"alias\": \"test_alias_by_user_with_no_access\",\n    \"days\": [\n        {\n            \"day\": 2,\n            \"time_range\": \"23:59-24:00\"\n        },\n        {\n            \"day\": 4,\n            \"time_range\": \"00:01-07:02\"\n        },\n        {\n            \"day\": 6,\n            \"time_range\": \"00:01-07:02,23:59-24:00\"\n        }\n    ],\n    \"templates\": [],\n    \"exceptions\": [\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period with name 'nonworkhours' has not been deleted, because the user does not have the correct rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "af7f912b-2167-4a32-9bfd-ed389a6efdcb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "42f1f58c-a656-4a12-a640-853f5fb133a5"
							}
						}
					],
					"id": "fb67bf39-7128-4350-a55b-e62a6d503458",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The time period has not been updated, because the user does not have the corretcs rights.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit time periods\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "fd8f027c-dc9f-4030-8532-990f376358c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "406a497d-a51e-4961-81ee-b0d7f76fcafe"
							}
						}
					],
					"id": "243db868-ea36-41e9-af3f-962140107eb4",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"24x7-v2\",\r\n    \"alias\": \"24_Hours_A_Day,_7_Days_A_Week\",\r\n    \"days\": [\r\n        {\r\n            \"day\": 1,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 2,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 3,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 4,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 5,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 6,\r\n            \"time_range\": \"00:00-24:00\"\r\n        },\r\n        {\r\n            \"day\": 7,\r\n            \"time_range\": \"00:00-24:00\"\r\n        }\r\n    ],\r\n    \"templates\": [1],\r\n    \"exceptions\": [{\r\n            \"day_range\": \"wednesday 4\",\r\n            \"time_range\": \"06:00-17:00\"\r\n        }]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time period (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"List of time periods can't be displayed.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access time periods\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bb0f753c-aaf0-4bf9-a5a7-22f654e505f6"
							}
						}
					],
					"id": "6cc1374a-497c-40b0-af23-3e46e4dd6ffa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available time periods (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"List of time periods can't be displayed.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access time periods\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d1ba2b9f-bb14-4afd-8884-4aad196b747e"
							}
						}
					],
					"id": "91c5b26b-ccda-42e0-bd10-73c12b156c60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b936d7fd-f909-4622-85a8-ef81ac7facab"
							}
						}
					],
					"id": "a25e8c58-b371-4233-bdf3-2fd079941fdd",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "3d02d6ac-eb6a-4d14-becc-943a877747d5"
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "39b0925f-cef1-4e49-a29b-8e5bc4528963"
							}
						}
					],
					"id": "372e1f78-a247-4b4f-b880-138be4568f62",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The time period has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "e2fc5230-d3e5-490b-aaba-10e6a980d9c5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "265563b6-17e2-4251-b233-47be086c8026"
							}
						}
					],
					"id": "c08ae853-62c8-468d-8b28-85922e0ad4de",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"none\",\r\n    \"alias\": \"Never\",\r\n    \"days\": [],\r\n    \"templates\": [],\r\n    \"exceptions\": []\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"timePeriod2Name\");\r",
									"    pm.collectionVariables.unset(\"timePeriod2Alias\");\r",
									"    pm.collectionVariables.unset(\"timePeriod2Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "919b5694-3704-4bea-a698-decad2b53129"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a5fd2964-90c6-4894-a92f-0fa36e3b8db6"
							}
						}
					],
					"id": "1916b612-3307-44a8-9be6-12fc5b35c793",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a time period (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The time period with name '\" + pm.collectionVariables.get(\"timePeriod3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"timePeriod3Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"timePeriod3Name\");\r",
									"    pm.collectionVariables.unset(\"timePeriod3Alias\");\r",
									"    pm.collectionVariables.unset(\"timePeriod3Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2329b743-9425-47b8-ac99-cf1138b4a5cd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "99b65fe5-94d6-4e03-a7c4-5f6ba0d0bee8"
							}
						}
					],
					"id": "4a1bdcc9-cf22-4d7b-b894-228f931d8e02",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/timeperiods/{{timePeriod3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"timeperiods",
								"{{timePeriod3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0ed66e35-c4c4-4af0-961b-be773cf4be49"
							}
						}
					],
					"id": "fdce188d-189a-482c-afd7-5f6c31d4f134",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "c73054a6-896c-4bc4-b1cb-3273e5b37f4f"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "b1b2129f-0ba7-4d59-b5d1-94470e350613"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "2107a67c-067a-4a08-a9ed-efe0c90316f9"
			}
		}
	]
}