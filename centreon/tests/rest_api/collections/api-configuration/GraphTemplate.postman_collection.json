{
	"info": {
		"_postman_id": "a62116c7-c689-49c9-bf49-d200a511b378",
		"name": "GraphTemplate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-a62116c7-c689-49c9-bf49-d200a511b378"
	},
	"item": [
		{
			"name": "Log in as Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "57d4441c-1bde-479f-ae17-7a3959b15fea"
							}
						}
					],
					"id": "becab375-b21d-4d06-9c80-2fb30df77adf",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"id": "4c810352-e520-4f5a-96e6-e5a16259af9b"
		},
		{
			"name": "user_with_RW_rights",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "065010df-046d-4def-813f-70b51fc07d44"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "32fbe741-8a5a-4615-8e05-625e4efc0f0b"
							}
						}
					],
					"id": "99fa4a5f-04f7-4484-82d0-61d58c0d1e4e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "059e6bf9-6a31-4ce6-ba34-76e2d58bce0d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9ced8e20-5999-4083-8a23-fe56653efd76"
							}
						}
					],
					"id": "65ba1e01-1815-4487-8e34-fbff786d674d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f71c4e4d-1c13-4aa8-913e-53c3fa811072"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "85e25454-8fea-4329-8561-4472162ff1e7"
							}
						}
					],
					"id": "e068c099-4431-475e-8524-9d55b6e0d5dc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "acaf699c-3bee-4fdf-95fa-da08929c6787"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7169d98a-6ac3-4ddf-9c5c-2e96c94fb447"
							}
						}
					],
					"id": "b682571d-412c-441b-881d-7c8fad7c3f02",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6f6ce0d-40bb-4a03-b171-c072276ca7bb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6830a725-6246-43ea-a885-a45d47bbb97d"
							}
						}
					],
					"id": "623c109d-bb1b-44b5-b2da-bfcbf71aeba9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f232b0e5-ab12-4d0f-8d50-04afc04a6fe6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "93138526-61f0-4a28-b1fb-19d10c7344ab"
							}
						}
					],
					"id": "9b4c7bfd-ca8e-4189-b226-3b597d82844b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2e1bf4da-fdcf-41a3-b360-34b1c0e14d69"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8f5dad0c-8fa0-4fa4-8de4-05c994d66519"
							}
						}
					],
					"id": "b768efb5-64b3-427e-9903-95ace154a43c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8d1f58d4-c279-4f8f-837a-be41f4c402ea"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "652641e6-cb0e-4ff9-a2f8-b3aef557268b"
							}
						}
					],
					"id": "ce352823-1efa-4a68-ba93-1d14dca7882e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Monitoring\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d4b58848-f7b2-4404-957d-c2510b5bb042"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bfdc1216-4708-4e78-8c8d-e05501589422"
							}
						}
					],
					"id": "66b17d5a-4154-4748-ba4b-2e1e5609a580",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "85d2e1b4-1a1b-4ae6-97cb-fcb0bbe2f114"
		},
		{
			"name": "user_with_R_rights",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "427294a8-a381-4d35-8051-a2b3ba089b6c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "b500fb58-1545-4084-8ac2-bba58bf4e738"
							}
						}
					],
					"id": "569a35e9-cbab-4187-917f-364e260e208a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7369a88e-275b-4271-b9e4-e97e3bfd691a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a66c8d78-ed4d-40ed-87a1-8ebc5d31f66e"
							}
						}
					],
					"id": "1b03d117-95e9-4709-8a6d-e03ebe2275aa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "465212eb-5cfd-4bee-97f2-9b9ca5852de0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e323c469-1165-46ed-9cea-4b8834029e07"
							}
						}
					],
					"id": "7012fff2-973d-4d13-9be2-dbe91ad49e82",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc7f3568-e7ca-4148-a330-ab68c447d86c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b9691a45-e19d-41cf-8640-9c8380eee0dc"
							}
						}
					],
					"id": "0febc155-267b-408c-b387-1e1100231e1e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a2341c17-0e1d-4e9d-a85c-103e39a9b6e8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1b79a546-65a4-409e-b51c-a04adfc07c59"
							}
						}
					],
					"id": "9c654f44-ce7c-40d3-b2c2-fe02394be0c5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f24b00a2-c3cb-4947-abb5-f831611e6ae8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1e7b403a-b73b-47b2-be45-73eb713e6772"
							}
						}
					],
					"id": "4894241f-6946-4e12-975a-f5052b4f8d83",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e7374c8-0b97-4e3b-8a63-105a9d940287"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b852365d-a0fb-4411-8f2f-476a64433dd1"
							}
						}
					],
					"id": "aef4404d-6325-4a0d-a012-82053bdf8d5a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b2dcac47-df1e-445f-9baa-3c795dcc0603"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read Only rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e2547644-1681-47b3-a423-27e7f086c324"
							}
						}
					],
					"id": "2523a929-c08f-4865-8593-bc408c076cdd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Monitoring\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "46996f91-1236-46b5-9a0e-288ae7db1b25"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3b059ce0-8f2e-4e65-ac2f-32962b0ba781"
							}
						}
					],
					"id": "9fa5a5d5-b945-44ea-8c6d-08c276d9dbe4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "5d9df449-bd71-445d-a5e8-5aed9dc5bf8e"
		},
		{
			"name": "user_nothing",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8d219149-8b69-438b-a930-afcda1607e0f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "ea0eab15-8e62-4b3c-9296-4db279578d45"
							}
						}
					],
					"id": "6c43d197-9177-4b3c-afc6-200cadd690d5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1612656b-1f06-4ada-9287-4ec2ef54c964"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b6a754df-2057-4a80-8c71-1ac7cd1abc26"
							}
						}
					],
					"id": "f891f8e7-7ddd-4588-a9e7-9d2a950123e0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a05c96a-a94c-45a4-9811-b59743b196db"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "87f1de8d-a73f-472e-b3e6-3464fdeb90cc"
							}
						}
					],
					"id": "4668ffc3-1354-4314-b6ec-a6b29accd001",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "63b5bca9-e3e4-4d4f-bf8e-60fa36156ad8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "aafadb16-940b-48d5-84e0-fc6da92530ae"
							}
						}
					],
					"id": "37d972b4-6fda-4742-ab50-e4a5c8fdd435",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e30ce44-865f-43e5-a0ec-eb9e8ef9da78"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "17b663b7-a5b5-475a-bbb8-9e4327a79cfd"
							}
						}
					],
					"id": "8fe31c6a-6229-45e7-b48a-966ef4bebb3f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "447ddd56-2f8d-4c38-a38a-fd2b7870b9e5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "240a26ad-1649-4a1a-8bbc-f60e65e58c12"
							}
						}
					],
					"id": "594deec6-5835-4db1-8bbe-524c219862c8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e5b629a7-e716-4482-abd6-2fd83bc30876"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "239cf245-d32e-476d-a388-542c0193929d"
							}
						}
					],
					"id": "40f66f9b-e22c-48c7-9881-15e80a491544",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a7805223-688e-4ea5-8821-7bf37e69042f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8e5ff3fe-ea3f-4e1e-abaf-e111e208b7c7"
							}
						}
					],
					"id": "03e6ca99-1102-4ade-9591-56e3740e6a73",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "ebd74ef7-7173-4b5e-9d08-7978d684345c"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a78c9e3a-6a9e-4090-a21a-c86b8b419ae8"
							}
						}
					],
					"id": "c9381763-a010-4d63-be96-77be359e6886",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all GraphTemplate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8289120a-ae48-40a6-8350-26a924108b30"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of graph templates has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The graph templates retrieved are listed with all of their informations\", function() {\r",
									"    // Check the number of graph templates (8)\r",
									"    pm.expect(responseJson.result.length).to.eql(8);\r",
									"\r",
									"    // Check the properties of each graph template\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"            \"id\": 1, \r",
									"            \"name\": \"Default_Graph\", \r",
									"            \"vertical_axis_label\": \"Value\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0,\r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"            \"id\": 2, \r",
									"            \"name\": \"Latency\", \r",
									"            \"vertical_axis_label\": \"Latency\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"            \"id\": 3, \r",
									"            \"name\": \"Storage\", \r",
									"            \"vertical_axis_label\": \"Storage\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"            \"id\": 4, \r",
									"            \"name\": \"Memory\", \r",
									"            \"vertical_axis_label\": \"Memory\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.eql({\r",
									"            \"id\": 5, \r",
									"            \"name\": \"CPU\", \r",
									"            \"vertical_axis_label\": \"Processor Use\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": 110,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.eql({\r",
									"            \"id\": 6, \r",
									"            \"name\": \"Uptime\", \r",
									"            \"vertical_axis_label\": \"Uptime\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.eql({\r",
									"            \"id\": 7, \r",
									"            \"name\": \"Traffic\", \r",
									"            \"vertical_axis_label\": \"Traffic\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": null, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.eql({\r",
									"            \"id\": 8, \r",
									"            \"name\": \"Load_Average\", \r",
									"            \"vertical_axis_label\": \"Load_Average\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "b5d3d715-b5f6-4b86-983e-52ff33df1fdb"
							}
						}
					],
					"id": "eefba939-63a7-4d8f-9176-88ee9df715d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/graphs/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"graphs",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a687cbbd-46fc-4620-b6b9-78e61f017952"
							}
						}
					],
					"id": "f82bf312-284f-4978-bdac-c78a19167645",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "d449bee2-bb15-44d6-864c-0418f843b902"
		},
		{
			"name": "User R/W",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ebb76573-8504-48df-b437-b01a592f3464"
							}
						}
					],
					"id": "4bd01927-e8c2-44b8-a34d-0a40be7dbe77",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all GraphTemplate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f042a515-6f8f-4ccd-b21e-731be75d5098"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of graph templates has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The graph templates retrieved are listed with all of their informations\", function() {\r",
									"    // Check the number of graph templates (8)\r",
									"    pm.expect(responseJson.result.length).to.eql(8);\r",
									"\r",
									"    // Check the properties of each graph template\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"            \"id\": 1, \r",
									"            \"name\": \"Default_Graph\", \r",
									"            \"vertical_axis_label\": \"Value\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0,\r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"            \"id\": 2, \r",
									"            \"name\": \"Latency\", \r",
									"            \"vertical_axis_label\": \"Latency\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"            \"id\": 3, \r",
									"            \"name\": \"Storage\", \r",
									"            \"vertical_axis_label\": \"Storage\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"            \"id\": 4, \r",
									"            \"name\": \"Memory\", \r",
									"            \"vertical_axis_label\": \"Memory\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.eql({\r",
									"            \"id\": 5, \r",
									"            \"name\": \"CPU\", \r",
									"            \"vertical_axis_label\": \"Processor Use\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": 110,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.eql({\r",
									"            \"id\": 6, \r",
									"            \"name\": \"Uptime\", \r",
									"            \"vertical_axis_label\": \"Uptime\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.eql({\r",
									"            \"id\": 7, \r",
									"            \"name\": \"Traffic\", \r",
									"            \"vertical_axis_label\": \"Traffic\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": null, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.eql({\r",
									"            \"id\": 8, \r",
									"            \"name\": \"Load_Average\", \r",
									"            \"vertical_axis_label\": \"Load_Average\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "c3d8b643-b05c-4ba1-802b-dab7d29d4323"
							}
						}
					],
					"id": "1d427af7-8019-4040-92e0-69878467d53f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/graphs/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"graphs",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "37056fea-7d67-42ad-aaee-d9a292ff2368"
							}
						}
					],
					"id": "bd942285-49bf-4736-a277-2b21d3f1fd93",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "e802be22-e2e0-4849-95b1-dee19fc1b59d"
		},
		{
			"name": "User Read Only",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "19dd4600-eda7-4bfc-a377-a4637760e328"
							}
						}
					],
					"id": "a0e15052-2c4c-4411-82c2-2daa85d2c11b",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all GraphTemplate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3cf3687f-75b5-468b-9373-013ad0c46206"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of graph templates has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The graph templates retrieved are listed with all of their informations\", function() {\r",
									"    // Check the number of graph templates (8)\r",
									"    pm.expect(responseJson.result.length).to.eql(8);\r",
									"\r",
									"    // Check the properties of each graph template\r",
									"    pm.expect(responseJson.result[0]).to.eql({\r",
									"            \"id\": 1, \r",
									"            \"name\": \"Default_Graph\", \r",
									"            \"vertical_axis_label\": \"Value\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0,\r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.eql({\r",
									"            \"id\": 2, \r",
									"            \"name\": \"Latency\", \r",
									"            \"vertical_axis_label\": \"Latency\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.eql({\r",
									"            \"id\": 3, \r",
									"            \"name\": \"Storage\", \r",
									"            \"vertical_axis_label\": \"Storage\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.eql({\r",
									"            \"id\": 4, \r",
									"            \"name\": \"Memory\", \r",
									"            \"vertical_axis_label\": \"Memory\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1024, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.eql({\r",
									"            \"id\": 5, \r",
									"            \"name\": \"CPU\", \r",
									"            \"vertical_axis_label\": \"Processor Use\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": 110,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.eql({\r",
									"            \"id\": 6, \r",
									"            \"name\": \"Uptime\", \r",
									"            \"vertical_axis_label\": \"Uptime\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.eql({\r",
									"            \"id\": 7, \r",
									"            \"name\": \"Traffic\", \r",
									"            \"vertical_axis_label\": \"Traffic\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": null, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.eql({\r",
									"            \"id\": 8, \r",
									"            \"name\": \"Load_Average\", \r",
									"            \"vertical_axis_label\": \"Load_Average\", \r",
									"            \"width\": 550, \r",
									"            \"height\": 140,\r",
									"            \"grid\": {\r",
									"                \"lower_limit\": 0, \r",
									"                \"upper_limit\": null,\r",
									"                \"is_upper_limit_sized_to_max\": false\r",
									"            }, \r",
									"            \"base\": 1000, \r",
									"            \"is_graph_scaled\": true, \r",
									"            \"is_default_centreon_template\": false\r",
									"    });\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "4453740c-40f0-46b3-8b05-6fec7c966da0"
							}
						}
					],
					"id": "76b2c621-db66-4e7c-8492-4dff06a8d7b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/graphs/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"graphs",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3494969f-4ae8-4244-9658-47dceb5b2489"
							}
						}
					],
					"id": "515705ec-f396-4c36-af80-bab26112e783",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "e9fb5055-398d-48b7-9504-cdf767f948bb"
		},
		{
			"name": "User Nothing",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "238b2caf-836a-4b79-88fa-5a51644da31c"
							}
						}
					],
					"id": "98dbaa96-28b6-479d-9d89-d319336024fd",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all GraphTemplate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ead8301f-316a-4c52-9008-8808815176b9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list graph templates\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access graph templates\");\r",
									"    \r",
									"})"
								],
								"type": "text/javascript",
								"id": "39e4726c-e1ee-4a65-a2e4-ac55c3a5b373"
							}
						}
					],
					"id": "8fbf17d7-6ddb-4749-a7e8-a24cffcffb91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/graphs/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"graphs",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "39f30d16-bb78-428a-aa19-be068bc2f4cf"
							}
						}
					],
					"id": "4a4b4ff3-2150-473c-808d-6f35ea850abb",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "8db59d29-a1ba-4658-ba26-5fd4cca3bf9e"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4d3f0f7f-3040-45d2-b26a-f503e57541bb"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a913a2d2-800c-46e1-8b34-3e76c55f7db8"
			}
		}
	]
}