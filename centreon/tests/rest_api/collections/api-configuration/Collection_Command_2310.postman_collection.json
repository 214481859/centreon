{
	"info": {
		"_postman_id": "f853286c-c341-4231-b868-3d9d7dac80dd",
		"name": "Command",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16182525",
		"_collection_link": "https://centreon-api-v2-configuration.postman.co/workspace/API-23.10~d8660f05-3c64-4c5b-af73-1a5543bff4e1/collection/16182525-f853286c-c341-4231-b868-3d9d7dac80dd?action=share&source=collection_link&creator=16182525"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of commands has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The commands retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of commands (10)\r",
									"    pm.expect(responseJson.result.length).to.eql(10);\r",
									"\r",
									"    // Check the properties of each command \r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 35,\r",
									"        \"name\": \"host-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Type:$NOTIFICATIONTYPE$#BR#Host: $HOSTNAME$#BR#State: $HOSTSTATE$#BR#Address: $HOSTADDRESS$#BR#Info: $HOSTOUTPUT$#BR#Date/Time: $DATE$\\\" | @MAILER@ -s \\\"Host $HOSTSTATE$ alert for $HOSTNAME$!\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": 36,\r",
									"        \"name\": \"service-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Notification Type: $NOTIFICATIONTYPE$#BR##BR#Service: $SERVICEDESC$#BR#Host: $HOSTALIAS$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR##BR#Date/Time: $DATE$ Additional Info : $SERVICEOUTPUT$\\\" | @MAILER@ -s \\\"** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": 37,\r",
									"        \"name\": \"host-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Host $HOSTALIAS$ is $HOSTSTATE$#BR#Info: $OUTPUT$#BR#Time: $DATETIME$\\\\\\\" | @MAILER@ -s \\\\\\\"$NOTIFICATIONTYPE$ alert - Host $HOSTNAME$ is $HOSTSTATE$\\\\\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": 38,\r",
									"        \"name\": \"service-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Service: $SERVICEDESC$#BR#Host: $HOSTNAME$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR#Info: $OUTPUT$#BR#Date: $DATETIME$\\\" | @MAILER@ -s \\\"$NOTIFICATIONTYPE$: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.include({\r",
									"        \"id\": 89,\r",
									"        \"name\": \"host-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber  $CONTACTPAGER$ \\\"Host '$HOSTALIAS$' is $HOSTSTATE$ - Info: $HOSTOUTPUT$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.include({\r",
									"        \"id\": 90,\r",
									"        \"name\": \"service-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber $CONTACTPAGER$ \\\"$NOTIFICATIONTYPE$ $HOSTNAME$ $SERVICEDESC$ $SERVICESTATE$ $SERVICEOUTPUT$ $LONGDATETIME$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.include({\r",
									"        \"id\": 91,\r",
									"        \"name\": \"base_host_alive\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.include({\r",
									"        \"id\": 92,\r",
									"        \"name\": \"App-Monitoring-Centreon-Host-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_HOSTDUMMYSTATUS$' --output='$_HOSTDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[8]).to.include({\r",
									"        \"id\": 93,\r",
									"        \"name\": \"base_centreon_ping\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -n $_SERVICEPACKETNUMBER$ -w $_SERVICEWARNING$ -c $_SERVICECRITICAL$ $_SERVICEEXTRAOPTIONS$\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[9]).to.include({\r",
									"        \"id\": 94,\r",
									"        \"name\": \"App-Monitoring-Centreon-Service-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_SERVICEDUMMYSTATUS$' --output='$_SERVICEDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands?sort_by=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user and clear collection variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with R/W Right",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of commands has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The commands retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of commands (10)\r",
									"    pm.expect(responseJson.result.length).to.eql(10);\r",
									"\r",
									"    // Check the properties of each command \r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 35,\r",
									"        \"name\": \"host-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Type:$NOTIFICATIONTYPE$#BR#Host: $HOSTNAME$#BR#State: $HOSTSTATE$#BR#Address: $HOSTADDRESS$#BR#Info: $HOSTOUTPUT$#BR#Date/Time: $DATE$\\\" | @MAILER@ -s \\\"Host $HOSTSTATE$ alert for $HOSTNAME$!\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": 36,\r",
									"        \"name\": \"service-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Notification Type: $NOTIFICATIONTYPE$#BR##BR#Service: $SERVICEDESC$#BR#Host: $HOSTALIAS$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR##BR#Date/Time: $DATE$ Additional Info : $SERVICEOUTPUT$\\\" | @MAILER@ -s \\\"** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": 37,\r",
									"        \"name\": \"host-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Host $HOSTALIAS$ is $HOSTSTATE$#BR#Info: $OUTPUT$#BR#Time: $DATETIME$\\\\\\\" | @MAILER@ -s \\\\\\\"$NOTIFICATIONTYPE$ alert - Host $HOSTNAME$ is $HOSTSTATE$\\\\\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": 38,\r",
									"        \"name\": \"service-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Service: $SERVICEDESC$#BR#Host: $HOSTNAME$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR#Info: $OUTPUT$#BR#Date: $DATETIME$\\\" | @MAILER@ -s \\\"$NOTIFICATIONTYPE$: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.include({\r",
									"        \"id\": 89,\r",
									"        \"name\": \"host-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber  $CONTACTPAGER$ \\\"Host '$HOSTALIAS$' is $HOSTSTATE$ - Info: $HOSTOUTPUT$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.include({\r",
									"        \"id\": 90,\r",
									"        \"name\": \"service-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber $CONTACTPAGER$ \\\"$NOTIFICATIONTYPE$ $HOSTNAME$ $SERVICEDESC$ $SERVICESTATE$ $SERVICEOUTPUT$ $LONGDATETIME$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.include({\r",
									"        \"id\": 91,\r",
									"        \"name\": \"base_host_alive\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.include({\r",
									"        \"id\": 92,\r",
									"        \"name\": \"App-Monitoring-Centreon-Host-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_HOSTDUMMYSTATUS$' --output='$_HOSTDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[8]).to.include({\r",
									"        \"id\": 93,\r",
									"        \"name\": \"base_centreon_ping\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -n $_SERVICEPACKETNUMBER$ -w $_SERVICEWARNING$ -c $_SERVICECRITICAL$ $_SERVICEEXTRAOPTIONS$\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[9]).to.include({\r",
									"        \"id\": 94,\r",
									"        \"name\": \"App-Monitoring-Centreon-Service-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_SERVICEDUMMYSTATUS$' --output='$_SERVICEDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands?sort_by=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from RW user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with Read Only Right",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of commands has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The commands retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of commands (10)\r",
									"    pm.expect(responseJson.result.length).to.eql(10);\r",
									"\r",
									"    // Check the properties of each command \r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": 35,\r",
									"        \"name\": \"host-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Type:$NOTIFICATIONTYPE$#BR#Host: $HOSTNAME$#BR#State: $HOSTSTATE$#BR#Address: $HOSTADDRESS$#BR#Info: $HOSTOUTPUT$#BR#Date/Time: $DATE$\\\" | @MAILER@ -s \\\"Host $HOSTSTATE$ alert for $HOSTNAME$!\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": 36,\r",
									"        \"name\": \"service-notify-by-email\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"***** centreon Notification *****#BR##BR#Notification Type: $NOTIFICATIONTYPE$#BR##BR#Service: $SERVICEDESC$#BR#Host: $HOSTALIAS$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR##BR#Date/Time: $DATE$ Additional Info : $SERVICEOUTPUT$\\\" | @MAILER@ -s \\\"** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **\\\" $CONTACTEMAIL$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": 37,\r",
									"        \"name\": \"host-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Host $HOSTALIAS$ is $HOSTSTATE$#BR#Info: $OUTPUT$#BR#Time: $DATETIME$\\\\\\\" | @MAILER@ -s \\\\\\\"$NOTIFICATIONTYPE$ alert - Host $HOSTNAME$ is $HOSTSTATE$\\\\\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": 38,\r",
									"        \"name\": \"service-notify-by-epager\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"/usr/bin/printf \\\"%b\\\" \\\"Service: $SERVICEDESC$#BR#Host: $HOSTNAME$#BR#Address: $HOSTADDRESS$#BR#State: $SERVICESTATE$#BR#Info: $OUTPUT$#BR#Date: $DATETIME$\\\" | @MAILER@ -s \\\"$NOTIFICATIONTYPE$: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$\\\" $CONTACTPAGER$\",\r",
									"        \"is_shell\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[4]).to.include({\r",
									"        \"id\": 89,\r",
									"        \"name\": \"host-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber  $CONTACTPAGER$ \\\"Host '$HOSTALIAS$' is $HOSTSTATE$ - Info: $HOSTOUTPUT$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[5]).to.include({\r",
									"        \"id\": 90,\r",
									"        \"name\": \"service-notify-by-jabber\",\r",
									"        \"type\": 1,\r",
									"        \"command_line\": \"$USER1$/notify_via_jabber $CONTACTPAGER$ \\\"$NOTIFICATIONTYPE$ $HOSTNAME$ $SERVICEDESC$ $SERVICESTATE$ $SERVICEOUTPUT$ $LONGDATETIME$\\\"\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[6]).to.include({\r",
									"        \"id\": 91,\r",
									"        \"name\": \"base_host_alive\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[7]).to.include({\r",
									"        \"id\": 92,\r",
									"        \"name\": \"App-Monitoring-Centreon-Host-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_HOSTDUMMYSTATUS$' --output='$_HOSTDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[8]).to.include({\r",
									"        \"id\": 93,\r",
									"        \"name\": \"base_centreon_ping\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_icmp -H $HOSTADDRESS$ -n $_SERVICEPACKETNUMBER$ -w $_SERVICEWARNING$ -c $_SERVICECRITICAL$ $_SERVICEEXTRAOPTIONS$\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.result[9]).to.include({\r",
									"        \"id\": 94,\r",
									"        \"name\": \"App-Monitoring-Centreon-Service-Dummy\",\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$CENTREONPLUGINS$/centreon_centreon_poller.pl --plugin=apps::centreon::local::plugin --mode=dummy --status='$_SERVICEDUMMYSTATUS$' --output='$_SERVICEDUMMYOUTPUT$'\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_locked\": true,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands?sort_by=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User with No Access",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The commands have not been  listed, because the user does have the corrects rights\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access commands\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands?sort_by=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}