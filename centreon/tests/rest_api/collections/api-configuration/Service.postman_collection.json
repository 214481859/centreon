{
	"info": {
		"_postman_id": "6d321d13-9b08-43de-a49c-b32a81bac2c5",
		"name": "Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28117716-6d321d13-9b08-43de-a49c-b32a81bac2c5"
	},
	"item": [
		{
			"name": "Log in as Admin    ",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5c15a28a-9706-468f-97a6-e1422cde1fe3"
							}
						}
					],
					"id": "e9fbe594-27db-40de-993a-4765803871b7",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"id": "45a8bbec-5cd5-4725-8f73-dce37e102404"
		},
		{
			"name": "user_with_RW_rights",
			"item": [
				{
					"name": "Add user_with_RW_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "aa9f9bdb-7ebe-43a7-bd98-c83a4e71237c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW\", \"user_with_RW_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "3fee0158-a3ea-4c4e-91c4-cdf9702c1cdf"
							}
						}
					],
					"id": "bd69e430-1c9e-4b19-8d46-329d0deabb29",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};{{api_login_user_RW}};{{api_login_user_RW}}@localhost;{{api_password_user_RW}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0f42bfb5-2716-4978-b35d-721eb3a51da3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a6400da5-46e0-45e5-92c2-5418f5f79fb3"
							}
						}
					],
					"id": "6983c89c-807f-4a2a-aab8-9939b0fb59ed",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0250fc1d-2f39-4bf4-a354-0b1280944fe3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82751134-e73e-4eeb-9ca9-00d4b08797c7"
							}
						}
					],
					"id": "d150c20a-a8e5-4d44-a952-956d899fa9d4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "584f616e-7a73-4794-96c3-0990f879dcff"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "eaddf048-f347-42ae-99af-a408c613d34b"
							}
						}
					],
					"id": "69581dd6-cd4b-4c8d-942a-8e2493af5843",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3b073c26-64e3-4577-9d76-ae2969e59431"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5528859b-8612-40cb-9ac5-f581f309df24"
							}
						}
					],
					"id": "5e107de7-d9b9-4830-86dd-9097b9e49b34",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;{{api_login_user_RW}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "167d5c26-d525-430c-bc36-e192ad1596ee"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b7298654-b9f3-4495-aac8-efd78778694f"
							}
						}
					],
					"id": "b003a7c0-f105-4b12-a3b0-913a0cd24e9f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "584de6f6-8fb7-4c52-8904-a75c7d22ad58"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "84b10d44-b9ff-46cb-a170-6189a65c315e"
							}
						}
					],
					"id": "59e1db48-d2b0-498a-b71d-038a9a32a378",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RW right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "338e8cf8-49e1-4544-afbf-ceaf36239176"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read/Write rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9c681300-bfee-4cf9-9f14-6bc05497996e"
							}
						}
					],
					"id": "89a9684f-f5bf-45d3-b092-326cd28a11e3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantrw\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RW;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "64de800f-67b8-4c00-8b0d-5fcc44ef1ca0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "117ca7d6-e504-4ec3-a440-79f04c6195a8"
							}
						}
					],
					"id": "acf9a044-e1f0-44b0-9770-b2733df8e131",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_ALL;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "53af52e0-09e1-431b-925e-583e5299c539"
		},
		{
			"name": "user_with_RW_rights_filters",
			"item": [
				{
					"name": "Add user_with_RW_rights_filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_RW_filters\", \"user_with_RW_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_RW_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "83babf46-3802-4fd0-8684-1b9a31629973"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cba12a18-8022-420d-a106-0e407d745439"
							}
						}
					],
					"id": "90727060-02c8-45b5-8288-7f549eff20aa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};{{api_login_user_RW_filters}};{{api_login_user_RW_filters}}@localhost;{{api_password_user_RW_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "085ff00e-7858-4ced-a672-a3006efe546d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4488df10-9a27-4657-af47-21439dd164c2"
							}
						}
					],
					"id": "ac065245-dca2-4f8a-8505-345d34d593c4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d84676df-a561-4d00-83f7-a446e0982aed"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "75931453-ecfb-4ca7-96bc-5674b60fb2ea"
							}
						}
					],
					"id": "63301ac3-cf36-4e69-b633-7477ae84c01a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_RW_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "17c6767c-370c-40ef-9913-257f3ce0651f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "babc16a7-b52c-4f01-8ea3-9a4454114d7f"
							}
						}
					],
					"id": "480a3141-7bd7-434e-ae66-f7c1267c82c6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e315d140-d46a-476e-8f73-f06586bef4a7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a75cad5a-019f-4ad4-bd02-5ebcbc1058cd"
							}
						}
					],
					"id": "8fa89515-1203-4219-8fb0-118e3078a265",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;{{api_login_user_RW_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Resources limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "574b0b4d-caf5-40de-baa0-876cb9204a9c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b03a0306-1d04-4700-a13b-f742a2fb1f4d"
							}
						}
					],
					"id": "0d760cf4-a3c6-476e-a876-31e1a6709b49",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLRESOURCE\",\r\n  \"values\": \"limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0fcd393e-7a4d-4c9b-91ee-85bd2ecd5b9b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ea324e56-9398-415a-8d5b-aadfe520e17e"
							}
						}
					],
					"id": "74b2b556-6802-42ce-8bf2-6f4a6eb74f77",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;limited\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RW to RW_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "51b2d0e7-155b-49bd-9260-3b0abf362495"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2891e2a7-b458-476d-9957-60daee2c48c4"
							}
						}
					],
					"id": "e78ff0c8-e8a1-4d7f-aa42-bacee1024868",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RW_limited;RW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "41e68bb6-3689-4000-b2be-8c6ad089eee8"
		},
		{
			"name": "user_with_R_rights",
			"item": [
				{
					"name": "Add user_with_R_rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6ecea330-c6ba-4f50-b636-4f6c3993a93d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read\", \"user_with_R_rights\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "7bee72b6-0195-4a7d-b54e-90c61b950585"
							}
						}
					],
					"id": "36edee1f-75d2-4d1c-8852-22d80424f305",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};{{api_login_user_Read}};{{api_login_user_Read}}@localhost;{{api_password_user_Read}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7fea15ec-cf2c-456b-b9f5-32e32ffcff97"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "517cab78-ea62-42d2-8837-aec39ccdf881"
							}
						}
					],
					"id": "420ecc34-3dc2-4eaf-b5ab-52f9862e1f6c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7c417737-acad-4237-81bb-cd80aed64bb1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "607163d6-bf0b-4abe-92e0-dc533a8eed26"
							}
						}
					],
					"id": "8ec6c90a-2ef7-471a-ad5e-bceb3946cd7f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8bef5e5b-dc81-454b-a10b-8d513bd1e2d5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d46b31f0-5715-4854-a2e1-ec0de5bc74f9"
							}
						}
					],
					"id": "696bf114-188b-4229-8f60-c530b6cf8f12",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO_ALL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d3deb5ee-2af6-4f30-9c5e-6b00c5cb67fb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "72e755ef-37ad-4557-b468-51027170b89b"
							}
						}
					],
					"id": "23c64b98-ba0e-420a-8e5d-91ed6046754d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;{{api_login_user_Read}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3cc25f98-66bb-4fa9-bb5a-e6ddad9b5020"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "52d4f803-38dd-4b9c-b5f4-58ba8c8c7bc1"
							}
						}
					],
					"id": "60dca75f-4be6-418e-8433-d33ce4d5ff3e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "92378380-bc8f-4464-9c78-9a0d8d67a95b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2a7d0474-1fe3-4ead-aad9-b9fe3c23918a"
							}
						}
					],
					"id": "1e16194b-cca0-4277-ae61-055957e8912c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant RO right",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e9eb4f47-bb86-4e7d-b2ae-7d579c304016"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The Read Only rights has been successfully.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "dd810bd5-b2d8-494d-a379-6f4ca9483ad1"
							}
						}
					],
					"id": "a0eca287-acff-44a4-9b25-a1bb28ebc41a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"grantro\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"RO;1;Configuration\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9b024d0f-3a7b-433b-a6ec-6259d6ac1e38"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1838b9ab-dcf6-46b4-81a6-1d832a5d941c"
							}
						}
					],
					"id": "e0b6add5-d45e-467e-a208-9375ec195510",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_ALL;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "e1b9a0e4-ea53-4c95-bf19-0ba2e0639563"
		},
		{
			"name": "user_with_R_rights_filters",
			"item": [
				{
					"name": "Add user_with_R_rights_filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fb6f7f67-9ac7-4f34-ab1a-ca4a0fbe1a35"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Read_filters\", \"user_with_R_rights_filters\");\r",
									"pm.collectionVariables.set(\"api_password_user_Read_filters\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "8d55d82d-aa69-4468-8add-f998b8e08283"
							}
						}
					],
					"id": "8a388480-75ff-4ee7-959b-dc069639953d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};{{api_login_user_Read_filters}};{{api_login_user_Read_filters}}@localhost;{{api_password_user_Read_filters}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22b07d09-86ce-4a8d-b199-f4f44170437a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "278a8f45-31c5-4a0e-923a-8a3adbe91c14"
							}
						}
					],
					"id": "e826ed00-d04a-49c1-9e4f-63f8dfc0602a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6181d49b-2891-4c5c-aee4-346aecf492b4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "740a10c5-77ba-470f-a4e6-ee0da36305ab"
							}
						}
					],
					"id": "dc983b07-953b-4485-9809-3f19a0419eba",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Read_filters}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "42757d88-299f-47b2-ab0e-f83c4d0ebc06"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e5ba886e-c729-4bcc-b8f8-68ad87c08191"
							}
						}
					],
					"id": "04dbf9e5-9e74-4fed-affe-8b62d369c190",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO_limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "844dc622-79c5-4b3d-80b9-f3e9ece7b778"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "77e76262-6fd3-41ea-9388-718de6dd65f5"
							}
						}
					],
					"id": "69e2b033-c7cf-44dc-8da2-516b756bdae2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;{{api_login_user_Read_filters}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c7b6dc72-c382-4c0f-a428-1474ff1454cf"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "69075a6d-bc2f-4cf8-aadb-ae76d79c77a1"
							}
						}
					],
					"id": "90915cfe-d966-4d41-9d10-56e88fb1f8d0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;limited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link RO to RO_limited",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6dd6e86-d8b3-4196-992a-237d846d664b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7d2ad4ba-0cc7-469a-981c-fcb8cb589c02"
							}
						}
					],
					"id": "3fb5792d-3645-44b0-afb4-8780aec73516",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"RO_limited;RO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "bd553554-46f4-487e-ba76-b1568effd207"
		},
		{
			"name": "user_nothing",
			"item": [
				{
					"name": "Add user_nothing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The new user has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "25e167f6-eabd-4e28-9768-e52c5c2970ee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"api_login_user_Nothing\", \"user_nothing\");\r",
									"pm.collectionVariables.set(\"api_password_user_Nothing\", \"Centreon!123\");"
								],
								"type": "text/javascript",
								"id": "3c30b671-482e-4d79-923a-2ff4fc645ec2"
							}
						}
					],
					"id": "92573e92-e283-4666-9e34-e675ced6e950",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};{{api_login_user_Nothing}};{{api_login_user_Nothing}}@localhost;{{api_password_user_Nothing}};0;1;en_US;local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71e895ce-5f86-43e3-819d-664e42d15249"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a3a80d39-5b2d-4472-92ed-b7304d4d82db"
							}
						}
					],
					"id": "9d31ffcb-7912-45b9-82a9-310ac4fddcf8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add reach_api_rt parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "299d6606-053a-492c-9f83-741952f4ae56"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The api rt access rights has been successfully added.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "59932618-d67d-4c50-9a47-3639c4c18269"
							}
						}
					],
					"id": "45218ff1-3eeb-4499-949a-9429e86ceb04",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"setparam\",\r\n  \"object\": \"CONTACT\",\r\n  \"values\": \"{{api_login_user_Nothing}};reach_api_rt;1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Group Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c46abd67-aeef-4d10-93c0-7d92c4d85998"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL group has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5c6ddba0-ea1a-4ea7-8633-3b6acc02e255"
							}
						}
					],
					"id": "6c72139a-d148-4cf2-94c4-0e8129d01c6b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link user to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d3640b3b-d96c-445e-840d-343cf426c8df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The contact has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5b8d7e17-4a85-4f60-a47b-0eebd2119d7c"
							}
						}
					],
					"id": "c61d4783-b65a-4de0-b02f-8669454f5d18",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addcontact\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;{{api_login_user_Nothing}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link resources to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ece67584-2325-4952-bc5e-31bbc48b9773"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL Resources has been successfully linked to the ACL Group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "af2b1321-2f98-437f-adc5-330e9223bf3d"
							}
						}
					],
					"id": "1f4f7110-9305-4eae-869d-b4825dd7dfdd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addresource\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;All Resources\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ACL Menu Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68619163-f02b-4cdf-a052-08de38473108"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully created.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e031c8fd-7c6b-4634-8198-b111d660c284"
							}
						}
					],
					"id": "56f8647c-b7b7-4e33-8ab1-dce36d88eaa1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLMENU\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Nothing to Nothing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2c7cb68e-e693-47f9-821e-1a942f7c5e29"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The ACL menu has been successfully linked to the ACL group.\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "eaeb1a64-51c2-41c5-89d0-741746828ea3"
							}
						}
					],
					"id": "b1acfcac-72ed-49ab-aa13-4b8affc964bc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"addmenu\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"Nothing;Nothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "72655025-64a0-4269-b1b5-5bfc29d366b7"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d075544c-b592-40a8-a92e-967245609746"
							}
						}
					],
					"id": "9bea9879-b71c-4878-bdc0-d2342294a115",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service severity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service severity has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceSeverity1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceSeverity1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service severity\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceSeverity1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceSeverity1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceSeverity1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceSeverity1Alias\"),\r",
									"        \"level\": 2,\r",
									"        \"icon_id\": 1,\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "8869df02-ab0d-4fe3-9717-370902bbc5e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceSeverity1Name\", \"Test_S_Severity_1\");\r",
									"pm.collectionVariables.set(\"ServiceSeverity1Alias\", \"I'm a service severity!\");\r",
									""
								],
								"type": "text/javascript",
								"id": "119ca84e-c454-4680-83f0-7e69745cdc00"
							}
						}
					],
					"id": "b8c39d57-dacd-487e-869c-3651b606592f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceSeverity1Name}}\",\n    \"alias\":\"{{ServiceSeverity1Alias}}\",\n    \"level\": 2,\n    \"icon_id\": 1,\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/severities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"severities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a first service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceCategory1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceCategory1Alias\"),\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7b3ca353-ed50-4a4a-b3d7-57853067cc29"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory1Name\", \"Test_S_Category_1\");\r",
									"pm.collectionVariables.set(\"ServiceCategory1Alias\", \"I'm a service category!\");\r",
									""
								],
								"type": "text/javascript",
								"id": "535c3bdd-516b-4a73-9e62-a50adeaebaf2"
							}
						}
					],
					"id": "a06b4322-4457-4773-9641-ee4311c47804",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceCategory1Name}}\",\n    \"alias\":\"{{ServiceCategory1Alias}}\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a second service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceCategory2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceCategory2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceCategory2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceCategory2Alias\"),\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f7ca1953-ca0d-4556-841a-386eee251eb0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceCategory2Name\", \"Test_S_Category_2\");\r",
									"pm.collectionVariables.set(\"ServiceCategory2Alias\", \"I'm a service category!\");\r",
									""
								],
								"type": "text/javascript",
								"id": "cae06822-3012-4c44-a925-05602c0f7778"
							}
						}
					],
					"id": "6ac20e17-ad1a-4b73-b4be-1e1e7cf5cb62",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{ServiceCategory2Name}}\",\n    \"alias\":\"{{ServiceCategory2Alias}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a new service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ServiceGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceGroup1Alias\"),\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false    \r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "ef7b5cee-ed26-4e22-9db5-3c00e767c530"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceGroup1Name\", \"Test_S_Group_1\");\r",
									"pm.collectionVariables.set(\"ServiceGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript",
								"id": "4fe57264-633a-48cc-81f7-a30d98411d1c"
							}
						}
					],
					"id": "33f94689-80a4-4c32-a01f-6240a5029100",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{ServiceGroup1Name}}\",\n    \"alias\": \"{{ServiceGroup1Alias}}\",\n    \"geo_coords\": \"\",\n    \"comment\": \"Hello world ! 1\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new command (successful)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Command1Name\", \"check-host-alive\");\r",
									""
								],
								"type": "text/javascript",
								"id": "43ae29a9-e9be-4985-a03e-8f6f02dfcf9c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"\r",
									"pm.test(\"The command has been successfully created, with name '\" + pm.collectionVariables.get(\"Command1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new command \r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"CommandId\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"CommandId\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Command1Name\"),\r",
									"        \"type\": 2,\r",
									"        \"command_line\": \"$USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\",\r",
									"        \"is_shell\": false,\r",
									"        \"is_activated\": true,\r",
									"        \"is_locked\": false,\r",
									"        \"argument_example\": null,\r",
									"        \"connector\": null,\r",
									"        \"grap_template\": null\r",
									"    });\r",
									"    pm.expect(response.arguments).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c82b4589-546a-4715-8b4a-c78a2c3a9f60"
							}
						}
					],
					"id": "65afa349-e409-4956-b133-770f3ccfd6cc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Command1Name}}\",\r\n    \"type\": 2,\r\n    \"command_line\": \"$USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a first host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category has been successfully created, with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host category\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"HostCategory1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostCategory1Alias\"),\r",
									"        \"is_activated\": false,\r",
									"        \"comment\":\"Created by Admin\"  \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"id": "61679504-4c3c-45b9-831e-04f9b4debd78"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostCategory1Name\", \"Test_H_Category_1\");\r",
									"pm.collectionVariables.set(\"HostCategory1Alias\", \"I'm a host category!\");\r",
									""
								],
								"type": "text/javascript",
								"id": "2473047a-d541-432a-b48c-e36943520cb2"
							}
						}
					],
					"id": "81eaf413-b7d3-4d83-8873-1e54272d7775",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{HostCategory1Name}}\",\n    \"alias\":\"{{HostCategory1Alias}}\",\n    \"is_activated\": false,\n    \"comment\":\"Created by Admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group has been successfully created, with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host group\r",
									"    var response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"HostGroup1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostGroup1Alias\"),\r",
									"        \"notes\": \"I am Groot\",\r",
									"        \"notes_url\": \"www.google.fr\",\r",
									"        \"action_url\": \"www.google.com\",\r",
									"        \"icon_id\": null,\r",
									"        \"icon_map_id\": null,\r",
									"        \"rrd\": 3,\r",
									"        \"geo_coords\": null,\r",
									"        \"comment\": \"Hello world ! 1\",\r",
									"        \"is_activated\": false\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The Location parameter is in the header.\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d48eb8ae-beab-4f5a-919b-f47b9876455b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostGroup1Name\", \"Test_H_Group_1\");\r",
									"pm.collectionVariables.set(\"HostGroup1Alias\", \"I should be successful !\");\r",
									""
								],
								"type": "text/javascript",
								"id": "4228ab6a-c0a5-480d-8b2d-1e4b95a89f86"
							}
						}
					],
					"id": "25e84be7-33b6-443d-977e-a276db2f4c63",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{HostGroup1Name}}\",\n    \"alias\": \"{{HostGroup1Alias}}\",\n    \"notes\": \"I am Groot\",\n    \"notes_url\": \"www.google.fr\",\n    \"action_url\": \"www.google.com\",\n    \"icon_id\": null,\n    \"icon_map_id\": null,\n    \"rrd\": 3,\n    \"geo_coords\": \"\",\n    \"comment\": \"Hello world ! 1\",\n    \"is_activated\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new host template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"HostTemplate1Name\", \"host-template-1\");\r",
									"pm.collectionVariables.set(\"HostTemplate1Alias\", \"I'm the first host template\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9cbcd9f2-9274-48c5-9027-272ab3bcd5bb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson);\r",
									"\r",
									"pm.test(\"The host template has been successfully created, with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host template\r",
									"    pm.collectionVariables.set(\"HostTemplate1Id\", responseJson.id);\r",
									"\r",
									"    pm.expect(responseJson).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostTemplate1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"HostTemplate1Alias\"),\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"timezone_id\": 1,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"note_url\": \"noteUrl-value\",\r",
									"        \"note\": \"note-value\",\r",
									"        \"action_url\": \"actionUrl-value\",\r",
									"        \"max_check_attempts\": 3,\r",
									"        \"normal_check_interval\": 5,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"notification_options\": 31,\r",
									"        \"notification_interval\": 5,\r",
									"        \"notification_timeperiod_id\": 2,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"first_notification_delay\": 2,\r",
									"        \"recovery_notification_delay\": 1,\r",
									"        \"acknowledgement_timeout\": 5,\r",
									"        \"freshness_checked\": 1,\r",
									"        \"freshness_threshold\": 2,\r",
									"        \"flap_detection_enabled\": 1,\r",
									"        \"low_flap_threshold\": 25,\r",
									"        \"high_flap_threshold\": 75,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"3\",\r",
									"        \"comment\": \"1, 2, 3\",\r",
									"        \"is_locked\": false\r",
									"    });\r",
									"    pm.expect(responseJson.check_command_args).to.include(\"OUTPUT\");\r",
									"    pm.expect(responseJson.event_handler_command_args).to.include(\"%d\");\r",
									"    pm.expect(responseJson.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.templates).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.macros[0]).to.include({\r",
									"        \"name\": \"NAMEA\",\r",
									"        \"value\": \"valueA\",\r",
									"        \"is_password\": false,\r",
									"        \"description\": \"some text\"\r",
									"    });\r",
									"    pm.expect(responseJson.macros[1]).to.include({\r",
									"        \"name\": \"NAMEB\",\r",
									"        \"value\": null,\r",
									"        \"is_password\": true,\r",
									"        \"description\": null\r",
									"    });\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8e73d855-2405-4da4-a2bf-2276b7713c3f"
							}
						}
					],
					"id": "fad11b85-4c35-41d1-92e7-27300967f7b1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{HostTemplate1Name}}\",\r\n    \"alias\": \"{{HostTemplate1Alias}}\",\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"   snmpCommunity-test\",\r\n    \"timezone_id\": 1,\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"OUTPUT\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"note_url\": \"noteUrl-value\",\r\n    \"note\": \"note-value\",\r\n    \"action_url\": \"actionUrl-value\",\r\n    \"max_check_attempts\": 3,\r\n    \"normal_check_interval\": 5,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_options\": 31,\r\n    \"notification_interval\": 5,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"first_notification_delay\": 2,\r\n    \"recovery_notification_delay\": 1,\r\n    \"acknowledgement_timeout\": 5,\r\n    \"freshness_checked\": 1,\r\n    \"freshness_threshold\": 2,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 25,\r\n    \"high_flap_threshold\": 75,\r\n    \"event_handler_enabled\": 2,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"%d\"],\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"comment\": \"1, 2, 3\",\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"nameA\",\r\n        \"value\": \"valueA\",\r\n        \"is_password\": false,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"nameB\",\r\n        \"value\": \"valueB\",\r\n        \"is_password\": true,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a first host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host1Name\", \"host_001\");\r",
									"pm.collectionVariables.set(\"Host1Alias\", \"I'm the first host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "55f713d0-a898-42e7-936e-e80976aa011c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    console.log(response);\r",
									"    pm.collectionVariables.set(\"Host1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host1Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": \"1, 2, 3\",\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"    pm.expect(response.templates[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"            \"name\": \"TRY\",\r",
									"            \"value\": null,\r",
									"            \"is_password\": true,\r",
									"            \"description\": \"some text\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"            \"name\": \"AGAIN\",\r",
									"            \"value\": \"encore\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": null\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "59e71693-a849-47c7-89d1-40eb4729bffb"
							}
						}
					],
					"id": "f5937fcd-5f5d-45bd-a89a-138996a2d694",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host1Name}}\",\r\n    \"alias\": \"{{Host1Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"snmpCommunity-test\",\r\n    \"templates\": [{{HostTemplate1Id}}],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"try\",\r\n        \"value\": \"essaye\",\r\n        \"is_password\": true,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"again\",\r\n        \"value\": \"encore\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a second host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host2Name\", \"host_002\");\r",
									"pm.collectionVariables.set(\"Host2Alias\", \"I'm the second host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cf8ba805-1b4c-461d-9d88-670d6a3930dc"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host2Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    console.log(response);\r",
									"    pm.collectionVariables.set(\"Host2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host2Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host2Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": \"1, 2, 3\",\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostGroup1Name\")\r",
									"    });\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.templates[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"            \"name\": \"TRY\",\r",
									"            \"value\": null,\r",
									"            \"is_password\": true,\r",
									"            \"description\": \"some text\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"            \"name\": \"AGAIN\",\r",
									"            \"value\": \"encore\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": null\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dd7fbe52-0165-46b0-bc3b-1c69da29bb81"
							}
						}
					],
					"id": "677937de-485a-4f3d-90e8-8e3ad79c7e00",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host2Name}}\",\r\n    \"alias\": \"{{Host2Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"snmpCommunity-test\",\r\n    \"templates\": [{{HostTemplate1Id}}],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"groups\": [ {{HostGroup1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"try\",\r\n        \"value\": \"essaye\",\r\n        \"is_password\": true,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"again\",\r\n        \"value\": \"encore\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a third host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Host3Name\", \"host_003\");\r",
									"pm.collectionVariables.set(\"Host3Alias\", \"I'm the third host created by admin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0741b90b-8af9-4374-8421-d1d64ce7b860"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host has been successfully created, with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host3Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new host\r",
									"    var response = JSON.parse(responseBody);\r",
									"    console.log(response);\r",
									"    pm.collectionVariables.set(\"Host3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Host3Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"Host3Alias\"),\r",
									"        \"address\": \"127.0.0.1\",\r",
									"        \"monitoring_server_id\": 1,\r",
									"        \"snmp_version\": \"2c\",\r",
									"        \"geo_coords\": null,\r",
									"        \"note_url\": null,\r",
									"        \"note\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"comment\": \"1, 2, 3\",\r",
									"        \"timezone_id\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"notification_options\": null,\r",
									"        \"notification_interval\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"add_inherited_contact_group\": false,\r",
									"        \"add_inherited_contact\": false,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"HostCategory1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"HostCategory1Name\")\r",
									"    });\r",
									"    pm.expect(response.templates[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"            \"name\": \"TRY\",\r",
									"            \"value\": null,\r",
									"            \"is_password\": true,\r",
									"            \"description\": \"some text\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"            \"name\": \"AGAIN\",\r",
									"            \"value\": \"encore\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": null\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bb00895a-3864-4371-bf6c-0ddba115a4ed"
							}
						}
					],
					"id": "d6901cdf-3064-4e93-83a8-a486f93e0a3a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Host3Name}}\",\r\n    \"alias\": \"{{Host3Alias}}\",\r\n    \"address\": \"127.0.0.1\",\r\n    \"monitoring_server_id\": 1,\r\n    \"snmp_version\": \"2c\",\r\n    \"snmp_community\": \"snmpCommunity-test\",\r\n    \"templates\": [{{HostTemplate1Id}}],\r\n    \"comment\": \"1, 2, 3\",\r\n    \"categories\": [ {{HostCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"try\",\r\n        \"value\": \"essaye\",\r\n        \"is_password\": true,\r\n        \"description\": \"some text\"\r\n        },\r\n        {\r\n        \"name\": \"again\",\r\n        \"value\": \"encore\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ServiceTemplate1Name\", \"service template 1\");\r",
									"pm.collectionVariables.set(\"ServiceTemplate1Alias\", \"I-m a super service\");\r",
									""
								],
								"type": "text/javascript",
								"id": "2ca4831a-bbd6-4d27-a5d1-05484843fc89"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service template has been successfully created, with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service template\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"ServiceTemplate1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceTemplate1Name\"),\r",
									"        \"alias\": pm.collectionVariables.get(\"ServiceTemplate1Alias\"),\r",
									"        \"comment\": \"Kouroukoukou roukoukou stach stach\",\r",
									"        \"service_template_id\": null,\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"max_check_attempts\": 5,\r",
									"        \"normal_check_interval\": 3,\r",
									"        \"retry_check_interval\": 2,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 1,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": 2,\r",
									"        \"notification_type\": 36,\r",
									"        \"first_notification_delay\": 19,\r",
									"        \"recovery_notification_delay\": 9,\r",
									"        \"acknowledgement_timeout\": 8,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": 11,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": 49,\r",
									"        \"high_flap_threshold\": 51,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": 1,\r",
									"        \"note\": \"note\",\r",
									"        \"note_url\": \"note_url\",\r",
									"        \"action_url\": \"action url\",\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"3\",\r",
									"        \"severity_id\": null,\r",
									"        \"is_locked\": false,\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.host_templates).to.include(pm.collectionVariables.get(\"HostTemplate1Id\"));\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"            \"name\": \"POURQUOI\",\r",
									"            \"value\": \"ABCDEFG3\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": \"2f86451\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"            \"name\": \"TOTO\",\r",
									"            \"value\": null,\r",
									"            \"is_password\": true,\r",
									"            \"description\": \"\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
									"            \"host_template_id\": pm.collectionVariables.get(\"HostTemplate1Id\"),\r",
									"            \"host_template_name\": pm.collectionVariables.get(\"HostTemplate1Name\")\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"id": "74d779e8-28c2-4d2c-a08a-5c788a77b2f1"
							}
						}
					],
					"id": "e7888f47-c021-4761-8f87-9d1276e45774",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{ServiceTemplate1Name}}\",\r\n    \"alias\": \"{{ServiceTemplate1Alias}}\",\r\n    \"host_templates\": [{{HostTemplate1Id}}],\r\n    \"comment\": \"Kouroukoukou roukoukou stach stach\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 5,\r\n    \"normal_check_interval\": 3,\r\n    \"retry_check_interval\": 2,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 1,\r\n    \"notification_timeperiod_id\": 2,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 19,\r\n    \"recovery_notification_delay\": 9,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 2,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 2,\r\n    \"low_flap_threshold\": 49,\r\n    \"high_flap_threshold\": 51,\r\n    \"event_handler_enabled\": 2,\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"note\",\r\n    \"note_url\": \"note_url\",\r\n    \"action_url\": \"action url\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"3\",\r\n    \"macros\": [\r\n        {\r\n            \"name\": \"Pourquoi\",\r\n            \"value\": \"ABCDEFG3\",\r\n            \"is_password\": false,\r\n            \"description\": \"2f86451\"\r\n        },\r\n        {\r\n            \"name\": \"TOTO\",\r\n            \"value\": \"cacahuètes\",\r\n            \"is_password\": true,\r\n            \"description\": null\r\n        }\r\n    ],\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ \r\n        {\r\n            \"service_group_id\": {{ServiceGroup1Id}},\r\n            \"host_template_id\": {{HostTemplate1Id}}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with all properties defined",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service1Name\", \"service 001\");\r",
									""
								],
								"type": "text/javascript",
								"id": "022cee06-6954-4774-98cb-7e71d576e269"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service1Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"service_template_id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"comment\": \"comment\",\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"max_check_attempts\": 7,\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"volatility_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": true,\r",
									"        \"notification_interval\": 9,\r",
									"        \"notification_timeperiod_id\": 3,\r",
									"        \"notification_type\": 36,\r",
									"        \"first_notification_delay\": 4,\r",
									"        \"recovery_notification_delay\": 5,\r",
									"        \"acknowledgement_timeout\": 8,\r",
									"        \"freshness_checked\": 0,\r",
									"        \"freshness_threshold\": 11,\r",
									"        \"flap_detection_enabled\": 1,\r",
									"        \"low_flap_threshold\": 36,\r",
									"        \"high_flap_threshold\": 87,\r",
									"        \"event_handler_enabled\": 0,\r",
									"        \"event_handler_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"graph_template_id\": 1,\r",
									"        \"note\": \"Bloubloublou\",\r",
									"        \"note_url\": \"Hakuna Matata\",\r",
									"        \"action_url\": \"Chachacha\",\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"4\",\r",
									"        \"severity_id\": pm.collectionVariables.get(\"ServiceSeverity1Id\"),\r",
									"        \"geo_coords\": \"12.34,23.5\",\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.include(\"Holà\", \"Hello\");\r",
									"    pm.expect(response.event_handler_command_args).to.include(\"Hi\", \"Bjour\");\r",
									"    pm.expect(response.macros[0]).to.include({\r",
									"            \"name\": \"MACROA\",\r",
									"            \"value\": \"A\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": \"\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.macros[1]).to.include({\r",
									"            \"name\": \"MACROB\",\r",
									"            \"value\": \"B\",\r",
									"            \"is_password\": false,\r",
									"            \"description\": \"\"\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\")\r",
									"        }\r",
									"    );\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"id": "045073cf-e497-4a1c-991d-ba95e5d69f6b"
							}
						}
					],
					"id": "598dcd4a-bfa8-4fd8-aed6-b4779f07d7b0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service1Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (1)\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"id": "84c4f295-a085-4ff2-a082-7faa59107503"
							}
						}
					],
					"id": "1dc8822e-a68f-47d1-83a7-078879426b14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with mandatory properties defined + check command",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service2Name\", \"service 002\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "128e223b-b2a9-4cdf-93b0-2c3b41595378"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service2Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service2Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": null,\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9d874e8e-c0f7-485d-aabd-14a29633ac93"
							}
						}
					],
					"id": "8e03ccec-593b-4cc6-88e8-8e70a07e41a9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service2Name}}\",\r\n    \"host_id\": {{Host2Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"service_template\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "972c6b36-4686-4b06-b82e-d7b43988db8f"
							}
						}
					],
					"id": "a5661164-1a5a-4cf3-b541-f6e1b5c304e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with mandatory properties defined + template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service3Name\", \"service 003\");\r",
									""
								],
								"type": "text/javascript",
								"id": "091edfa3-5bc3-4a9c-b340-7a2ab8b4693b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service3Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service3Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": null,\r",
									"        \"notification_timeperiod_id\": null,\r",
									"        \"notification_type\": null,\r",
									"        \"first_notification_delay\": null,\r",
									"        \"recovery_notification_delay\": null,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"id": "54790561-5958-4cec-a922-370403148199"
							}
						}
					],
					"id": "a160fd5a-0567-4c97-84dd-ed644e369b4a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service3Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"service_template\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2c4fe388-90a2-4444-83f3-8491fe6e6b34"
							}
						}
					],
					"id": "ec6ba5d3-cfa5-4f28-b126-91cfd375adb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services linked to the Host Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "30bc0740-15c4-4f49-8c48-5ed792817324"
							}
						}
					],
					"id": "18b899c8-5560-4bbf-8aad-f8aafe4e8f0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e9462128-2d06-4fe9-ae11-35d5f518aea8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the name is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[name] The property name is required\\n\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "40af53ed-5515-4425-951f-6383aeb7b7c5"
							}
						}
					],
					"id": "83583976-8105-45ff-bd58-d107fe1927aa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without host",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d708d71f-63c2-4fb3-a19b-38a678c77ff9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the host is mandatory.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[host_id] The property host_id is required\\n\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82dee1b5-b9b4-4574-af02-782447c179e0"
							}
						}
					],
					"id": "72330f9a-1d09-44f0-8493-e7d46b289ed6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 333\",\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service without check command",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "67ea7307-e733-43c7-a05e-94444c0374f0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the check command or template is mandatory.\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"The check command cannot be null if the service template is null\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a0403a0b-6f9c-43ba-be2e-2649e6b060fd"
							}
						}
					],
					"id": "33a7f5d6-f237-4281-902f-d477ca8d2b21",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 333\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with empty name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7f9f1a5f-ae64-4cd3-867a-8044c3454b8e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The service has not been created, because the name cannot be empty.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"[NewService::name] The string is empty, but non empty string was expected\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "73c670be-b50c-4cca-b478-4a0fff58837a"
							}
						}
					],
					"id": "e841c153-e895-4405-a5de-784762cb511d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service with special characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service4Name\", \"sérvîcè-004\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c4596904-1580-420b-a49b-36f61629b69c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service4Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service4Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host3Id\"),\r",
									"        \"comment\": \"comment\",\r",
									"        \"service_template_id\": pm.collectionVariables.get(\"ServiceTemplate1Id\"),\r",
									"        \"check_command_id\": null,\r",
									"        \"check_timeperiod_id\": 1,\r",
									"        \"max_check_attempts\": 7,\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"active_check_enabled\": 1,\r",
									"        \"passive_check_enabled\": 0,\r",
									"        \"volatility_enabled\": 0,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": 9,\r",
									"        \"notification_timeperiod_id\": 3,\r",
									"        \"notification_type\": 36,\r",
									"        \"first_notification_delay\": 4,\r",
									"        \"recovery_notification_delay\": 5,\r",
									"        \"acknowledgement_timeout\": 8,\r",
									"        \"freshness_checked\": 0,\r",
									"        \"freshness_threshold\": 11,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": 1,\r",
									"        \"note\": \"Bloubloublou\",\r",
									"        \"note_url\": \"Hakuna Matata\",\r",
									"        \"action_url\": \"Chachacha\",\r",
									"        \"icon_id\": 1,\r",
									"        \"icon_alternative\": \"4\",\r",
									"        \"geo_coords\": \"12.34,23.5\",\r",
									"        \"severity_id\": pm.collectionVariables.get(\"ServiceSeverity1Id\"),\r",
									"        \"is_activated\": true,\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cd8b8962-2a81-47f8-8df0-a6f4dd089be7"
							}
						}
					],
					"id": "5fa55419-9d93-4add-95a3-21f0613d358b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service4Name}}\",\r\n    \"host_id\": {{Host3Id}},\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"service_template\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[3].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2de8cd86-bee8-4c10-884f-abbaa8e06eda"
							}
						}
					],
					"id": "35b7cd73-0aac-4ba4-a803-6f6dae062e71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services linked to the Host Group 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"service_template\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "75b66bb5-e2a6-4752-8f55-8d0b647dfa0e"
							}
						}
					],
					"id": "908c569a-5cb3-40c4-8c92-a370ab1f3385",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services linked to the Host Category 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (0)\r",
									"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "06e6437f-2d17-4718-9724-5a4a831b41f5"
							}
						}
					],
					"id": "8b19c8ca-5224-4e92-8206-43c478c05f92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{\"$eq\":\"{{HostCategory2Id}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"hostcategory.id\":{\"$eq\":\"{{HostCategory2Id}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Service2Alias\") + \"' has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5291afda-9be8-4932-ae15-c8491a6f161e"
							}
						}
					],
					"id": "2bf41c3e-13ac-45bb-ab41-9a09810d0ec0",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": true,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"acknowledgement_timeout\": 8,\r\n    \"freshness_checked\": 0,\r\n    \"freshness_threshold\": 11,\r\n    \"flap_detection_enabled\": 1,\r\n    \"low_flap_threshold\": 36,\r\n    \"high_flap_threshold\": 87,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1,\r\n    \"icon_alternative\": \"4\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"geo_coords\": \"12.34,23.5\",\r\n    \"is_activated\": true,\r\n    \"service_categories\": [ {{ServiceCategory2Id}} ],\r\n    \"macros\": [\r\n        {\r\n        \"name\": \"MACROA\",\r\n        \"value\": \"A\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        },\r\n        {\r\n        \"name\": \"MACROB\",\r\n        \"value\": \"B\",\r\n        \"is_password\": false,\r\n        \"description\": null\r\n        }\r\n    ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service2Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service2Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service2Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory2Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[3].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f4da7079-cdc8-4e80-909d-59e7b7eec636"
							}
						}
					],
					"id": "e8117e2a-586f-430f-9c27-5004409e2028",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service2Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service2Name\");\r",
									"    pm.collectionVariables.unset(\"Service2Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f7e55118-b09b-41e2-881c-1cc11ba4ad58"
							}
						}
					],
					"id": "2e7b27db-0880-4074-8d2c-b2c31f88076e",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "39018c42-3bd3-45b8-82a1-6e33e492fbe1"
							}
						}
					],
					"id": "85eaf335-929b-46bc-afa6-752f5293c000",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "ed5784db-8418-47f2-83fc-7397319b3d69"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "20b0e277-2751-40f6-8640-cce422a9299d"
							}
						}
					],
					"id": "336cbc1d-887d-43db-8897-3d1158f3a692",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2fa21e2d-844b-46fb-afd9-acefcc84cdf6"
							}
						}
					],
					"id": "0fe34037-8dd0-4790-a237-25578b0b4ad5",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "429a476c-566e-4bf6-a77b-30bf9bf73e42"
		},
		{
			"name": "User with R/W rights",
			"item": [
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8a850a19-0e79-4360-be83-9e955f556544"
							}
						}
					],
					"id": "4552ed33-12cd-4f55-8b7b-d81e81071d94",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e7ccbec0-ef27-495c-8dd0-b719b859a4de"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service5Name\") + \"'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Creation of a variable with the ID of the new service\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"Service5Id\", response.id);\r",
									"\r",
									"    pm.expect(response).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service5Name\"),\r",
									"        \"host_id\": pm.collectionVariables.get(\"Host2Id\"),\r",
									"        \"comment\": null,\r",
									"        \"service_template_id\": null,\r",
									"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
									"        \"check_timeperiod_id\": null,\r",
									"        \"max_check_attempts\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"active_check_enabled\": 2,\r",
									"        \"passive_check_enabled\": 2,\r",
									"        \"volatility_enabled\": 2,\r",
									"        \"notification_enabled\": 2,\r",
									"        \"is_contact_additive_inheritance\": false,\r",
									"        \"is_contact_group_additive_inheritance\": false,\r",
									"        \"notification_interval\": 9,\r",
									"        \"notification_timeperiod_id\": 3,\r",
									"        \"notification_type\": 36,\r",
									"        \"first_notification_delay\": 4,\r",
									"        \"recovery_notification_delay\": 5,\r",
									"        \"acknowledgement_timeout\": null,\r",
									"        \"freshness_checked\": 2,\r",
									"        \"freshness_threshold\": null,\r",
									"        \"flap_detection_enabled\": 2,\r",
									"        \"low_flap_threshold\": null,\r",
									"        \"high_flap_threshold\": null,\r",
									"        \"event_handler_enabled\": 2,\r",
									"        \"event_handler_command_id\": null,\r",
									"        \"graph_template_id\": null,\r",
									"        \"note\": null,\r",
									"        \"note_url\": null,\r",
									"        \"action_url\": null,\r",
									"        \"icon_id\": null,\r",
									"        \"icon_alternative\": null,\r",
									"        \"geo_coords\": null,\r",
									"        \"severity_id\": null,\r",
									"        \"is_activated\": true,\r",
									"    });\r",
									"\r",
									"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(response.categories[0]).to.include({\r",
									"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
									"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
									"        }\r",
									"    );\r",
									"    pm.expect(response.groups[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "340721b9-f0a7-493f-ace9-dbf04c6b3260"
							}
						}
					],
					"id": "cfa776ad-fb36-4a98-bde0-aebc90b3e764",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Service5Name}}\",\r\n    \"host_id\": {{Host2Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "80cf4690-64d7-4228-a601-fd895bf2af01"
							}
						}
					],
					"id": "d8bcf80d-2d09-440c-9745-decdb79d1f2c",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bfaec726-f505-4bab-8324-62f9744dc897"
							}
						}
					],
					"id": "91d4c2b3-4691-4184-b565-8faec09d506e",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reload ACL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "b1eb49aa-4afc-486c-afc4-5540e13f9452"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "553b6139-ec51-4643-9310-5bdfecd8aa11"
							}
						}
					],
					"id": "a4c2757d-25ca-4d5e-8d71-94b5786b697a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c01ba932-78f5-4986-ad77-c10423c8b34f"
							}
						}
					],
					"id": "21a59990-78b9-4f44-8c9e-0d2e2997c61e",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				},
				{
					"name": "Login with Read/Write user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c42b71b1-d445-47da-bc72-549740bf859c"
							}
						}
					],
					"id": "0c7b0fad-21ad-43fe-b583-e625e21e24d4",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW}}\",\r\n      \"password\": \"{{api_password_user_RW}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (4)\r",
									"    pm.expect(responseJson.result.length).to.eql(4);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[3]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service5Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service5Name\"),\r",
									"        \"service_template\": null,\r",
									"        \"check_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[3].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
									"    }]);\r",
									"    pm.expect(responseJson.result[3].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host2Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host2Name\") \r",
									"    }]);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "16885e02-78f6-4e71-a26f-856d2de3450a"
							}
						}
					],
					"id": "9c1feaa2-76ac-4b45-a050-eddd81a034a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services linked to the Host Category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"        pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5f2adb46-927c-48b2-ab90-8549870f03ce"
							}
						}
					],
					"id": "134dfdd3-ad3f-4852-abb7-a0799dd59348",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.name\":{\"$eq\":\"{{HostCategory1Name}}\"}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{\"hostcategory.name\":{\"$eq\":\"{{HostCategory1Name}}\"}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service5Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service5Name\");\r",
									"    pm.collectionVariables.unset(\"Service5Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cd7c7528-25da-4d07-b003-e47026f7f080"
							}
						}
					],
					"id": "c95da650-c8d9-448b-bfa5-73cc97e5c131",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service5Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service5Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3447329e-98d4-400b-ad35-8de831eac484"
							}
						}
					],
					"id": "adb8e0c6-6053-4b66-9635-aa77ccd51485",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service4Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Service4Alias\") + \"' has been successfully updated.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5f2e624d-33fa-4967-984c-2e21c689feb4"
							}
						}
					],
					"id": "d2e76060-55c9-4933-9179-a1fa0957e46a",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"service_template_id\": {{ServiceTemplate1Id}},\r\n    \"comment\": \"comment\",\r\n    \"check_command_id\": {{CommandId}},\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 2,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": true,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 4,\r\n    \"low_flap_threshold\": 1,\r\n    \"high_flap_threshold\": 99,\r\n    \"event_handler_enabled\": 0,\r\n    \"event_handler_command_id\": {{CommandId}},\r\n    \"event_handler_command_args\": [\"Hi\", \"Bjour\"],\r\n    \"graph_template_id\": 1,\r\n    \"note\": \"Bloubloublou\",\r\n    \"note_url\": \"Hakuna Matata\",\r\n    \"action_url\": \"Chachacha\",\r\n    \"icon_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 2, \r",
									"        name: \"none\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 4, \r",
									"        name: \"workhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2cfa7ff1-c2a4-4d7f-be89-e8ae63a6d742"
							}
						}
					],
					"id": "1858545e-361b-46c2-a356-800f1d02c806",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from R/W user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "15118ff2-52d8-49f5-b76b-3720fff17fbe"
							}
						}
					],
					"id": "cc97fcfd-5add-4e4f-b454-a7cce0890a55",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "ccc010fa-6457-4a39-bac8-4cd4ec4dd744"
		},
		{
			"name": "User with R/W rights with filters",
			"item": [
				{
					"name": "No access",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "df31dc57-1172-4b1d-9a0f-8cddf736a560"
									}
								}
							],
							"id": "40fed14c-0469-4a3c-80f4-afdaa18e6c73",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service6Name\", \"service 006\");\r",
											""
										],
										"type": "text/javascript",
										"id": "efe7304d-e7de-4f7a-b73b-4e3c34d6ae49"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service6Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service6Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service6Name\"),\r",
											"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
											"        \"comment\": null,\r",
											"        \"service_template_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"volatility_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"is_contact_additive_inheritance\": false,\r",
											"        \"is_contact_group_additive_inheritance\": false,\r",
											"        \"notification_interval\": 9,\r",
											"        \"notification_timeperiod_id\": 3,\r",
											"        \"notification_type\": 36,\r",
											"        \"first_notification_delay\": 4,\r",
											"        \"recovery_notification_delay\": 5,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"graph_template_id\": null,\r",
											"        \"note\": null,\r",
											"        \"note_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"is_activated\": true,\r",
											"    });\r",
											"\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
											"        }\r",
											"    );\r",
											"    pm.expect(response.groups[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
											"    })\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a06f80c2-4981-4def-b39f-c18a5a5958cc"
									}
								}
							],
							"id": "b1b480d3-295e-4759-96db-90c20c0e8e1f",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service6Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "00416281-c403-4c92-adc7-b060322dff43"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "97983559-2c26-4de5-9908-d88288328dd0"
									}
								}
							],
							"id": "c69f7d65-be84-4f3b-b133-2fc039901a00",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "5667938f-80aa-43f7-8275-f17064fa11c0"
									}
								}
							],
							"id": "865784a2-db2f-49b4-875f-d71a3654a5a0",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "05067c01-114d-4125-9a29-9ecb39c66232"
									}
								}
							],
							"id": "a8367d3e-baab-4888-b50f-0325799b29a4",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct access rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "49ef9912-23e8-457b-a797-bf1d02da3eb3"
									}
								}
							],
							"id": "6e2d3132-4fda-4dd0-84bd-55627b3b48fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with Host Group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct access rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "80eeff48-1a96-4443-9d79-e2cc6e1b8ae1"
									}
								}
							],
							"id": "2a548ae6-79cb-46bb-80c8-61587a1d1185",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "155a2d0f-83bc-43f1-9a73-cb8260cd9bc2"
									}
								}
							],
							"id": "fb3dd935-4a7a-44d2-9c97-d0136fa18864",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"check_command_args\": [\"Holà\", \"Hello\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 7,\r\n    \"normal_check_interval\": 2,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 0,\r\n    \"volatility_enabled\": 0,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "01dd66bc-b90b-4705-bb7e-ffdff668abef"
									}
								}
							],
							"id": "7affd29c-bb58-4188-8bca-3a31cfecbb25",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d4d8de84-1d0e-4a66-8c50-e56a1d8240bc"
									}
								}
							],
							"id": "45bb155b-1e89-4abc-90a2-1a90a8f8b257",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "b2a8b7a8-3bb5-4086-a51c-05a01afd6b70"
				},
				{
					"name": "Access only to HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "42da13de-78b3-44d1-afcf-e5604de2d682"
									}
								}
							],
							"id": "0f6bc7ba-a56f-49a9-aad8-693853e38175",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show ACLResources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resource has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var response = JSON.parse(responseBody);",
											"    pm.collectionVariables.set(\"ACLResources\", response.result[1].name);",
											"});"
										],
										"type": "text/javascript",
										"id": "55e45a40-191d-4b05-8f67-174baf9572de"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "80ef826b-1eed-40fc-900a-01adb98ab55f"
									}
								}
							],
							"id": "ec1d7f15-9cb8-4b94-9e87-5398957d4249",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLRESOURCE\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Host Category to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the host category has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "16097944-83e5-44a0-baff-56b78906623d"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "1e1d88fa-34f7-4e70-9441-6915e780730c"
									}
								}
							],
							"id": "4394d20b-b0d9-4497-8b1e-c59941683d4c",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "e12867b1-42a7-47aa-99fb-00ef9a7e1926"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1124f99f-55a7-4b65-a4e3-e6625394ef09"
									}
								}
							],
							"id": "deeae2c7-f4a1-4178-88c6-f037151daf17",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "90cfd108-ebd4-43f4-8e2a-b94900fa8728"
									}
								}
							],
							"id": "c0fcc2fe-754f-4e09-b0aa-e22239de76ca",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "14975ab2-1b49-43b0-a869-b68e8642379e"
									}
								}
							],
							"id": "71ccce54-9f5e-4572-828c-281f8eca465e",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "e730ba68-333f-4e4c-b06d-ca01cc882369"
									}
								}
							],
							"id": "be3a7986-d564-4897-b072-1ef3d2956df4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c6a92f13-feca-43e8-8aa2-725a606f6154"
									}
								}
							],
							"id": "dd0410d3-92ff-4e6e-98bd-14bb9da03a8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3b6379df-286b-4ac2-b664-844c26163fe1"
									}
								}
							],
							"id": "0f39a768-924e-434f-82e8-89d27d866499",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "abb70aee-555a-4bb7-ae2b-ef4ca3f76a42"
									}
								}
							],
							"id": "2bc91569-66d2-4caa-bf16-f99e4600d763",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "2845dbf1-2bdd-428d-93d9-dc3c59ddeaa8"
				},
				{
					"name": "Access to SC & HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "6a25fa81-a604-498e-bfa1-f7cb0cfeb656"
									}
								}
							],
							"id": "85931424-3161-4a67-9c37-2ce1daa7b7c3",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Service Category to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the service category has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "bf7f3523-d45a-4aee-aa10-ea3629aba21c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "bc8ae7f5-470b-4fc7-bfad-217760e1e98c"
									}
								}
							],
							"id": "d79238cc-b018-4c3e-82a3-b68abf2a3eb9",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "41cf0c79-a9d6-48de-aa21-3ab46091d3fd"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "686a49c0-f2f6-42fb-8ed2-583b037d12a6"
									}
								}
							],
							"id": "4641121c-5275-4488-ae35-a20a725e757f",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4aa9a001-fac9-47ca-a467-317c4d6a3cd3"
									}
								}
							],
							"id": "5eab2c85-8c93-431a-9153-67fef68601f4",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "25070bb0-b962-4cad-9937-b90f581eb3f5"
									}
								}
							],
							"id": "b0145a66-5cc6-45a6-8a78-1ebbecf3d78f",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "fa04991a-4fc9-4597-b950-31af1166d6fb"
									}
								}
							],
							"id": "0012d967-cf57-4d39-92af-02fe3375498f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1 and host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "01db5cd3-199e-4c52-aaec-619fc6f37492"
									}
								}
							],
							"id": "7f23dd2a-698f-437b-84f4-175426004e13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4a4c9a9c-48af-453a-a909-6f5b486452d4"
									}
								}
							],
							"id": "0407bf6b-339e-4927-8ad2-dbec4571c15d",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3589bff1-c559-4004-a2df-2db21f00e250"
									}
								}
							],
							"id": "8e042c70-355c-4496-aa71-451d418d3d38",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "f4ebe3be-f1a8-440c-82ab-239c03267621"
				},
				{
					"name": "Access to SG + filter on SC & HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "944cb2c0-0191-40d4-a7a3-3ddd5e76472a"
									}
								}
							],
							"id": "8b6982bc-a2eb-4c81-a189-afa58ddf2d6c",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Service Group to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been granted to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "3578b8e5-193b-4234-93dd-098896ff3d67"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "13fae6bc-a814-4f87-a4dc-740858f534bc"
									}
								}
							],
							"id": "eef4cd88-ad32-4bff-bb09-4405aaf06065",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_servicegroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "4192b17e-91b5-4aff-ab3d-2661e813cc99"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "08cb35f1-fafd-4c5f-a478-c511357810a2"
									}
								}
							],
							"id": "35387ef8-0500-4bff-8250-5441ef0ebe17",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4884dc43-762c-49e7-aa05-ddb0570a7cae"
									}
								}
							],
							"id": "ea22c31b-9342-4a32-86f7-478714632b85",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d561c2ce-6ae9-42f1-99d5-d5d369f0d1e3"
									}
								}
							],
							"id": "ab3dfe43-3214-4d7b-8238-ff74d4882622",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service with a severity (error)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "9b480b4e-68f9-4f85-a06a-d6686b8da738"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"pm.test(\"The service was not created because the user does not have sufficient rights for the severity which is not recognized.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"The severity_id with value '\" + pm.collectionVariables.get(\"ServiceSeverity1Id\") +\"' does not exist\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "68e2cbdb-1138-488c-8c1b-01acd89e32ef"
									}
								}
							],
							"id": "903a8975-8860-4840-a2d4-adaca6eb1235",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Service6.5\",\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a service with a severity (error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"pm.test(\"The service was not updated because the user does not have sufficient rights for the severity which is not recognized.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql('Service not found');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5cdd9d68-fe9e-45a6-a0d4-8f6455abbd72"
									}
								}
							],
							"id": "19b2d478-f761-4ecf-8098-f03c84aba76a",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"severity_id\": {{ServiceSeverity1Id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service3Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service3Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service6Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "f535c627-025a-45c8-9444-2161f3c000e2"
									}
								}
							],
							"id": "ddb43ebb-8029-419f-8440-59b6ec4ae68c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service6Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service6Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "f692549e-6ef6-43b1-b846-eaa3fb5ad085"
									}
								}
							],
							"id": "e2b99a41-c7ed-4746-9b15-228f76186735",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{\"$eq\":\"{{HostCategory1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service6Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service6Name\");\r",
											"    pm.collectionVariables.unset(\"Service6Id\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "cc651325-ccc5-446e-82d4-7a019d9ecf2d"
									}
								}
							],
							"id": "e66382ad-f8e7-4100-8b54-314e8861ae33",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service6Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service6Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "ffb7b2e1-1378-4433-bc82-d59f24c957de"
									}
								}
							],
							"id": "00f10bb6-5df9-4853-b2b0-c660e0b958f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "36a7021f-5212-41ec-b1a5-7887d0e461ac"
									}
								}
							],
							"id": "0faa6a82-7462-43be-a40f-3ed00fba8a86",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "eec394ea-c2ce-47c3-90c2-476763155a43"
				},
				{
					"name": "Access to SG & HG + filter on SC & HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "f1831a15-3ff4-4669-9a7f-092a8ff6914f"
									}
								}
							],
							"id": "b10be85d-43b2-429c-8caf-fe58e2a0a11d",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the Host Group to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "8c46e04e-4b9b-42c4-a2d8-3c9fb88b899c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "01a34018-9f05-4d61-b71b-1f11509e6394"
									}
								}
							],
							"id": "c99461b3-980a-4bef-b35d-ce0093f318d6",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "688c62b6-57d0-4be0-b2c6-14d8a8e546d0"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "35d13e11-4e47-4f5f-9500-d0cccc2112c5"
									}
								}
							],
							"id": "a8c020e3-6812-4fb0-be0d-71ce73a246b5",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "1408d06a-9dca-4c18-9186-cf5e13ea7f4b"
									}
								}
							],
							"id": "4eb8c647-58ff-4c99-9f45-ed026a0717f6",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d1539a64-967f-4e71-a9e6-2434c3909549"
									}
								}
							],
							"id": "2ea44f15-12fe-4851-8212-e09b236a106b",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "78e8ad5f-3296-4c84-b9df-6344abc05fb7"
									}
								}
							],
							"id": "6b9c7f4d-2732-4369-a15e-8f6c57d84e78",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "07110cc7-80ef-4f89-9d87-aba5b7e76d4c"
									}
								}
							],
							"id": "99b49511-c099-4fd7-bb3c-e1babc3c10db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.name\":{\"$eq\":\"{{HostCategory1Name}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.name\":{\"$eq\":\"{{HostCategory1Name}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a5be75f2-79be-4622-850a-c731f96a2ac0"
									}
								}
							],
							"id": "547537cd-e75d-4d45-8933-16eedfec7ad5",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "d36d7491-babd-4eaa-b5c5-286beda3b6a9"
				},
				{
					"name": "Access only to SG with another category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "eec8bd17-c42a-43f5-b19a-e2968aba103f"
									}
								}
							],
							"id": "8735d892-0200-4794-8615-1850c58c8b4a",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service7Name\", \"service 007\");\r",
											""
										],
										"type": "text/javascript",
										"id": "14358b15-6288-477c-a2a1-de8190114235"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service7Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service7Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service7Name\"),\r",
											"        \"host_id\": pm.collectionVariables.get(\"Host1Id\"),\r",
											"        \"comment\": null,\r",
											"        \"service_template_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"volatility_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"is_contact_additive_inheritance\": false,\r",
											"        \"is_contact_group_additive_inheritance\": false,\r",
											"        \"notification_interval\": 9,\r",
											"        \"notification_timeperiod_id\": 3,\r",
											"        \"notification_type\": 36,\r",
											"        \"first_notification_delay\": 4,\r",
											"        \"recovery_notification_delay\": 5,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"graph_template_id\": null,\r",
											"        \"note\": null,\r",
											"        \"note_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"is_activated\": true,\r",
											"    });\r",
											"\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"            \"id\": pm.collectionVariables.get(\"ServiceCategory1Id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"ServiceCategory1Name\"),\r",
											"        }\r",
											"    );\r",
											"    pm.expect(response.groups[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"ServiceGroup1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"ServiceGroup1Name\"),\r",
											"    })\r",
											"});"
										],
										"type": "text/javascript",
										"id": "100ccbf0-eae8-4abd-94a8-5544d894b96c"
									}
								}
							],
							"id": "98a25080-e4af-4968-84d6-170db7d3b3c6",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service7Name}}\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory1Id}} ],\r\n    \"service_groups\": [ {{ServiceGroup1Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new Service Category filter to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "ee738734-9855-4130-9d0b-53723631404f"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "4c1d715d-a39e-4fc9-bd3c-cd2f263d9172"
									}
								}
							],
							"id": "c9c331a3-1f65-4473-b85e-1cd2a462e695",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been deleted from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "bccbd645-07c7-4f69-b655-e41f084c6255"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "85edaf95-98b6-4f1c-a4bc-97e974a3ee95"
									}
								}
							],
							"id": "38e0b533-9eb8-427c-b205-705beaf4e2b4",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "1d3a7d59-6431-49e6-a5e6-7a960554e6ee"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "b018fbff-4155-4622-9990-3f6791fdf9a5"
									}
								}
							],
							"id": "a1e2a3eb-b9ee-4919-a6c9-2325d517b695",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "adeb47e4-81e9-49a6-b5f0-cf5de7224902"
									}
								}
							],
							"id": "8f01bc78-d324-440b-b9c1-493f6b64ca54",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "05b9f564-ba2a-47ad-a33b-76363986e21e"
									}
								}
							],
							"id": "497ab513-1db0-4784-b02f-463a53394796",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "cb676cf3-4171-42b9-8363-7ac0d455a373"
									}
								}
							],
							"id": "290d971f-95b4-4fc0-9386-b1af4609881a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"No services listed because the user does not have correct rights\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "dc94d762-40d6-478c-8e6a-6793d805f8c0"
									}
								}
							],
							"id": "285542a6-5271-46cc-8839-f5424bd35a20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Service not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"Service not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "034d5680-b44b-4381-b1d2-e8a8c0c04175"
									}
								}
							],
							"id": "29647875-d786-485e-8a1f-de8a70bffb9b",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service7Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service7Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "0457cf3e-a70a-479c-b776-7d1d787872d5"
									}
								}
							],
							"id": "ac6b8b95-ebcf-4bcf-8db7-bc4e537c5988",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "8dac0fd3-c89b-46ef-9ff2-b53578fbeece"
				},
				{
					"name": "Access to SG & HG + filter on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "2451215e-2d88-490d-932b-9b941abc69ce"
									}
								}
							],
							"id": "0b9e4860-29dd-45a6-8ed7-4abe08306050",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the Host Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category filter has been deleted from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b19781d9-1a6a-4e93-9735-1be6445671cd"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a3499ddd-b076-4a28-afc3-a79baae61aae"
									}
								}
							],
							"id": "a7577157-0e51-4191-be34-ef8a0823e9a2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "68665f59-14ec-4839-8263-736f935fc0f5"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "edc42b46-0424-4df4-8df0-26415a3d149c"
									}
								}
							],
							"id": "c71af395-61c2-4b2f-8974-5dc3f7766d3a",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "f004fad5-771e-4b85-b9cb-36af77ea79fb"
									}
								}
							],
							"id": "6784d3bc-7af8-4647-bf18-d909df43f2c6",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "c9d4bc85-d212-496c-b9a8-d7437c9b0f06"
									}
								}
							],
							"id": "9ad4dbd3-e54e-4f85-9461-713912889810",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "704efbc9-1c90-41c8-b756-8c7661ead062"
									}
								}
							],
							"id": "05be9003-78d3-4621-8ea8-451732200b8e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "dd77fa2a-3020-428b-b494-92047dc3bfd5"
									}
								}
							],
							"id": "6c5a4de2-44b1-4bc4-8aa8-a63b63c2d590",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "77dde8cf-049d-465b-9a2f-4c6316d5c41a"
									}
								}
							],
							"id": "b6dba355-dc58-4f4d-a086-3b2b68103d92",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "5cdc3346-3cfe-4761-aaf2-9464b5659046"
				},
				{
					"name": "Access to SG & HG + another filter on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a3cbe1ac-a36b-4f80-bf8d-69a0e0893d5e"
									}
								}
							],
							"id": "802c0567-8eb4-4e8d-af11-7b01a022c85c",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new Service Category filter to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c1ae5a6f-7cb0-470d-8ebb-d22c102f076e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a49462e6-974f-4ec1-b02e-495ce8fca26e"
									}
								}
							],
							"id": "cc92e239-73a2-478a-95b3-ea415feb5956",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been deleted from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5814a1d8-c391-4478-803d-b5c61d198e02"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "fb278cb0-52ac-4875-83c7-27713556ca54"
									}
								}
							],
							"id": "70305ea8-addb-4eef-b6ac-656df539a2b4",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "e180a8bd-ea94-4098-977a-35173006f897"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "e8b780b4-652c-4544-a28a-280be735b706"
									}
								}
							],
							"id": "1d3a7d4c-8848-447d-bfee-dc48dbc9ed66",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "63f0a4db-cc7f-4d42-8f63-b402bd77dd8e"
									}
								}
							],
							"id": "6d86c0bd-148d-41a1-9b74-36b33caa715f",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "9169517f-68e9-49c1-9b99-de831d3d6880"
									}
								}
							],
							"id": "0542c027-599b-4fd8-8b66-1776e081ff1c",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service7Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c98dae61-8c2e-41ba-8733-53dfc457cb4d"
									}
								}
							],
							"id": "9d77f0d2-c493-4257-ad2a-5a2e160d03d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service7Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service7Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "bb55a78d-f0c0-4ccd-95c5-da6a40e20b0f"
									}
								}
							],
							"id": "34c6eb5f-9360-4461-8fd5-b9c3e6f46eff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service7Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service7Name\");\r",
											"    pm.collectionVariables.unset(\"Service7Id\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "da927001-7b1a-4c22-859f-910ccf87ab07"
									}
								}
							],
							"id": "40ae8d25-59ee-4390-9ba3-107a334d49c9",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service7Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service7Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "88e48478-4529-43cf-b53e-b434cc3eb005"
									}
								}
							],
							"id": "5d1d3b78-411b-4cb6-9d71-e137ee1e84d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3d19d806-23e8-4136-b73a-93779b318328"
									}
								}
							],
							"id": "27cb2660-69ed-4427-9728-1bd09b352759",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "bad419d9-a755-4cb1-b808-1317c9a22ed4"
				},
				{
					"name": "Access to HG & SG without category filter",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "569c81a8-846c-4626-aacb-5388ace3d756"
									}
								}
							],
							"id": "e8a13c72-6fcc-46fc-8356-fe40bc43a866",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service8Name\", \"service 008\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5b6c872b-3c92-4c8e-8edd-bac3881b8ace"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service8Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service8Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service8Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service8Name\"),\r",
											"        \"host_id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"comment\": null,\r",
											"        \"service_template_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"volatility_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"is_contact_additive_inheritance\": false,\r",
											"        \"is_contact_group_additive_inheritance\": false,\r",
											"        \"notification_interval\": 9,\r",
											"        \"notification_timeperiod_id\": 3,\r",
											"        \"notification_type\": 36,\r",
											"        \"first_notification_delay\": 4,\r",
											"        \"recovery_notification_delay\": 5,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"graph_template_id\": null,\r",
											"        \"note\": null,\r",
											"        \"note_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"severity_id\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"            \"id\": pm.collectionVariables.get(\"ServiceCategory2Id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"ServiceCategory2Name\"),\r",
											"        }\r",
											"    );\r",
											"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "30d2bbae-5130-45d9-b552-952bb1713b41"
									}
								}
							],
							"id": "a5aaf608-3be9-4e23-b3a8-04dcb98fcaf6",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service8Name}}\",\r\n    \"host_id\": {{Host2Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory2Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the new Service Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been deleted from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "567c2d88-0071-4e7c-9894-7b79a5038404"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "0f9c4d1a-04b3-4727-999b-28de2439d027"
									}
								}
							],
							"id": "0b43e041-3cd6-478a-b4fb-c22bfc5b4808",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "8bd9914e-4ac1-412e-98f5-8a5d9bd99744"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "98f56929-c23d-4af8-ae62-28cd100fb95e"
									}
								}
							],
							"id": "94c4feb8-5ad4-4c05-9878-a647416d9635",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "05435694-2732-4bcc-8018-8fff03422497"
									}
								}
							],
							"id": "bb1756b7-0224-4227-b471-6de2cabfcfb2",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "422b5511-d8bc-4f80-a584-37b57c8a6fda"
									}
								}
							],
							"id": "abd40d6d-3648-4d0e-ac96-77a717bfd5a4",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (4)\r",
											"    pm.expect(responseJson.result.length).to.eql(4);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[3]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service8Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service8Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\":null, \r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[3].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[3].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[3].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory2Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory2Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[3].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "13592843-bd31-453e-937b-f104ba45d184"
									}
								}
							],
							"id": "af6c8104-de86-48f4-827d-a24b76c241b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service8Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service8Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\":null, \r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory2Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory2Name\")\r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "18838771-973c-4491-ba35-a8905d8347b5"
									}
								}
							],
							"id": "44383c1c-11aa-41dc-89ba-ec875e2a44e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service8Name\") + \"' has been successfully deleted.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.unset(\"Service8Name\");\r",
											"    pm.collectionVariables.unset(\"Service8Id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e4b4b2ce-7bfe-42b8-845e-be7f6bc3fe2e"
									}
								}
							],
							"id": "864045ba-09d5-4d7c-8ee2-7c66f537f8bd",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services/{{Service8Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services",
										"{{Service8Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b78ea18d-90bd-4aff-9609-e76065ea3d1b"
									}
								}
							],
							"id": "1539e911-0594-4820-aa51-6a2b3249295a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "b2190487-02bb-4250-98cf-0987ba73d713"
									}
								}
							],
							"id": "0873dddf-8e17-4b90-90e3-4cfa1dd934e9",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "69ffb0e4-61c6-4402-a618-dbc7ecd13378"
				},
				{
					"name": "Access to HG & SG with filter on HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "b65990a5-2113-4a47-947d-6f8b0949914a"
									}
								}
							],
							"id": "3ca2c51b-f736-4e84-87e9-a6a1cd84c2b9",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add the new Host Category filter to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "1a2acd52-ef20-4b85-bf8a-f53ef6a972de"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2166b5c0-e41d-4795-bcb9-894cad86fa5e"
									}
								}
							],
							"id": "5bcc3a36-0f66-470b-8803-4efd8c17f012",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "8134481d-c6d4-4835-9d13-60895a9d45c3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "eab3fb8d-57ea-4c6b-9308-ef1a0305fb0a"
									}
								}
							],
							"id": "f8e65062-6048-4085-b954-e8ef5da6d566",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "0e935c17-a18f-48e3-a036-9a0dbec9a8d0"
									}
								}
							],
							"id": "71cff8aa-6171-442f-8c8f-104d84f186cf",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read/Write user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_RW_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "0e626189-3682-4e29-a9f3-76a06b16ae92"
									}
								}
							],
							"id": "aef5407e-4746-4d35-b3f4-41e6631b6a28",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_RW_filters}}\",\r\n      \"password\": \"{{api_password_user_RW_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "4b6f56e8-5438-4714-83da-c013867770c5"
									}
								}
							],
							"id": "797a6952-558c-42d4-8475-59451360e828",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "1f066c45-6d75-451d-b50d-dfecac722272"
									}
								}
							],
							"id": "a8361e71-50d7-4c4d-9165-6c96060eb455",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{\"$eq\":\"{{HostGroup1Id}}\"}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from R/W user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4f17501c-925c-4633-b978-271dde53ee19"
									}
								}
							],
							"id": "e0287296-3914-408c-b30f-b305beb84d61",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "1559d030-8286-403a-9b25-78421e38a29d"
				}
			],
			"id": "cad1bbf4-ff2b-4f75-a33d-837bf8543fbd"
		},
		{
			"name": "User with Read Only  rights",
			"item": [
				{
					"name": "Login with Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cc1b0fa5-ecaf-41c7-99c3-7edef7102308"
							}
						}
					],
					"id": "16a031bf-8f57-4e16-9ce6-b2d1f802370f",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read}}\",\r\n      \"password\": \"{{api_password_user_Read}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript",
								"id": "899f5dc0-43ec-4c30-91c4-e666bf96b779"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7fefc986-9229-4090-a12c-a1f955963f9e"
							}
						}
					],
					"id": "9c10d4f6-d562-453c-976c-b93f138fed3a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 555\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to edit services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d1c2c172-6571-4b41-9165-e6a1f362ee43"
							}
						}
					],
					"id": "cc6fc3a8-f769-4f3c-8272-2a43d3f4e591",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"check_command_args\": [\"111\", \"222\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 1,\r\n    \"normal_check_interval\": 1,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 1,\r\n    \"volatility_enabled\": 1,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4d1b41d4-d6b8-4f05-a5af-80f369127f1d"
							}
						}
					],
					"id": "a71f33bd-568e-4154-8239-4688dbb1f4c2",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 2, \r",
									"        name: \"none\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 4, \r",
									"        name: \"workhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "596ed722-75b3-498b-8460-54276a62e26e"
							}
						}
					],
					"id": "555fbc7c-cd14-45b0-8b8d-c23a597c6c5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services filtered with host group 1 and host category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (2)\r",
									"    pm.expect(responseJson.result.length).to.eql(2);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "265cc40f-b049-4b82-a3e6-0f2b8bba075e"
							}
						}
					],
					"id": "461e9ae7-d9d3-4bf8-9a53-8ce077fe1d0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services filtered with host group 1 or host category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*\r",
									"/  Check body content\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
									"    // Check the number of hosts (3)\r",
									"    pm.expect(responseJson.result.length).to.eql(3);\r",
									"\r",
									"    // Check the properties of each service\r",
									"    pm.expect(responseJson.result[0]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
									"        id: 1, \r",
									"        name: \"24x7\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
									"        id: 3, \r",
									"        name: \"nonworkhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[1]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
									"        \"check_timeperiod\": null,\r",
									"        \"notification_timeperiod\": null,\r",
									"        \"severity\": null,\r",
									"        \"normal_check_interval\": null,\r",
									"        \"retry_check_interval\": null,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host1Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.result[2]).to.include({\r",
									"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
									"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
									"        \"normal_check_interval\": 2,\r",
									"        \"retry_check_interval\": 1,\r",
									"        \"is_activated\": true\r",
									"    });\r",
									"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"    pm.expect(responseJson.result[2].service_template).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].check_timeperiod).to.eql({ \r",
									"        id: 2, \r",
									"        name: \"none\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
									"        id: 4, \r",
									"        name: \"workhours\" \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
									"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
									"    });\r",
									"    pm.expect(responseJson.result[2].categories).to.be.an('Array').that.is.empty;\r",
									"    pm.expect(responseJson.result[2].groups).to.eql([{ \r",
									"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
									"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
									"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
									"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
									"    }]);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cbdaf9ad-d7c2-4d6e-96f0-888660a72aa1"
							}
						}
					],
					"id": "f2bd08ba-5865-46b0-b927-39175116c6d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from Read Only user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "46dcd8fe-7bee-446e-8446-f1d2ed5dfde1"
							}
						}
					],
					"id": "12a0c0be-90fd-44eb-b6da-cb5f68b9906c",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "00551dff-9870-4471-b011-3c2d32c60b52"
		},
		{
			"name": "User with Read Only  rights with filters",
			"item": [
				{
					"name": "Access to HG with filter on HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "816e190b-bd75-443d-83d9-e9f4aaf2734d"
									}
								}
							],
							"id": "94ed62c1-ca88-4d6a-99ec-c395f0d495a2",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Service9Name\", \"service 009\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "bbfb51c0-f3d3-4f39-a6b1-638cbf927144"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service has been successfully created, with name '\" + pm.collectionVariables.get(\"Service9Name\") + \"'.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // Creation of a variable with the ID of the new service\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.collectionVariables.set(\"Service9Id\", response.id);\r",
											"\r",
											"    pm.expect(response).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service9Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service9Name\"),\r",
											"        \"host_id\": pm.collectionVariables.get(\"Host2Id\"),\r",
											"        \"comment\": null,\r",
											"        \"service_template_id\": null,\r",
											"        \"check_command_id\": parseInt(pm.collectionVariables.get(\"CommandId\")),\r",
											"        \"check_timeperiod_id\": null,\r",
											"        \"max_check_attempts\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"active_check_enabled\": 2,\r",
											"        \"passive_check_enabled\": 2,\r",
											"        \"volatility_enabled\": 2,\r",
											"        \"notification_enabled\": 2,\r",
											"        \"is_contact_additive_inheritance\": false,\r",
											"        \"is_contact_group_additive_inheritance\": false,\r",
											"        \"notification_interval\": 9,\r",
											"        \"notification_timeperiod_id\": 3,\r",
											"        \"notification_type\": 36,\r",
											"        \"first_notification_delay\": 4,\r",
											"        \"recovery_notification_delay\": 5,\r",
											"        \"acknowledgement_timeout\": null,\r",
											"        \"freshness_checked\": 2,\r",
											"        \"freshness_threshold\": null,\r",
											"        \"flap_detection_enabled\": 2,\r",
											"        \"low_flap_threshold\": null,\r",
											"        \"high_flap_threshold\": null,\r",
											"        \"event_handler_enabled\": 2,\r",
											"        \"event_handler_command_id\": null,\r",
											"        \"graph_template_id\": null,\r",
											"        \"note\": null,\r",
											"        \"note_url\": null,\r",
											"        \"action_url\": null,\r",
											"        \"icon_id\": null,\r",
											"        \"icon_alternative\": null,\r",
											"        \"geo_coords\": null,\r",
											"        \"severity_id\": pm.collectionVariables.get(\"ServiceSeverity1Id\"),\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"\r",
											"    pm.expect(response.check_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.event_handler_command_args).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.macros).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(response.categories[0]).to.include({\r",
											"            \"id\": pm.collectionVariables.get(\"ServiceCategory2Id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"ServiceCategory2Name\"),\r",
											"        }\r",
											"    );\r",
											"    pm.expect(response.groups).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "20fa6c62-1d6e-4d64-a6f9-ec13fd73b7f3"
									}
								}
							],
							"id": "a678d4f7-2491-4d7a-8a23-3c49aed572bc",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{Service9Name}}\",\r\n    \"host_id\": {{Host2Id}},\r\n    \"severity_id\": {{ServiceSeverity1Id}},\r\n    \"check_command_id\": {{CommandId}},\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": false,\r\n    \"is_contact_group_additive_inheritance\": false,\r\n    \"notification_interval\": 9,\r\n    \"notification_timeperiod_id\": 3,\r\n    \"notification_type\": 36,\r\n    \"first_notification_delay\": 4,\r\n    \"recovery_notification_delay\": 5,\r\n    \"service_categories\": [ {{ServiceCategory2Id}} ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove the new Service Group from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "49263e90-64fe-4122-a42a-aefe1d6df859"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "cb4ff998-1e19-4b0e-ab29-7beb7320b090"
									}
								}
							],
							"id": "238c97da-77c1-4b5f-8c2d-f2be822c81af",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"revoke_servicegroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "4f83f4f3-c124-4f91-b8a9-79b9604a9d18"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "c0e62afa-955e-4897-a953-bb35a0c479c8"
									}
								}
							],
							"id": "4fd27532-1397-43d6-850b-da2fee2fa1ae",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "23a763bb-bf42-476b-bf76-a7d5ca717ea1"
									}
								}
							],
							"id": "8b6cf170-9ba3-4871-870c-eca5f1c07c77",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "ab8b3ea0-eaff-45aa-be86-41eb644fc160"
									}
								}
							],
							"id": "9f3a17a6-d8aa-4aae-a1e7-e2432aab6400",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "13db7600-de1b-49a1-9620-753550bf5fd2"
									}
								}
							],
							"id": "66f0acd4-d954-4d47-b0fa-ca633216874b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service3Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service3Name\"),\r",
											"        \"check_timeperiod\": null,\r",
											"        \"notification_timeperiod\": null,\r",
											"        \"severity\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3010861e-3b5b-497f-a28e-430f508c74bd"
									}
								}
							],
							"id": "318559c2-93cb-4318-ab94-1813dfa38303",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{{HostGroup1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{{HostGroup1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "65a3e495-8c70-4eb4-94d3-62bed89dd7cf"
									}
								}
							],
							"id": "c8091003-06bb-4008-9dff-ecbe8dd9eaa8",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "ce354679-5962-4d71-9238-5ee7974389df"
				},
				{
					"name": "Access to HG with filters on HC & SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "54802d69-0a8a-45ec-857c-21a82d16fcd5"
									}
								}
							],
							"id": "046179b3-dc73-4dc5-b2e1-2ed9b792957d",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add service category filter to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b66800fd-6cf3-4677-a4ad-c9ce5a09fe5f"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "fb370228-6733-458a-8948-65f204efc787"
									}
								}
							],
							"id": "6477c28a-2fc5-425b-a743-f58e64438fb3",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "6d819663-3eb7-4d2b-bb0e-33e93f772f53"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "d149c804-22c1-4fd1-ab90-e5eede5dbcad"
									}
								}
							],
							"id": "9cdc0527-b32f-4017-a248-3074d3edbbb4",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "5989e878-e263-4c4c-9f10-21c61e91dc45"
									}
								}
							],
							"id": "6bc767d5-807e-430f-8855-4e0d52a89481",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a9cd4bff-1ea7-4553-b39d-5428c48b691d"
									}
								}
							],
							"id": "ee5cc09c-b44c-48b6-988c-b9c75f16d41b",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (4)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5c726b1c-c07b-402a-998c-1d8e2863a93f"
									}
								}
							],
							"id": "46419ee5-e7ae-4587-86f2-b4658cf967f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1 or host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (4)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e85feb4e-6256-4357-8946-2ea7df8a3da4"
									}
								}
							],
							"id": "22c8ba2a-30be-422b-b132-5f33a916f17b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "7b6cbc33-a7b6-4455-b33d-4d9bdbda928b"
									}
								}
							],
							"id": "9da9becf-e8f2-437a-915f-0468246663cf",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "6107bb1f-d9b5-47d1-abed-160fbc507957"
				},
				{
					"name": "Access to HG with filters on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "0206a19e-ea3c-415a-b4e7-bcbb2b665ec4"
									}
								}
							],
							"id": "23be5780-0363-41aa-8744-8da312db4d45",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Host Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category filter has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "f544be24-9ea4-4d51-b249-5f494c194603"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "fee0db50-156a-43ef-8eed-2a3e5c0d3cb3"
									}
								}
							],
							"id": "1441d992-20b3-47c9-a4c0-b4ffbf33296c",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "7364187c-7c21-45b5-adf5-ed81e08d31a2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "7c1e2690-d21e-4853-8a55-7d91201dd327"
									}
								}
							],
							"id": "51bfa592-7cb5-4912-8d50-500f66175d6f",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "9141f64c-94d2-4870-972c-fd5aa4bf2ab3"
									}
								}
							],
							"id": "54d759ba-f849-43c5-b90c-ac7a260d1570",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "cefbc58d-f2cd-4dde-82b4-5bd9074bb789"
									}
								}
							],
							"id": "70338aa6-5b4d-490b-ae72-e021b351f0f4",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (1)\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service9Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service9Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"severity\":null, \r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory2Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "260d400c-be40-4140-9157-5bed409ce1b4"
									}
								}
							],
							"id": "53c7087b-f390-4af7-a690-a69458074a02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "fd6b05f6-0cb7-4e78-b3e2-a5dc266604a8"
									}
								}
							],
							"id": "f2b6554f-2362-43ba-a4b6-6a23b72f00c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{{HostCategory1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d5029558-04e3-42ab-8819-40fc22a427ee"
									}
								}
							],
							"id": "53a2c2c6-d21a-4229-8f19-0fb984349abe",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "42b320ed-38ca-411e-a4bd-aec0efd43f15"
				},
				{
					"name": "Filters on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "6d356f6e-13d4-44b4-bffb-19d611b766aa"
									}
								}
							],
							"id": "d8391eb5-d67e-4043-a715-6c64f6b4a88a",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Host Group filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host group has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "9eaf7c1f-4998-4763-b19a-264946f7bb74"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "890b016d-8605-41dd-b0d5-858603725457"
									}
								}
							],
							"id": "f7a4655e-c017-4978-a3fc-d2811f4271bf",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"revoke_hostgroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "eb9b5a7d-f4ee-40be-a67c-f6d94443f165"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "ca633d26-a667-47c7-a742-5ec23aaf24f1"
									}
								}
							],
							"id": "52d80180-fb02-4433-9505-a6524dd6cd34",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "54637733-1d64-4c95-8ad5-cbe440be0b11"
									}
								}
							],
							"id": "16249bde-24dd-4b6d-87c8-9474de4a3c18",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "514524e4-8e8b-4a4b-acee-bbae7f1ee599"
									}
								}
							],
							"id": "97a6c4db-4071-4ee3-ab82-e4da7ea4aca4",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2b8dd9e8-284d-4448-b910-e2a21a1bcbc9"
									}
								}
							],
							"id": "88634e16-af63-4e0c-9034-a09ee062de1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7241d3ae-216d-4bac-bc24-b5475e11b791"
									}
								}
							],
							"id": "d2ffa0ce-4681-4385-b418-0eddde5c7e8c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{{HostCategory1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "365152d0-266f-4dc6-bf44-ea491d605b72"
									}
								}
							],
							"id": "f7134525-19b4-4b79-b6a6-1c4ffb22809e",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "08876a9a-d05e-4d78-bb18-d0b959014c13"
				},
				{
					"name": "Access to SG with filters on SC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "96d964cc-fd5d-4523-9419-cca4b71385eb"
									}
								}
							],
							"id": "0e73bd20-0144-49b9-b87e-0333067c2f7a",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a Service Group to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service group has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "1d5e6b2b-8fd1-43cc-9c58-3413d49bdd5e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "80b24423-1226-4fb4-893b-8afee52c8da4"
									}
								}
							],
							"id": "17caf18e-8c08-4221-94e2-cb0b80dc9ede",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_servicegroup\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceGroup1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "13ef546b-8210-4496-9e2e-4b6473bc3286"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "a40a5503-9972-4005-b4f0-499f3c3ec37e"
									}
								}
							],
							"id": "b80b93fa-9cf6-4af6-885f-9407eaebc69c",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d4b95c22-7d96-4898-ae14-ff4d52ee111b"
									}
								}
							],
							"id": "1e0a34f6-8573-4c7b-82ec-0a925c7f87b1",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "15c4fa2e-6262-47a2-8962-8e1b915482ab"
									}
								}
							],
							"id": "a291ef98-d392-4eeb-a1fc-837d0942f9d5",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5102b631-d312-4995-940b-668826c933aa"
									}
								}
							],
							"id": "e92221ac-2916-4e5a-a672-4afa662845c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "be90ff9a-c77e-4e26-aed6-e3b9ff08c82b"
									}
								}
							],
							"id": "ce71514f-489e-44f7-a9a1-136c8e300f0d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{{HostGroup1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{{HostGroup1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "abd6b60c-91bd-4ea4-bb22-2eb4d87c0304"
									}
								}
							],
							"id": "7bd3ce66-37b6-4164-956b-c5bd589e8cf2",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "d20886fa-6836-469f-949c-8d0a202a8f76"
				},
				{
					"name": "Access to SG",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e50af37a-bf65-47cd-82e7-234845817562"
									}
								}
							],
							"id": "54a85635-2101-4055-89f2-14895c77eb04",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Service Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The service category filter has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3646a8d4-735e-46e4-9449-c08d5658fd22"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "0612ec16-5bc5-47c5-bb2a-5bdf8b9fef40"
									}
								}
							],
							"id": "0aa7a028-019e-484c-b012-ece832c84820",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_servicecategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{ServiceCategory2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "048c4eb1-0a4e-42cd-a0d7-5e87e3d3d489"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "bbdea365-df34-4a5c-a820-4c5f8cf73720"
									}
								}
							],
							"id": "92fe1b63-1c3b-4ef7-9282-e8345e982163",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "c92f242b-78b1-4fdb-ba80-0ae2de3faf63"
									}
								}
							],
							"id": "d55bdda1-db08-4f9f-b550-a66789316b6c",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d94416f4-5459-4013-bc17-9cad003bbdcc"
									}
								}
							],
							"id": "0b29ab69-0db0-4c54-a76c-21d28b1dbd18",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e2fb80ac-0e9d-4722-93c3-80cbc0821c0c"
									}
								}
							],
							"id": "ddf8201d-8c34-4ade-b70f-49abb1df0a74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d2743929-1ddf-4d1c-8fb1-032c3f2aa303"
									}
								}
							],
							"id": "1bf1a238-24fd-4057-bc14-b6a38a1efdfe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostcategory.id\":{{HostCategory1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostcategory.id\":{{HostCategory1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "5c7b9acb-e860-4826-9d6f-0798d09eb740"
									}
								}
							],
							"id": "f5fd0b43-2048-4691-9089-01542e63c7d8",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "8c212eb7-695c-4b01-817f-3f715a4838f1"
				},
				{
					"name": "Access to SG with filter on HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3ffe718a-006b-4eb0-b55d-a69e34918276"
									}
								}
							],
							"id": "a42706c4-465e-4e3a-a32e-7f4a9fff44d9",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the new Host Category to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The filter for the host category has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "71798c2e-9e3c-41ad-a707-c18ca70fd0c2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5799fa12-e22a-49f0-a7da-cf8a9059ae3d"
									}
								}
							],
							"id": "b28fb205-3d76-447f-9a8d-10fe56d85cc3",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "eb5be9b4-2d4b-4f3c-988f-a1ac4a447432"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "83f56726-1f48-4feb-84ee-bdd29179d530"
									}
								}
							],
							"id": "579a1c08-be75-48d0-8a7e-9d1f47ff5e9c",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d03654d8-ce34-4e9d-9d8b-a4a1138287cc"
									}
								}
							],
							"id": "e99c9bf1-7afe-4cd0-97c1-727f57479960",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "31b28d48-4c35-4ede-944d-ac43ad5c601b"
									}
								}
							],
							"id": "12c49ec4-501d-4b12-8c7c-684217824aeb",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (2)\r",
											"    pm.expect(responseJson.result.length).to.eql(2);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a1dcaaed-ccb6-4585-8a96-c06ba1eb91c2"
									}
								}
							],
							"id": "39dc2c52-3bed-4515-b002-39578ee53594",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "8048e252-124a-48f2-8872-d73581d4aa8b"
									}
								}
							],
							"id": "b8e33c4f-a411-49a4-ab37-55151cf481a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={\"hostgroup.id\":{{HostGroup1Id}}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{\"hostgroup.id\":{{HostGroup1Id}}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "1abe4769-408b-445d-adb6-834e273ab3de"
									}
								}
							],
							"id": "4248cb74-e341-45af-9984-db315e249611",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "5e99c942-9beb-45ef-ad53-f2e6bd9e7722"
				},
				{
					"name": "Access to host & SG with filter on HC",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "45e2b87f-6c1a-41df-80dc-8d58af77d5f4"
									}
								}
							],
							"id": "b628a4e6-724a-45aa-b905-dc5a37e44ca3",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant the Host to the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host has been added to the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "9ab373eb-98ba-4747-9c2a-f4dbcd8349b8"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a591a936-22d9-4738-ba8d-6f0ed2b71efb"
									}
								}
							],
							"id": "fcf27c00-8cb0-41c5-ae77-898468ec41b6",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{Host2Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a Host Category filter from the ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host category filter has been removed from the ACL resource.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c029db03-fb22-4e3b-a2a4-e9b5ac16c6f4"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "f90dfde1-d5bd-4722-a6df-6206a07ad5d7"
									}
								}
							],
							"id": "19c461bf-78f1-42f6-bbcf-5b041ba2ca13",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"delfilter_hostcategory\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{ACLResources}};{{HostCategory1Name}}\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of ACL Resources has been fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "a15bb23e-5ec1-4c8e-8ec9-951f0b75c15d"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "58959498-d508-4805-addf-c599333e95df"
									}
								}
							],
							"id": "bf82ef4d-8073-4ef1-b83c-a56dc360094c",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"ACL\"\n}"
								},
								"url": {
									"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
									"host": [
										"{{baseUriCentreonCLAPI}}"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e516982d-b008-4686-9dcd-5404628f5599"
									}
								}
							],
							"id": "adfc58ab-c301-4040-b592-8ecc35ef1b3b",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						},
						{
							"name": "Login with Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Read_filters'));\r",
											"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
											"    pm.environment.set(\"token\", responseJson.security.token);\r",
											"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
											"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "96234cca-9340-4644-983f-d2994d13bf50"
									}
								}
							],
							"id": "d8c068d5-f951-40bd-9c34-433601b8f790",
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Read_filters}}\",\r\n      \"password\": \"{{api_password_user_Read_filters}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (3)\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"\r",
											"    // Check the properties of each service\r",
											"    pm.expect(responseJson.result[0]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service1Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service1Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[0].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].check_timeperiod).to.eql({ \r",
											"        id: 1, \r",
											"        name: \"24x7\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[0].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory1Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[0].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host1Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host1Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[1]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service4Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service4Name\"),\r",
											"        \"normal_check_interval\": 2,\r",
											"        \"retry_check_interval\": 1,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[1].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[1].service_template).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceTemplate1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceTemplate1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].check_timeperiod).to.eql({ \r",
											"        id: 2, \r",
											"        name: \"none\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].notification_timeperiod).to.eql({ \r",
											"        id: 4, \r",
											"        name: \"workhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[1].categories).to.be.an('Array').that.is.empty;\r",
											"    pm.expect(responseJson.result[1].groups).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceGroup1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceGroup1Name\"), \r",
											"        host_id: pm.collectionVariables.get(\"Host3Id\"), \r",
											"        host_name: pm.collectionVariables.get(\"Host3Name\") \r",
											"    }]);\r",
											"\r",
											"\r",
											"    pm.expect(responseJson.result[2]).to.include({\r",
											"        \"id\": pm.collectionVariables.get(\"Service9Id\"),\r",
											"        \"name\": pm.collectionVariables.get(\"Service9Name\"),\r",
											"        \"service_template\": null,\r",
											"        \"check_timeperiod\": null,\r",
											"        \"normal_check_interval\": null,\r",
											"        \"retry_check_interval\": null,\r",
											"        \"is_activated\": true\r",
											"    });\r",
											"    pm.expect(responseJson.result[2].hosts).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"Host2Id\"), \r",
											"        name: pm.collectionVariables.get(\"Host2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].notification_timeperiod).to.eql({ \r",
											"        id: 3, \r",
											"        name: \"nonworkhours\" \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].categories).to.eql([{ \r",
											"        id: pm.collectionVariables.get(\"ServiceCategory2Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceCategory2Name\") \r",
											"    }]);\r",
											"    pm.expect(responseJson.result[2].severity).to.eql({ \r",
											"        id: pm.collectionVariables.get(\"ServiceSeverity1Id\"), \r",
											"        name: pm.collectionVariables.get(\"ServiceSeverity1Name\") \r",
											"    });\r",
											"    pm.expect(responseJson.result[2].groups).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "5d80e27a-3daa-46e1-bdf6-6027f39f1044"
									}
								}
							],
							"id": "17e98e54-87da-43c2-814e-00ecc5fad1a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available services filtered with host group 1 and host category 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"/  Check code status\r",
											"*/\r",
											"pm.test(\"A list of services has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"/  Check body content\r",
											"*/\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The services retrieved are listed with all parameters\", function() {\r",
											"    // Check the number of hosts (0)\r",
											"    pm.expect(responseJson.result).to.be.an('Array').that.is.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c4b7fd06-b2c0-47b9-806c-a6a2104bb6d5"
									}
								}
							],
							"id": "a5b1e8f9-15bb-40fe-9221-ee40a26a8fa7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/services?search={ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "{ \"$and\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout from Read Only user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"    pm.environment.unset(\"token\");\r",
											"    pm.environment.unset(\"currentUserName\");\r",
											"    pm.environment.unset(\"currentUserID\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "452a3fb0-db31-41cc-a5fa-c16236ae94f4"
									}
								}
							],
							"id": "1c8fa841-8c86-41d5-9c4e-04b4641cc82b",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": []
						}
					],
					"id": "7ea6ee94-912b-4dc6-a089-7806988bb4d8"
				}
			],
			"id": "1f9687b2-66c6-43ce-a7d3-141a5bf19210"
		},
		{
			"name": "User with No Access",
			"item": [
				{
					"name": "Login with user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has not admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login_user_Nothing'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(false);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "00386cfe-bc58-4c61-9f6e-4edb6e515253"
							}
						}
					],
					"id": "773ef7a5-c553-4ff7-ae71-f752693567ae",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login_user_Nothing}}\",\r\n      \"password\": \"{{api_password_user_Nothing}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Service5Name\", \"service 005\");\r",
									""
								],
								"type": "text/javascript",
								"id": "856bb0f2-5314-4b61-86c2-b97de70e966f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to create services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to add a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a830c2f8-aed7-469d-b44f-1976072cdf6a"
							}
						}
					],
					"id": "85389f02-9851-400d-92ce-c3ee16ddb859",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service 005\",\r\n    \"host_id\": {{Host1Id}},\r\n    \"check_command_id\": {{CommandId}}\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to edit services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to edit a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fcbef60f-906d-4927-abb3-d6a754638bb6"
							}
						}
					],
					"id": "720ef909-dd65-480f-a217-a7ab8abf1ddf",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"check_command_args\": [\"111\", \"222\"],\r\n    \"check_timeperiod_id\": 1,\r\n    \"max_check_attempts\": 1,\r\n    \"normal_check_interval\": 1,\r\n    \"retry_check_interval\": 1,\r\n    \"active_check_enabled\": 1,\r\n    \"passive_check_enabled\": 1,\r\n    \"volatility_enabled\": 1,\r\n    \"notification_enabled\": 2,\r\n    \"is_contact_additive_inheritance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to delete services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to delete a service\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5b89b5d4-2b99-4b84-aab7-12557a40967a"
							}
						}
					],
					"id": "feef70b7-ec5e-468e-84c9-88e40c97db56",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access services\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "17a5b94f-1ee6-4e95-94e9-9c6c45ea05f2"
							}
						}
					],
					"id": "85f12aef-61e6-480c-8ad8-4e66a7c02f1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show available services filtered with host group 1 or host category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The user does not have the correct rights to list services.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"\r",
									"    pm.expect(responseJson.message).to.eql(\"You are not allowed to access services\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "95d49433-b79b-4b90-bf27-8978d761fca6"
							}
						}
					],
					"id": "513df16f-151c-46cf-972f-7864daa59746",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services?search={ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services"
							],
							"query": [
								{
									"key": "search",
									"value": "{ \"$or\":[{\"hostgroup.id\":{{HostGroup1Id}}},{\"hostcategory.id\":{{HostCategory1Id}}}]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from user with no access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "442c6ca1-8035-4c86-a5fa-e95227b01b3c"
							}
						}
					],
					"id": "b068e925-7c17-4811-9b44-14c0a2e58459",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "2b5ced46-6c3f-4a64-99e5-681d821dfa0e"
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Login successful. The account displayed in response matches with credentials and has admin rights.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.environment.get('api_login'));\r",
									"    pm.expect(responseJson.contact.is_admin).to.eql(true);\r",
									"    pm.environment.set(\"token\", responseJson.security.token);\r",
									"    pm.environment.set(\"currentUserName\", responseJson.contact.alias);\r",
									"    pm.environment.set(\"currentUserID\", responseJson.contact.id);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "080da883-b47b-489c-8a06-3e5d92195b1b"
							}
						}
					],
					"id": "62c607ce-745f-4d75-b970-75fda52dadb5",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service1Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service1Name\");\r",
									"    pm.collectionVariables.unset(\"Service1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a915b62f-e87d-42d6-b32a-55cb2d7acbc9"
							}
						}
					],
					"id": "8a3ee833-0fd4-42b1-91a5-77d87efc5f96",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service3Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service3Name\");\r",
									"    pm.collectionVariables.unset(\"Service3Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1f41bda3-944b-4254-b3d2-ea8e213f3315"
							}
						}
					],
					"id": "71e8dfb1-b6d0-4d86-b25c-d86a4ed25c78",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service with name '\" + pm.collectionVariables.get(\"Service4Name\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Service4Name\");\r",
									"    pm.collectionVariables.unset(\"Service4Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6920b3de-74b3-487c-8ae6-6c3e9ffb79e8"
							}
						}
					],
					"id": "67221fc5-4fd9-41c7-99e1-19dde3cb600b",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/{{Service4Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"{{Service4Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of all service severities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "578bce21-f499-4f64-bedd-d2d24dae5ba8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service severity\" + pm.collectionVariables.get(\"ServiceSeverity1Name\") + \" has successfully been deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "86eb2778-d3d1-468e-aefb-6d0384b6eda6"
							}
						}
					],
					"id": "118305be-31de-4ea7-80ef-46bd4bdae40d",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/services/severities/{{ServiceSeverity1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"severities",
								"{{ServiceSeverity1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category with name '\" + pm.collectionVariables.get(\"ServiceCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a88409a6-eac4-41cb-b009-379ec159f383"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7d659c4c-1531-4f14-a4cb-706e5de47449"
							}
						}
					],
					"id": "c5c0ee13-e688-4a0f-9f7c-98842628c155",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories/{{ServiceCategory1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories",
								"{{ServiceCategory1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service category with name '\" + pm.collectionVariables.get(\"ServiceCategory2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceCategory2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceCategory2Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6c09e4f4-5843-4271-86c5-f19b051cf0f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f7303354-0b94-475f-ad34-0a95ee14cbb6"
							}
						}
					],
					"id": "4b61ddd5-97ae-449a-a190-e2ac06be8df8",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/categories/{{ServiceCategory2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"categories",
								"{{ServiceCategory2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The service group with name '\" + pm.collectionVariables.get(\"ServiceGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceGroup1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceGroup1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e188ce62-272d-48f6-9e16-5b4828b841fc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d65a3a24-c9e1-489f-8b95-0569a3b8fd46"
							}
						}
					],
					"id": "c92b85b1-0181-4a06-baf0-aa71b2aa7266",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/groups/{{ServiceGroup1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"groups",
								"{{ServiceGroup1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a service template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The service template with name '\" + pm.collectionVariables.get(\"ServiceTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"ServiceTemplate1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Name\");\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Alias\");\r",
									"    pm.collectionVariables.unset(\"ServiceTemplate1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fa94d4cf-1df7-40d1-b1d9-1bafa5d9e839"
							}
						}
					],
					"id": "ea0931c6-22ad-4bb4-a1d8-d3869f141eda",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/services/templates/{{ServiceTemplate1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"services",
								"templates",
								"{{ServiceTemplate1Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host1Name\");\r",
									"    pm.collectionVariables.unset(\"Host1Alias\");\r",
									"    pm.collectionVariables.unset(\"Host1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "16a96ffa-ffc0-4ad4-9f1f-4b0a1d994adc"
							}
						}
					],
					"id": "29928a5f-c928-4a90-8c98-3ed562091364",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host2Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host2Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host2Name\");\r",
									"    pm.collectionVariables.unset(\"Host2Alias\");\r",
									"    pm.collectionVariables.unset(\"Host2Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a2692b3e-f80e-4901-b65a-815928f6d80a"
							}
						}
					],
					"id": "885f9056-8955-4a9e-9cb2-5aeb51d2bbca",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host with name '\" + pm.collectionVariables.get(\"Host3Name\") + \"' and alias '\" + pm.collectionVariables.get(\"Host3Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"Host3Name\");\r",
									"    pm.collectionVariables.unset(\"Host3Alias\");\r",
									"    pm.collectionVariables.unset(\"Host3Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8399909b-2930-4d08-9197-d30e497a3430"
							}
						}
					],
					"id": "64757803-76ed-4298-a382-99e8c069e2d8",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/{{Host3Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"{{Host3Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host category (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host category with name '\" + pm.collectionVariables.get(\"HostCategory1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostCategory1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostCategory1Name\");\r",
									"    pm.collectionVariables.unset(\"HostCategory1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostCategory1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "20bf8564-a35e-4d14-a223-dd125e7a0cbb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a7369428-9a8b-4abf-a0e6-e98e3d6ccf58"
							}
						}
					],
					"id": "c0d27076-ecfb-4267-a6c3-dbe89668603d",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/categories/{{HostCategory1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"categories",
								"{{HostCategory1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a host group (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The host group with name '\" + pm.collectionVariables.get(\"HostGroup1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostGroup1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostGroup1Name\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostGroup1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7edf32c0-f45e-41ec-a677-817017820959"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f6651293-239c-48c2-a21c-59c0e7f05a90"
							}
						}
					],
					"id": "b07e25de-87f7-4521-b948-c27b3c9ccbe5",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups/{{HostGroup1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups",
								"{{HostGroup1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a host template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"/  Check code status\r",
									"*/\r",
									"pm.test(\"The host template with name '\" + pm.collectionVariables.get(\"HostTemplate1Name\") + \"' and alias '\" + pm.collectionVariables.get(\"HostTemplate1Alias\") + \"' has been successfully deleted.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Name\");\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Alias\");\r",
									"    pm.collectionVariables.unset(\"HostTemplate1Id\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9260b518-d2d6-4cf4-8843-9979ba711e7f"
							}
						}
					],
					"id": "5d7628f4-914e-423b-85db-5538eca58286",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates/{{HostTemplate1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates",
								"{{HostTemplate1Id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a command",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A command has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"CommandId\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "73b82479-5277-4420-a628-16c670523d73"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "56c5fe15-d96e-477f-b858-13ce09e372c0"
							}
						}
					],
					"id": "58ff11ad-d108-4c18-b0af-448ace7fd6b7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CMD\",\n  \"values\": \"check-host-alive\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A contact has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"api_login_user_RW\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bb15b84d-32b9-4847-92fc-948dede97de8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5b95743d-d13a-4a85-9246-1ec291553f53"
							}
						}
					],
					"id": "26962105-1bb2-40cd-8dfa-842c40c32ec9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CONTACT\",\n  \"values\": \"{{api_login_user_RW}}\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A contact has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"api_login_user_Read\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c3fddfda-3aca-49d5-b45d-cb7238fb7967"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "badaeb69-79f9-4e10-8c0f-e03ef65e95b9"
							}
						}
					],
					"id": "edee1227-ac49-4611-bb92-0f5460730379",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CONTACT\",\n  \"values\": \"{{api_login_user_Read}}\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A contact has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"api_login_user_RW_filters\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "02904d69-34af-4b5c-827a-06f77cef6fe7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "61751908-ef8a-4fca-8fe6-83dbfd7cb9fc"
							}
						}
					],
					"id": "030376a7-e869-42e0-b74a-42c6d20074e4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CONTACT\",\n  \"values\": \"{{api_login_user_RW_filters}}\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A contact has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"api_login_user_Read_filters\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d3c4fe6f-661f-4fd8-b8a2-c7d75efc9ff1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dceecaf3-539e-408c-a2ea-f9243810c7cf"
							}
						}
					],
					"id": "1e6178a5-d81a-4d54-a76d-1cc4fcbdd905",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CONTACT\",\n  \"values\": \"{{api_login_user_Read_filters}}\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A contact has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.collectionVariables.unset(\"api_login_user_Nothing\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e3bec84c-477f-4270-b304-4878a75dc560"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c97c0d21-0c03-49f4-818b-3dfba99ca83b"
							}
						}
					],
					"id": "e3c4306a-c3fe-4f46-8fd2-15d8ed5eb770",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"CONTACT\",\n  \"values\": \"{{api_login_user_Nothing}}\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Group has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7c4aefa3-aec6-4228-9860-e1c10dcdfbcf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9f53caaa-6c5a-4fce-bea2-5304d8e0b5e1"
							}
						}
					],
					"id": "a2737f87-1b2a-4d3e-b7e5-fd4595ff0dd3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLGROUP\",\n  \"values\": \"RW_ALL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Group has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8679b9b4-8edc-4cd4-a776-3ca637a7a2c5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2a283518-9de3-4eda-8d9c-d8defc789282"
							}
						}
					],
					"id": "5dd00545-a8ca-455b-b540-46c049ea05e6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLGROUP\",\n  \"values\": \"RW_limited\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Group has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f9156aca-88a4-4041-a2cb-3865e9f4a668"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2507d30d-2610-4ea7-b64f-26ac4eb01f4c"
							}
						}
					],
					"id": "bdc6d2a5-420e-4e0f-be4f-c07e555550c9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLGROUP\",\n  \"values\": \"RO_ALL\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Group has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f8a00b3a-d30d-4a5c-8fbb-5aad69b68a39"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dfeb99eb-2516-49f5-a8d7-77712f6ba8a7"
							}
						}
					],
					"id": "91157d61-65e1-4229-b550-1317da448986",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLGROUP\",\n  \"values\": \"RO_limited\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Group has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "92b0c8aa-515b-419f-a492-a114c7df5449"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5ceea304-3216-40df-85dd-177e18fda590"
							}
						}
					],
					"id": "4299c345-d2b9-4e69-b6c0-176a16797440",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLGROUP\",\n  \"values\": \"Nothing\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Menu has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a99052fe-be5c-4db1-b168-9a6a0514f387"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "06340d6b-9d94-4743-a765-9dccac2704ea"
							}
						}
					],
					"id": "f85141b5-c15b-4391-9d39-03619d87edfc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLMENU\",\n  \"values\": \"RW\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Menu has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "999b3624-0776-4453-8a4c-a8e1fb1f1068"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "60df1458-b5c6-4b72-9f65-57664b2ed103"
							}
						}
					],
					"id": "d820aacd-3896-4379-8cb3-f28ab9ba4add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLMENU\",\n  \"values\": \"RO\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Menu has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c8e2849e-b721-43f4-b737-946c03d7b0e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "847c5edd-ab44-42d2-978b-868f5979a48e"
							}
						}
					],
					"id": "758be3dc-4cdb-4a4f-a2cf-bbc9e60e8b10",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLMENU\",\n  \"values\": \"Nothing\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletion of a Access Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An Access Resources has been successfully deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fb436fbc-aefe-4fd4-a23d-aa627904cbbc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f8587acb-72d3-4306-93d5-69c3dd5dfe36"
							}
						}
					],
					"id": "9302ed7a-f2f3-49a9-b8e6-4b10e65b6ca4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"limited\"\n}"
						},
						"url": {
							"raw": "{{baseUriCentreonCLAPI}}?action=action&object=centreon_clapi",
							"host": [
								"{{baseUriCentreonCLAPI}}"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Logout successful. The displayed message is the one that is expected ('Successful logout').\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"currentUserName\");\r",
									"    pm.environment.unset(\"currentUserID\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "382bd809-2d39-45e6-adb5-673b4f54db2d"
							}
						}
					],
					"id": "bf810a6c-2313-46b7-ab5f-3ff09ce6c954",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": []
				}
			],
			"id": "efa52216-cf2f-401d-bcf1-e3ca7f1c73bd"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "22ca53a7-f8a9-4609-9eb1-d8483462f89b"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "54ba75b4-8cce-446b-94d4-00495db9fdac"
			}
		}
	]
}