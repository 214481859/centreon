name: Postman Tests

on:
  push:

jobs:
  postman_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/rest_api
        
    env:
      CONTAINER_NAME: my_centreon_container
      CENTREON_URL: http://localhost
      CENTREON_IMAGE: docker.centreon.com/centreon/centreon-web-alma9:develop

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}
      
      - name: Install pnpm
        run: npm install pnpm -g

      - name: Install Dependencies
        run: pnpm install -f ./centreon/tests/rest_api/package.json

      - name: Start Centreon Web Container
        run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

      - name: Wait for Centreon Web Container to Start
        run: |
          npx wait-on http://localhost:4000/ --timeout 100000
        timeout-minutes: 5
      
      - name: List contents of node_modules
        run: |
          ls -lR node_modules

      - name: Run Postman Tests and Generate HTML Report
        run: |
          environment_path="collections/Environment-for-Refactored-API-Test-Collection.json"
          collection_path="collections"

          # Create a directory to store HTML reports and summaries
          mkdir -p newman
          mkdir -p postman_summaries

          # Iterate over each Postman collection file in the specified directory
          for collection_file in "$collection_path"/*.postman_collection.json; do
            # Extract the collection name from the file name
            collection_name=$(basename "$collection_file" .postman_collection.json)

            # Run Newman with the current collection file and generate an HTML report and summary
            pnpm newman run "$collection_file" -e "$environment_path" --reporters cli,htmlextra,json-summary --reporter-htmlextra-title "$collection_name" --reporter-htmlextra-title "${collection_name// /_}" --reporter-htmlextra-export "newman/${collection_name}.html" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json" || true
          done

      - name: Debug Postman Summaries
        run: |
          find ./postman_summaries -type f -name "*.json"

      - name: Upload HTML Reports
        uses: actions/upload-artifact@v2
        with:
          name: postman-html-reports
          path: centreon/tests/rest_api/newman/
        env:
          NODE_VERSION: 16

      - name: Extract and Store Summaries
        run: |
          declare -A json_info
             for summary_file in ./postman_summaries/*.json; do
              summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats}')
              filename=$(basename "$summary_file" .json)
              # Nettoyez le nom du fichier pour le rendre compatible avec les variables d'environnement
              clean_filename="${filename// /_}"
              clean_filename="${clean_filename//-/_}"
          
              json_info["$clean_filename"]=$summary_content
            done

          for key in "${!json_info[@]}"; do
           echo "Summary info for $key:"
           echo "${json_info[$key]}"
          done

      - name: Generate and Display Summaries
        run: |
          # Déclaration d'une variable pour stocker les informations formatées
          formatted_info=""
        
           formatted_info+="\n| Name | Total Requests | Pending Requests | Failed Requests | Total Assertions | Pending Assertions | Failed Assertions |"
           formatted_info+="\n| --- | --- | --- | --- | --- | --- | --- |"
        
           # Itération sur chaque élément du tableau associatif json_info
           for key in "${!json_info[@]}"; do
              collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
              total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
              pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
              failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
              total_assertions=$(jq -r '.Run.Stats.Assertions.total' "$summary_file")
              pending_assertions=$(jq -r '.Run.Stats.Assertions.pending' "$summary_file")
              failed_assertions=$(jq -r '.Run.Stats.Assertions.failed' "$summary_file")
          
              # Ajoutez les données formatées dans la variable formatted_info
              formatted_info+="\n| $collection_name | $total_requests | $pending_requests | $failed_requests | $total_assertions | $pending_assertions | $failed_assertions |"
              done
        
           echo "This is the lead-in sentence for the list" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY # This is a blank line
           echo -e "$formatted_info" >> $GITHUB_STEP_SUMMARY
            
      - name: Continue to Next Collection
        if: ${{ always() }}
        run: echo "Continuing to the next collection..."
