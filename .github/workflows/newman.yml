name: Postman Tests

on:
  push:
jobs:
  discover_collections:
    runs-on: ubuntu-latest

    outputs:
      collections: ${{ steps.set_collections.outputs.collections }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Postman Collections
        id: set_collections
        run: |
          collection_path="centreon/tests/rest_api/collections"
          collections=$(find "$collection_path" -type f -name "*.postman_collection.json" -printf "%P\n" | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "collections=$collections" >> $GITHUB_OUTPUT
  postman_tests:
    needs: discover_collections
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.discover_collections.outputs.collections) }}

    name: Postman Test - ${{ matrix.feature }}

    defaults:
      run:
        shell: bash
        working-directory: centreon/tests/rest_api

    env:
      CONTAINER_NAME: my_centreon_container
      CENTREON_URL: http://localhost
      CENTREON_IMAGE: docker.centreon.com/centreon/centreon-web-alma9:develop

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          dest: ~/setup-pnpm
          package_json_file: centreon\package.json
          version: latest

      - name: Install Dependencies
        run: pnpm install  --frozen-lockfile  
 

      - name: Start Centreon Web Container
        run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

      - name: Wait for Centreon Web Container to Start
        run: |
          npx wait-on http://localhost:4000/ --timeout 100000
        timeout-minutes: 5

      - name: Run Postman Tests and Generate HTML Report
        run: |
          collection_file="collections/${{ matrix.feature }}"
          collection_name=$(basename "$collection_file" .postman_collection.json)
          # Run Newman with the current collection file and generate an HTML report and summary
          pnpm newman run "$collection_file" -e "collections/Environment-for-Refactored-API-Test-Collection.json" --reporters cli,htmlextra,json-summary --reporter-htmlextra-title "$collection_name" --reporter-htmlextra-title "${collection_name// /_}" --reporter-htmlextra-export "newman/${collection_name}.html" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json" || true
        continue-on-error: true

      - name: Upload HTML Reports
        uses: actions/upload-artifact@v3
        with:
          name: postman-html-reports
          path: centreon/tests/rest_api/newman/

      - name: Extract and Store Summaries
        run: |
          declare -A json_info
          for summary_file in ./postman_summaries/*.json; do
            summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats}')
            filename=$(basename "$summary_file" .json)
            clean_filename="${filename// /_}"
            clean_filename="${clean_filename//-/_}"
            json_info["$clean_filename"]=$summary_content
          done
          for key in "${!json_info[@]}"; do
            echo "Summary info for $key:"
            echo "${json_info[$key]}"
          done
     
      - name: Generate and Display Summaries
        run: |
          summaries=""
          summaries+="<table>"
          summaries+="<tr><th>Collection Name</th><th>Total Requests</th><th>⏭️ Skipped requests</th><th>❌ Failed Requests</th></tr>"
          for summary_file in ./postman_summaries/*.json; do
            collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
            total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
            pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
            failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
            summaries+="<tr><td>$collection_name</td><td>$total_requests</td><td>$pending_requests</td><td>$failed_requests</td></tr>"
          done
          summaries+="</table>"
          echo -e "$summaries" >> $GITHUB_STEP_SUMMARY
      
            
      - name: Continue to Next Collection
        if: ${{ always() }}
        run: echo "Continuing to the next collection..."