name: Postman Tests

on:
  push:
 

jobs:
  discover_collections:
    runs-on: ubuntu-latest
    outputs:
      collections: ${{ steps.set_collections.outputs.collections }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Postman Collections
        id: set_collections
        run: |
          collections=$(find centreon/tests/rest_api/collections -type f -name "*.postman_collection.json" -exec basename {} \; | sed 's/ /_/g' | sed 's/[^A-Za-z0-9_.-]//g')

          # Initialisez une chaÃ®ne JSON vide
          json_collections="{}"
          
          for collection in $collections; do
            json_collections+="\"$collection\": \"\", "
          done
          
          json_collections="${json_collections%, }"
          
          echo "collections={$json_collections}" >> $GITHUB_OUTPUT
          echo "Contents of collections: $collections"

  postman_tests:
    needs: discover_collections
    strategy:
      matrix:
         collections: ${{fromJson(needs.set_collections.outputs.collections)}}
     defaults:
      run:
        shell: bash
        working-directory: centreon/tests/rest_api
        
    env:
      CONTAINER_NAME: my_centreon_container
      CENTREON_URL: http://localhost
      CENTREON_IMAGE: docker.centreon.com/centreon/centreon-web-alma9:develop

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}
      
      - name: Install pnpm
        run: npm install pnpm -g

      - name: Install Dependencies
        run: pnpm install -f ./centreon/tests/rest_api/package.json

      - name: Start Centreon Web Container
        run: docker run --name $CONTAINER_NAME -d -p 4000:80 --health-cmd="curl -f $CENTREON_URL/ || exit 1" --health-interval=5s $CENTREON_IMAGE

      - name: Wait for Centreon Web Container to Start
        run: |
          npx wait-on http://localhost:4000/ --timeout 100000
        timeout-minutes: 5
      
      - name: List contents of node_modules
        run: |
          ls -lR node_modules
      - name: Run Postman Tests and Generate HTML Report
        run: |
          environment_path="collections/Environment-for-Refactored-API-Test-Collection.json"
          collection_path="${{ matrix.collection }}"
          # Create a directory to store HTML reports and summaries
          mkdir -p newman
          mkdir -p postman_summaries
          # Extract the collection name from the matrix variable
          collection_name=$(basename "$collection_path" .postman_collection.json)
          # Run Newman with the current collection file and generate an HTML report and summary
          pnpm newman run "$collection_path" -e "$environment_path" --reporters cli,htmlextra,json-summary --reporter-htmlextra-title "$collection_name" --reporter-htmlextra-title "${collection_name// /_}" --reporter-htmlextra-export "newman/${collection_name}.html" --reporter-summary-json-export "postman_summaries/${collection_name}-summary.json" || true


      - name: Debug Postman Summaries
        run: |
          find ./postman_summaries -type f -name "*.json"
          cat ./postman_summaries/21-Contact-management-Centreon-Web-Refactored-API-Test-Collection-summary.json
      - name: Upload HTML Reports
        uses: actions/upload-artifact@v2
        with:
          name: postman-html-reports
          path: centreon/tests/rest_api/newman/
        env:
          NODE_VERSION: 16

      - name: Extract and Store Summaries
        run: |
          declare -A json_info
             for summary_file in ./postman_summaries/*.json; do
              summary_content=$(cat "$summary_file" | jq -c '{Name: .Collection.Info.Name, Stats: .Run.Stats}')
              filename=$(basename "$summary_file" .json)
              clean_filename="${filename// /_}"
              clean_filename="${clean_filename//-/_}"
              json_info["$clean_filename"]=$summary_content
            done
          for key in "${!json_info[@]}"; do
           echo "Summary info for $key:"
           echo "${json_info[$key]}"
          done
      - name: Generate and Display Summaries
        run: |
         summaries=""
         summaries+="\n| Collection Name | Total Requests | Skipped requests | Failed Requests |"
         summaries+="\n| --- | --- | --- | --- |"
         for summary_file in ./postman_summaries/*.json; do
           collection_name=$(jq -r '.Collection.Info.Name' "$summary_file")
           total_requests=$(jq -r '.Run.Stats.Requests.total' "$summary_file")
           pending_requests=$(jq -r '.Run.Stats.Requests.pending' "$summary_file")
           failed_requests=$(jq -r '.Run.Stats.Requests.failed' "$summary_file")
           summaries+="\n| $collection_name | $total_requests | $pending_requests | $failed_requests |"
         done
         echo "This is the lead-in sentence for the list" >> $GITHUB_STEP_SUMMARY
         echo -e "$summaries" >> $GITHUB_STEP_SUMMARY
            
      - name: Continue to Next Collection
        if: ${{ always() }}
        run: echo "Continuing to the next collection..."