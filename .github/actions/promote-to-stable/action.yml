name: "promote testing to stable"
description: "Promote testing packages to stable."
inputs:
  artifactory_token:
    description: "Artifactory token"
    required: true
  module:
    description: "Module"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  major_version:
    description: "Centreon packaged major version"
    required: true
  minor_version:
    description: "Centreon package minor version"
    required: true
  stability:
    description: "The package stability (stable, testing, unstable)"
    required: true
  yum_repo_url:
    description: "The legacy yum repo url"
    required: true
  update_repo_path:
    description: "The update repo script path"
    required: true
  cloudfront_id:
    description: "The cloudfront ID for repo url"
    required: true
  yum_repo_address:
    description: "The legacy yum repo address"
    required: true
  yum_repo_key:
    description: "The repo key"
    required: true

runs:
  using: "composite"
  steps:
    - uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: https://centreon.jfrog.io
        JF_ACCESS_TOKEN: ${{ inputs.artifactory_token }}

    - name: Promote RPM packages to stable
      if: ${{ startsWith(inputs.distrib, 'el') }}
      run: |
        set -x
        echo "[DEBUG] - Major version: ${{ inputs.major_version }}"
        echo "[DEBUG] - Minor version: ${{ inputs.minor_version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"

        for ARCH in "noarch" "x86_64"; do
          echo "[DEBUG] - Get artifactory path of $ARCH testing artifacts to promote to stable."
          SRC_PATHS=$(jf rt s --include-dirs rpm-standard/${{ inputs.major_version }}/${{ inputs.distrib }}/testing/$ARCH/${{ inputs.module }}/*.rpm | jq -r '.[].path')

          if [[ ${SRC_PATHS[@]} ]]; then
            for SRC_PATH in ${SRC_PATHS[@]}; do
              echo "[DEBUG] - Source path found: $SRC_PATH"
            done
          else
            echo "[DEBUG] - No source path found."
            continue
          fi

          echo "[DEBUG] - Build $ARCH artifactory target path."
          TARGET_PATH="rpm-standard/${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/RPMS/"
          echo "[DEBUG] - Target path: $TARGET_PATH"
          echo "[DEBUG] - Promoting $ARCH testing artifacts to stable."

          for ARTIFACT in ${SRC_PATHS[@]}; do
            echo "[DEBUG] - Promoting $ARTIFACT to stable on artifactory."
            jf rt cp $ARTIFACT $TARGET_PATH --flat=true
          done

          # promote on old repos
          echo "[DEBUG] - Get yum.centreon.com path of $ARCH testing artifacts to promote to stable."
          LEGACY_SRC_FILES=$(dir /srv/centreon-yum/yum.centreon.com/standard/${{ inputs.major_version }}/${{ inputs.distrib }}/testing/$ARCH/${{ inputs.module }}/centreon-${{ inputs.module }}-${{ inputs.major_version }}.${{ inputs.minor_version }}-1/)
          LEGACY_TARGET_PATH="/srv/centreon-yum/yum.centreon.com/standard/${{ inputs.major_version }}/${{ inputs.distrib }}/stable/$ARCH/RPMS/"

          ssh -o StrictHostKeyChecking=no mkdir -p $LEGACY_TARGET_PATH
          ssh -o "StrictHostKeyChecking=no" cp $LEGACY_SRC_FILES $LEGACY_TARGET_PATH

          METADATAS="$METADATAS /srv/centreon-yum/yum.centreon.com/standard/${{ inputs.major_version }}/${{ inputs.distrib }}/stable/$ARCH"
          INVALIDATION_PATHS="$INVALIDATION_PATHS /standard/${{ inputs.major_version }}/${{ inputs.distrib }}/stable/*"

          ssh -o StrictHostKeyChecking=no "${{ inputs.yum_repo_address }}" "sh /home/cesync/scripts/updaterepo.sh $METADATAS"

          METADATAS=`echo "$METADATAS" | xargs -n1 | sort -u | xargs`
          for METADATA in `echo $METADATAS`; do
            ssh -o StrictHostKeyChecking=no "${{ inputs.yum_repo_address }}" "sh "${{ inputs.update_repo_path }}" $METADATA" 2>&-
          done

          ID="${{ inputs.cloudfront_id }}"
          # Remove duplicated invalidation paths
          INVALIDATION_PATHS=`echo "$INVALIDATION_PATHS" | xargs -n1 | sort -u | xargs`
          ITERATIONS=1

          for INVALIDATION_PATH in `echo $INVALIDATION_PATHS`; do
            until aws cloudfront create-invalidation --distribution-id "$ID" --paths "$INVALIDATION_PATH"; do
              if [ ${ITERATIONS} -eq 10 ]; then
                return 0
              fi
              echo "couldn't invalidate cache, AWS quota might have been reached, retrying in 30 seconds..."
              sleep 30s
              ITERATIONS=$((ITERATIONS+1))
            done
          done
        done
      shell: bash